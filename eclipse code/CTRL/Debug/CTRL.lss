
CTRL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000022c0  00002354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800178  00800178  0000246c  2**0
                  ALLOC
  3 .stab         0000246c  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001242  00000000  00000000  000048d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000082b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000963d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a814  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000acca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <main>
      8a:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 27 11 	jmp	0x224e	; 0x224e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 27 11 	jmp	0x224e	; 0x224e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2f 11 	jmp	0x225e	; 0x225e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2f 11 	jmp	0x225e	; 0x225e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Calculate_time>:
static Timer1_ConfigType Timer_Config = {0,7813,N_1024,COMPARE};
/*******************************************************************************
 *                       FUNCTION FOR ISR                                      *
 *******************************************************************************/
void Calculate_time(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	g_tick ++;
     e36:	80 91 79 01 	lds	r24, 0x0179
     e3a:	90 91 7a 01 	lds	r25, 0x017A
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	90 93 7a 01 	sts	0x017A, r25
     e44:	80 93 79 01 	sts	0x0179, r24
}
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <START_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void START_init(void){ //devices initialization
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	64 97       	sbiw	r28, 0x14	; 20
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_ConfigType UART_Configurations = {DISABLED,ONE_BIT,EIGHT_BIT,9600}; //uart configurations
     e62:	ce 01       	movw	r24, r28
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	9c 87       	std	Y+12, r25	; 0x0c
     e68:	8b 87       	std	Y+11, r24	; 0x0b
     e6a:	e1 e7       	ldi	r30, 0x71	; 113
     e6c:	f1 e0       	ldi	r31, 0x01	; 1
     e6e:	fe 87       	std	Y+14, r31	; 0x0e
     e70:	ed 87       	std	Y+13, r30	; 0x0d
     e72:	f7 e0       	ldi	r31, 0x07	; 7
     e74:	ff 87       	std	Y+15, r31	; 0x0f
     e76:	ed 85       	ldd	r30, Y+13	; 0x0d
     e78:	fe 85       	ldd	r31, Y+14	; 0x0e
     e7a:	00 80       	ld	r0, Z
     e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	9e 87       	std	Y+14, r25	; 0x0e
     e84:	8d 87       	std	Y+13, r24	; 0x0d
     e86:	eb 85       	ldd	r30, Y+11	; 0x0b
     e88:	fc 85       	ldd	r31, Y+12	; 0x0c
     e8a:	00 82       	st	Z, r0
     e8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     e8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	9c 87       	std	Y+12, r25	; 0x0c
     e94:	8b 87       	std	Y+11, r24	; 0x0b
     e96:	9f 85       	ldd	r25, Y+15	; 0x0f
     e98:	91 50       	subi	r25, 0x01	; 1
     e9a:	9f 87       	std	Y+15, r25	; 0x0f
     e9c:	ef 85       	ldd	r30, Y+15	; 0x0f
     e9e:	ee 23       	and	r30, r30
     ea0:	51 f7       	brne	.-44     	; 0xe76 <START_init+0x28>
	TWI_ConfigType TWI_Configurations = {0b00000010,0x02,pre_1};       //I2C config
     ea2:	ce 01       	movw	r24, r28
     ea4:	08 96       	adiw	r24, 0x08	; 8
     ea6:	99 8b       	std	Y+17, r25	; 0x11
     ea8:	88 8b       	std	Y+16, r24	; 0x10
     eaa:	ee e6       	ldi	r30, 0x6E	; 110
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	fb 8b       	std	Y+19, r31	; 0x13
     eb0:	ea 8b       	std	Y+18, r30	; 0x12
     eb2:	f3 e0       	ldi	r31, 0x03	; 3
     eb4:	fc 8b       	std	Y+20, r31	; 0x14
     eb6:	ea 89       	ldd	r30, Y+18	; 0x12
     eb8:	fb 89       	ldd	r31, Y+19	; 0x13
     eba:	00 80       	ld	r0, Z
     ebc:	8a 89       	ldd	r24, Y+18	; 0x12
     ebe:	9b 89       	ldd	r25, Y+19	; 0x13
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	9b 8b       	std	Y+19, r25	; 0x13
     ec4:	8a 8b       	std	Y+18, r24	; 0x12
     ec6:	e8 89       	ldd	r30, Y+16	; 0x10
     ec8:	f9 89       	ldd	r31, Y+17	; 0x11
     eca:	00 82       	st	Z, r0
     ecc:	88 89       	ldd	r24, Y+16	; 0x10
     ece:	99 89       	ldd	r25, Y+17	; 0x11
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	99 8b       	std	Y+17, r25	; 0x11
     ed4:	88 8b       	std	Y+16, r24	; 0x10
     ed6:	9c 89       	ldd	r25, Y+20	; 0x14
     ed8:	91 50       	subi	r25, 0x01	; 1
     eda:	9c 8b       	std	Y+20, r25	; 0x14
     edc:	ec 89       	ldd	r30, Y+20	; 0x14
     ede:	ee 23       	and	r30, r30
     ee0:	51 f7       	brne	.-44     	; 0xeb6 <START_init+0x68>


	SREG|=(1<<7);      //allow interrupt register bit
     ee2:	af e5       	ldi	r26, 0x5F	; 95
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ef e5       	ldi	r30, 0x5F	; 95
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	80 68       	ori	r24, 0x80	; 128
     eee:	8c 93       	st	X, r24

	buzzer_init();   // buzzer initialization
     ef0:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <buzzer_init>
	DcMotor_init();  //motor initialization
     ef4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <DcMotor_init>
	TWI_init(&TWI_Configurations);  // i2c initialization
     ef8:	ce 01       	movw	r24, r28
     efa:	08 96       	adiw	r24, 0x08	; 8
     efc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <TWI_init>
	UART_init(&UART_Configurations);  // uart initialization
     f00:	ce 01       	movw	r24, r28
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	0e 94 0a 10 	call	0x2014	; 0x2014 <UART_init>
	TIMER1_setCallBack(Calculate_time);  // timer1 isr functions
     f08:	87 e1       	ldi	r24, 0x17	; 23
     f0a:	97 e0       	ldi	r25, 0x07	; 7
     f0c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <TIMER1_setCallBack>

	while(UART_recieveByte()!= M1_READY);  //waiting msu1 to be ready
     f10:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
     f14:	80 31       	cpi	r24, 0x10	; 16
     f16:	e1 f7       	brne	.-8      	; 0xf10 <START_init+0xc2>
	UART_sendByte(M2_READY); //tell mcu1 that mcu2 is ready it
     f18:	80 e2       	ldi	r24, 0x20	; 32
     f1a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <UART_sendByte>

}
     f1e:	64 96       	adiw	r28, 0x14	; 20
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <receive_pass>:
void receive_pass(void){   //receiving pass and save it
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	ad 97       	sbiw	r28, 0x2d	; 45
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
	uint16 pass[15];
	uint8 i=0;
     f48:	1f 86       	std	Y+15, r1	; 0x0f
	while(UART_recieveByte()!= SAVE);
     f4a:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	e1 f7       	brne	.-8      	; 0xf4a <receive_pass+0x1a>
	UART_sendByte(M2_READY);
     f52:	80 e2       	ldi	r24, 0x20	; 32
     f54:	0e 94 73 10 	call	0x20e6	; 0x20e6 <UART_sendByte>
	counter=UART_recieveByte();
     f58:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
     f5c:	80 93 78 01 	sts	0x0178, r24
     f60:	a3 c0       	rjmp	.+326    	; 0x10a8 <receive_pass+0x178>
	while(i<counter){
		UART_sendByte(M2_READY);
     f62:	80 e2       	ldi	r24, 0x20	; 32
     f64:	0e 94 73 10 	call	0x20e6	; 0x20e6 <UART_sendByte>
		pass[i] =UART_recieveByte();
     f68:	8f 85       	ldd	r24, Y+15	; 0x0f
     f6a:	08 2f       	mov	r16, r24
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
     f72:	48 2f       	mov	r20, r24
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	98 01       	movw	r18, r16
     f78:	22 0f       	add	r18, r18
     f7a:	33 1f       	adc	r19, r19
     f7c:	ce 01       	movw	r24, r28
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	82 0f       	add	r24, r18
     f82:	93 1f       	adc	r25, r19
     f84:	fc 01       	movw	r30, r24
     f86:	3f 96       	adiw	r30, 0x0f	; 15
     f88:	51 83       	std	Z+1, r21	; 0x01
     f8a:	40 83       	st	Z, r20
		EEPROM_writeByte((0x0300+i),pass[i]);
     f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	80 50       	subi	r24, 0x00	; 0
     f94:	9d 4f       	sbci	r25, 0xFD	; 253
     f96:	ac 01       	movw	r20, r24
     f98:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	9c 01       	movw	r18, r24
     fa0:	22 0f       	add	r18, r18
     fa2:	33 1f       	adc	r19, r19
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	fc 01       	movw	r30, r24
     fae:	3f 96       	adiw	r30, 0x0f	; 15
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	ca 01       	movw	r24, r20
     fb8:	62 2f       	mov	r22, r18
     fba:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <EEPROM_writeByte>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	ac e8       	ldi	r26, 0x8C	; 140
     fc4:	b2 e4       	ldi	r27, 0x42	; 66
     fc6:	8b 87       	std	Y+11, r24	; 0x0b
     fc8:	9c 87       	std	Y+12, r25	; 0x0c
     fca:	ad 87       	std	Y+13, r26	; 0x0d
     fcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fce:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	4a ef       	ldi	r20, 0xFA	; 250
     fdc:	54 e4       	ldi	r21, 0x44	; 68
     fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	8f 83       	std	Y+7, r24	; 0x07
     fe8:	98 87       	std	Y+8, r25	; 0x08
     fea:	a9 87       	std	Y+9, r26	; 0x09
     fec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fee:	6f 81       	ldd	r22, Y+7	; 0x07
     ff0:	78 85       	ldd	r23, Y+8	; 0x08
     ff2:	89 85       	ldd	r24, Y+9	; 0x09
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e8       	ldi	r20, 0x80	; 128
     ffc:	5f e3       	ldi	r21, 0x3F	; 63
     ffe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1002:	88 23       	and	r24, r24
    1004:	2c f4       	brge	.+10     	; 0x1010 <receive_pass+0xe0>
		__ticks = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9e 83       	std	Y+6, r25	; 0x06
    100c:	8d 83       	std	Y+5, r24	; 0x05
    100e:	3f c0       	rjmp	.+126    	; 0x108e <receive_pass+0x15e>
	else if (__tmp > 65535)
    1010:	6f 81       	ldd	r22, Y+7	; 0x07
    1012:	78 85       	ldd	r23, Y+8	; 0x08
    1014:	89 85       	ldd	r24, Y+9	; 0x09
    1016:	9a 85       	ldd	r25, Y+10	; 0x0a
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	3f ef       	ldi	r19, 0xFF	; 255
    101c:	4f e7       	ldi	r20, 0x7F	; 127
    101e:	57 e4       	ldi	r21, 0x47	; 71
    1020:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1024:	18 16       	cp	r1, r24
    1026:	4c f5       	brge	.+82     	; 0x107a <receive_pass+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1028:	6b 85       	ldd	r22, Y+11	; 0x0b
    102a:	7c 85       	ldd	r23, Y+12	; 0x0c
    102c:	8d 85       	ldd	r24, Y+13	; 0x0d
    102e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e2       	ldi	r20, 0x20	; 32
    1036:	51 e4       	ldi	r21, 0x41	; 65
    1038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	8d 83       	std	Y+5, r24	; 0x05
    1050:	0f c0       	rjmp	.+30     	; 0x1070 <receive_pass+0x140>
    1052:	88 ec       	ldi	r24, 0xC8	; 200
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9c 83       	std	Y+4, r25	; 0x04
    1058:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <receive_pass+0x12e>
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	9e 83       	std	Y+6, r25	; 0x06
    106e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	69 f7       	brne	.-38     	; 0x1052 <receive_pass+0x122>
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <receive_pass+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107a:	6f 81       	ldd	r22, Y+7	; 0x07
    107c:	78 85       	ldd	r23, Y+8	; 0x08
    107e:	89 85       	ldd	r24, Y+9	; 0x09
    1080:	9a 85       	ldd	r25, Y+10	; 0x0a
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	9e 83       	std	Y+6, r25	; 0x06
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <receive_pass+0x16a>
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(70);
		i++;
    10a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	8f 87       	std	Y+15, r24	; 0x0f
	uint16 pass[15];
	uint8 i=0;
	while(UART_recieveByte()!= SAVE);
	UART_sendByte(M2_READY);
	counter=UART_recieveByte();
	while(i<counter){
    10a8:	90 91 78 01 	lds	r25, 0x0178
    10ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ae:	89 17       	cp	r24, r25
    10b0:	08 f4       	brcc	.+2      	; 0x10b4 <receive_pass+0x184>
    10b2:	57 cf       	rjmp	.-338    	; 0xf62 <receive_pass+0x32>
		pass[i] =UART_recieveByte();
		EEPROM_writeByte((0x0300+i),pass[i]);
		_delay_ms(70);
		i++;
	}
	UART_sendByte(END_SAVING);
    10b4:	83 e0       	ldi	r24, 0x03	; 3
    10b6:	0e 94 73 10 	call	0x20e6	; 0x20e6 <UART_sendByte>
}
    10ba:	ad 96       	adiw	r28, 0x2d	; 45
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <check_pass>:



void check_pass(void){    //checking pass from memory
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	cb 54       	subi	r28, 0x4B	; 75
    10de:	d0 40       	sbci	r29, 0x00	; 0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
	uint16 pass_saved[15];
	uint16 temp_pass[15];
	uint8 i=0;
    10ea:	1f 86       	std	Y+15, r1	; 0x0f

	while(UART_recieveByte()!= CHECK_PASS);
    10ec:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <check_pass+0x1c>
	while(UART_recieveByte()!= SAVE);
    10f4:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <check_pass+0x24>
	UART_sendByte(M2_READY);
    10fc:	80 e2       	ldi	r24, 0x20	; 32
    10fe:	0e 94 73 10 	call	0x20e6	; 0x20e6 <UART_sendByte>
	counter=UART_recieveByte();
    1102:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
    1106:	80 93 78 01 	sts	0x0178, r24
    110a:	8a c0       	rjmp	.+276    	; 0x1220 <check_pass+0x150>
	while(i<counter){

		UART_sendByte(M2_READY);
    110c:	80 e2       	ldi	r24, 0x20	; 32
    110e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <UART_sendByte>
		temp_pass[i] =UART_recieveByte();
    1112:	8f 85       	ldd	r24, Y+15	; 0x0f
    1114:	08 2f       	mov	r16, r24
    1116:	10 e0       	ldi	r17, 0x00	; 0
    1118:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
    111c:	48 2f       	mov	r20, r24
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	98 01       	movw	r18, r16
    1122:	22 0f       	add	r18, r18
    1124:	33 1f       	adc	r19, r19
    1126:	ce 01       	movw	r24, r28
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	fc 01       	movw	r30, r24
    1130:	bd 96       	adiw	r30, 0x2d	; 45
    1132:	51 83       	std	Z+1, r21	; 0x01
    1134:	40 83       	st	Z, r20
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a8 e4       	ldi	r26, 0x48	; 72
    113c:	b3 e4       	ldi	r27, 0x43	; 67
    113e:	8b 87       	std	Y+11, r24	; 0x0b
    1140:	9c 87       	std	Y+12, r25	; 0x0c
    1142:	ad 87       	std	Y+13, r26	; 0x0d
    1144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	4a ef       	ldi	r20, 0xFA	; 250
    1154:	54 e4       	ldi	r21, 0x44	; 68
    1156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8f 83       	std	Y+7, r24	; 0x07
    1160:	98 87       	std	Y+8, r25	; 0x08
    1162:	a9 87       	std	Y+9, r26	; 0x09
    1164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    117a:	88 23       	and	r24, r24
    117c:	2c f4       	brge	.+10     	; 0x1188 <check_pass+0xb8>
		__ticks = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	3f c0       	rjmp	.+126    	; 0x1206 <check_pass+0x136>
	else if (__tmp > 65535)
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	3f ef       	ldi	r19, 0xFF	; 255
    1194:	4f e7       	ldi	r20, 0x7F	; 127
    1196:	57 e4       	ldi	r21, 0x47	; 71
    1198:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    119c:	18 16       	cp	r1, r24
    119e:	4c f5       	brge	.+82     	; 0x11f2 <check_pass+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <check_pass+0x118>
    11ca:	88 ec       	ldi	r24, 0xC8	; 200
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <check_pass+0x106>
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	69 f7       	brne	.-38     	; 0x11ca <check_pass+0xfa>
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <check_pass+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f2:	6f 81       	ldd	r22, Y+7	; 0x07
    11f4:	78 85       	ldd	r23, Y+8	; 0x08
    11f6:	89 85       	ldd	r24, Y+9	; 0x09
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <check_pass+0x142>
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		i++;
    121a:	8f 85       	ldd	r24, Y+15	; 0x0f
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	8f 87       	std	Y+15, r24	; 0x0f

	while(UART_recieveByte()!= CHECK_PASS);
	while(UART_recieveByte()!= SAVE);
	UART_sendByte(M2_READY);
	counter=UART_recieveByte();
	while(i<counter){
    1220:	90 91 78 01 	lds	r25, 0x0178
    1224:	8f 85       	ldd	r24, Y+15	; 0x0f
    1226:	89 17       	cp	r24, r25
    1228:	08 f4       	brcc	.+2      	; 0x122c <check_pass+0x15c>
    122a:	70 cf       	rjmp	.-288    	; 0x110c <check_pass+0x3c>
		UART_sendByte(M2_READY);
		temp_pass[i] =UART_recieveByte();
		_delay_ms(200);
		i++;
	}
	UART_sendByte(END_SAVING);
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <UART_sendByte>
	i=0;
    1232:	1f 86       	std	Y+15, r1	; 0x0f
    1234:	34 c0       	rjmp	.+104    	; 0x129e <check_pass+0x1ce>
	while(i<counter){
		EEPROM_readByte((0x0300+i), pass_saved);
    1236:	8f 85       	ldd	r24, Y+15	; 0x0f
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	80 50       	subi	r24, 0x00	; 0
    123e:	9d 4f       	sbci	r25, 0xFD	; 253
    1240:	9e 01       	movw	r18, r28
    1242:	20 5f       	subi	r18, 0xF0	; 240
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	b9 01       	movw	r22, r18
    1248:	0e 94 ab 0a 	call	0x1556	; 0x1556 <EEPROM_readByte>

		if(temp_pass[i] != pass_saved[i])
    124c:	8f 85       	ldd	r24, Y+15	; 0x0f
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9c 01       	movw	r18, r24
    1254:	22 0f       	add	r18, r18
    1256:	33 1f       	adc	r19, r19
    1258:	ce 01       	movw	r24, r28
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	82 0f       	add	r24, r18
    125e:	93 1f       	adc	r25, r19
    1260:	fc 01       	movw	r30, r24
    1262:	bd 96       	adiw	r30, 0x2d	; 45
    1264:	40 81       	ld	r20, Z
    1266:	51 81       	ldd	r21, Z+1	; 0x01
    1268:	8f 85       	ldd	r24, Y+15	; 0x0f
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9c 01       	movw	r18, r24
    1270:	22 0f       	add	r18, r18
    1272:	33 1f       	adc	r19, r19
    1274:	ce 01       	movw	r24, r28
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	82 0f       	add	r24, r18
    127a:	93 1f       	adc	r25, r19
    127c:	fc 01       	movw	r30, r24
    127e:	3f 96       	adiw	r30, 0x0f	; 15
    1280:	80 81       	ld	r24, Z
    1282:	91 81       	ldd	r25, Z+1	; 0x01
    1284:	48 17       	cp	r20, r24
    1286:	59 07       	cpc	r21, r25
    1288:	21 f0       	breq	.+8      	; 0x1292 <check_pass+0x1c2>
		{
			UART_sendByte(Error_pass);
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <UART_sendByte>
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <check_pass+0x1c8>
		}
		else
		{

			UART_sendByte(CONTINUE_PASS);
    1292:	85 e0       	ldi	r24, 0x05	; 5
    1294:	0e 94 73 10 	call	0x20e6	; 0x20e6 <UART_sendByte>
		}

		i++;
    1298:	8f 85       	ldd	r24, Y+15	; 0x0f
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		i++;
	}
	UART_sendByte(END_SAVING);
	i=0;
	while(i<counter){
    129e:	90 91 78 01 	lds	r25, 0x0178
    12a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a4:	89 17       	cp	r24, r25
    12a6:	38 f2       	brcs	.-114    	; 0x1236 <check_pass+0x166>
			UART_sendByte(CONTINUE_PASS);
		}

		i++;
	}
	error = UART_recieveByte();
    12a8:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
    12ac:	80 93 7d 01 	sts	0x017D, r24
	if(error < 3)
    12b0:	80 91 7d 01 	lds	r24, 0x017D
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	18 f4       	brcc	.+6      	; 0x12be <check_pass+0x1ee>
	{
		check_pass();
    12b8:	0e 94 68 08 	call	0x10d0	; 0x10d0 <check_pass>
    12bc:	18 c0       	rjmp	.+48     	; 0x12ee <check_pass+0x21e>
	}
	else if(error == 3)
    12be:	80 91 7d 01 	lds	r24, 0x017D
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	a1 f4       	brne	.+40     	; 0x12ee <check_pass+0x21e>
	{
		TIMER1_deInit();
    12c6:	0e 94 57 0f 	call	0x1eae	; 0x1eae <TIMER1_deInit>
		TIMER1_init(&Timer_Config);
    12ca:	88 e6       	ldi	r24, 0x68	; 104
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <TIMER1_init>
		g_tick =0;
    12d2:	10 92 7a 01 	sts	0x017A, r1
    12d6:	10 92 79 01 	sts	0x0179, r1
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <check_pass+0x210>

		while (g_tick != 60)
		{
			buzzer_ON();
    12dc:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <buzzer_ON>
	{
		TIMER1_deInit();
		TIMER1_init(&Timer_Config);
		g_tick =0;

		while (g_tick != 60)
    12e0:	80 91 79 01 	lds	r24, 0x0179
    12e4:	90 91 7a 01 	lds	r25, 0x017A
    12e8:	8c 33       	cpi	r24, 0x3C	; 60
    12ea:	91 05       	cpc	r25, r1
    12ec:	b9 f7       	brne	.-18     	; 0x12dc <check_pass+0x20c>
		{
			buzzer_ON();
		}
	}
}
    12ee:	c5 5b       	subi	r28, 0xB5	; 181
    12f0:	df 4f       	sbci	r29, 0xFF	; 255
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	08 95       	ret

00001306 <open_door>:
void open_door(void){  //controling door
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!= UNLOCK_DOOR);
    130e:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
    1312:	86 30       	cpi	r24, 0x06	; 6
    1314:	e1 f7       	brne	.-8      	; 0x130e <open_door+0x8>
	TIMER1_deInit();
    1316:	0e 94 57 0f 	call	0x1eae	; 0x1eae <TIMER1_deInit>
	TIMER1_init(&Timer_Config);
    131a:	88 e6       	ldi	r24, 0x68	; 104
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <TIMER1_init>
	g_tick =0;
    1322:	10 92 7a 01 	sts	0x017A, r1
    1326:	10 92 79 01 	sts	0x0179, r1
    132a:	04 c0       	rjmp	.+8      	; 0x1334 <open_door+0x2e>
	while(g_tick != 15)
	{
		DcMotor_Rotate(CW,100);
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	64 e6       	ldi	r22, 0x64	; 100
    1330:	0e 94 25 0a 	call	0x144a	; 0x144a <DcMotor_Rotate>
void open_door(void){  //controling door
	while(UART_recieveByte()!= UNLOCK_DOOR);
	TIMER1_deInit();
	TIMER1_init(&Timer_Config);
	g_tick =0;
	while(g_tick != 15)
    1334:	80 91 79 01 	lds	r24, 0x0179
    1338:	90 91 7a 01 	lds	r25, 0x017A
    133c:	8f 30       	cpi	r24, 0x0F	; 15
    133e:	91 05       	cpc	r25, r1
    1340:	a9 f7       	brne	.-22     	; 0x132c <open_door+0x26>
	{
		DcMotor_Rotate(CW,100);
	}
	g_tick =0;
    1342:	10 92 7a 01 	sts	0x017A, r1
    1346:	10 92 79 01 	sts	0x0179, r1
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <open_door+0x4e>
	while(g_tick != 3)
	{
		DcMotor_Rotate(STOP,0);
    134c:	82 e0       	ldi	r24, 0x02	; 2
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	0e 94 25 0a 	call	0x144a	; 0x144a <DcMotor_Rotate>
	while(g_tick != 15)
	{
		DcMotor_Rotate(CW,100);
	}
	g_tick =0;
	while(g_tick != 3)
    1354:	80 91 79 01 	lds	r24, 0x0179
    1358:	90 91 7a 01 	lds	r25, 0x017A
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	91 05       	cpc	r25, r1
    1360:	a9 f7       	brne	.-22     	; 0x134c <open_door+0x46>
	{
		DcMotor_Rotate(STOP,0);
	}
	g_tick =0;
    1362:	10 92 7a 01 	sts	0x017A, r1
    1366:	10 92 79 01 	sts	0x0179, r1
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <open_door+0x6e>
	while(g_tick != 15)
	{
		DcMotor_Rotate(A_CW,100);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	64 e6       	ldi	r22, 0x64	; 100
    1370:	0e 94 25 0a 	call	0x144a	; 0x144a <DcMotor_Rotate>
	while(g_tick != 3)
	{
		DcMotor_Rotate(STOP,0);
	}
	g_tick =0;
	while(g_tick != 15)
    1374:	80 91 79 01 	lds	r24, 0x0179
    1378:	90 91 7a 01 	lds	r25, 0x017A
    137c:	8f 30       	cpi	r24, 0x0F	; 15
    137e:	91 05       	cpc	r25, r1
    1380:	a9 f7       	brne	.-22     	; 0x136c <open_door+0x66>
	{
		DcMotor_Rotate(A_CW,100);
	}

	DcMotor_Rotate(STOP,0);
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	0e 94 25 0a 	call	0x144a	; 0x144a <DcMotor_Rotate>
}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <main_options>:
void main_options(void){   //main options set menu
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	check_pass();
    1398:	0e 94 68 08 	call	0x10d0	; 0x10d0 <check_pass>
	if(UART_recieveByte() == 0)
    139c:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
    13a0:	88 23       	and	r24, r24
    13a2:	51 f4       	brne	.+20     	; 0x13b8 <main_options+0x28>
	{
		if(UART_recieveByte() == '+')
    13a4:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
    13a8:	8b 32       	cpi	r24, 0x2B	; 43
    13aa:	19 f4       	brne	.+6      	; 0x13b2 <main_options+0x22>
		{

			open_door();
    13ac:	0e 94 83 09 	call	0x1306	; 0x1306 <open_door>
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <main_options+0x2c>
		}
		else
		{
			receive_pass();
    13b2:	0e 94 98 07 	call	0xf30	; 0xf30 <receive_pass>
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <main_options+0x2c>
		}
	}

	else
	{
		buzzer_OFF();
    13b8:	0e 94 fe 09 	call	0x13fc	; 0x13fc <buzzer_OFF>
	}

}
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <buzzer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void buzzer_init(void)
{
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Buzzer_PORT_ID, Buzzer_PIN_ID, PIN_OUTPUT);  // make pin as output
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	64 e0       	ldi	r22, 0x04	; 4
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <GPIO_setupPinDirection>
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID,LOGIC_LOW); //make buzzer off at frist
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	64 e0       	ldi	r22, 0x04	; 4
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_writePin>
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <buzzer_ON>:

void buzzer_ON(void)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_HIGH);   //buzzer on
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	64 e0       	ldi	r22, 0x04	; 4
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_writePin>
}
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <buzzer_OFF>:

void buzzer_OFF(void)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID,LOGIC_LOW);   //buzzer off
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	64 e0       	ldi	r22, 0x04	; 4
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_writePin>
}
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <DcMotor_init>:
#include"gpio.h"

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void DcMotor_init(void){
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_IN1,MOTOR_PIN_IN1,PIN_OUTPUT);   // make motor pins as output
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	62 e0       	ldi	r22, 0x02	; 2
    1420:	41 e0       	ldi	r20, 0x01	; 1
    1422:	0e 94 0b 0b 	call	0x1616	; 0x1616 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_IN2,MOTOR_PIN_IN2,PIN_OUTPUT);
    1426:	83 e0       	ldi	r24, 0x03	; 3
    1428:	63 e0       	ldi	r22, 0x03	; 3
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <GPIO_setupPinDirection>

	GPIO_writePin(MOTOR_PORT_IN1,MOTOR_PIN_IN1,LOGIC_LOW);      //Initially stop
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	62 e0       	ldi	r22, 0x02	; 2
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_IN2,MOTOR_PIN_IN2,LOGIC_LOW);
    143a:	83 e0       	ldi	r24, 0x03	; 3
    143c:	63 e0       	ldi	r22, 0x03	; 3
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_writePin>
	GPIO_setupPinDirection(MOTOR_PORT_IN3,MOTOR_PIN_IN3,PIN_OUTPUT);

	GPIO_writePin(MOTOR_PORT_IN4,MOTOR_PIN_IN4,LOGIC_LOW);
	GPIO_writePin(MOTOR_PORT_IN4,MOTOR_PIN_IN4,LOGIC_LOW);
#endif
}
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){ //case to run the motor in diffrent direction
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <DcMotor_Rotate+0x6>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <DcMotor_Rotate+0x8>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_start(speed);  //to change the speed of motors
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <PWM_Timer0_start>
	switch(state)
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3c 83       	std	Y+4, r19	; 0x04
    1468:	2b 83       	std	Y+3, r18	; 0x03
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	91 05       	cpc	r25, r1
    1472:	a1 f0       	breq	.+40     	; 0x149c <DcMotor_Rotate+0x52>
    1474:	2b 81       	ldd	r18, Y+3	; 0x03
    1476:	3c 81       	ldd	r19, Y+4	; 0x04
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	d1 f0       	breq	.+52     	; 0x14b2 <DcMotor_Rotate+0x68>
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	01 f5       	brne	.+64     	; 0x14c6 <DcMotor_Rotate+0x7c>
	{
	case CW:
		GPIO_writePin(MOTOR_PORT_IN1,MOTOR_PIN_IN1,LOGIC_HIGH);
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	62 e0       	ldi	r22, 0x02	; 2
    148a:	41 e0       	ldi	r20, 0x01	; 1
    148c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_IN2,MOTOR_PIN_IN2,LOGIC_LOW);
    1490:	83 e0       	ldi	r24, 0x03	; 3
    1492:	63 e0       	ldi	r22, 0x03	; 3
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_writePin>
    149a:	15 c0       	rjmp	.+42     	; 0x14c6 <DcMotor_Rotate+0x7c>
		GPIO_writePin(MOTOR_PORT_IN4,MOTOR_PIN_IN4,LOGIC_LOW);
#endif

		break;
	case A_CW:
		GPIO_writePin(MOTOR_PORT_IN1,MOTOR_PIN_IN1,LOGIC_LOW);
    149c:	83 e0       	ldi	r24, 0x03	; 3
    149e:	62 e0       	ldi	r22, 0x02	; 2
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_IN2,MOTOR_PIN_IN2,LOGIC_HIGH);
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	63 e0       	ldi	r22, 0x03	; 3
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_writePin>
    14b0:	0a c0       	rjmp	.+20     	; 0x14c6 <DcMotor_Rotate+0x7c>
#endif

		break;
	case STOP:

		GPIO_writePin(MOTOR_PORT_IN1,MOTOR_PIN_IN1,LOGIC_LOW);
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	62 e0       	ldi	r22, 0x02	; 2
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_IN2,MOTOR_PIN_IN2,LOGIC_LOW);
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	63 e0       	ldi	r22, 0x03	; 3
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_IN4,MOTOR_PIN_IN4,LOGIC_LOW);
#endif
		break;
	}

}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <EEPROM_writeByte+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <EEPROM_writeByte+0x8>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14e6:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14ea:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    14ee:	88 30       	cpi	r24, 0x08	; 8
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <EEPROM_writeByte+0x22>
        return ERROR;
    14f2:	1c 82       	std	Y+4, r1	; 0x04
    14f4:	28 c0       	rjmp	.+80     	; 0x1546 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	9a 81       	ldd	r25, Y+2	; 0x02
    14fa:	80 70       	andi	r24, 0x00	; 0
    14fc:	97 70       	andi	r25, 0x07	; 7
    14fe:	88 0f       	add	r24, r24
    1500:	89 2f       	mov	r24, r25
    1502:	88 1f       	adc	r24, r24
    1504:	99 0b       	sbc	r25, r25
    1506:	91 95       	neg	r25
    1508:	80 6a       	ori	r24, 0xA0	; 160
    150a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    150e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    1512:	88 31       	cpi	r24, 0x18	; 24
    1514:	11 f0       	breq	.+4      	; 0x151a <EEPROM_writeByte+0x46>
        return ERROR; 
    1516:	1c 82       	std	Y+4, r1	; 0x04
    1518:	16 c0       	rjmp	.+44     	; 0x1546 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1520:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    1524:	88 32       	cpi	r24, 0x28	; 40
    1526:	11 f0       	breq	.+4      	; 0x152c <EEPROM_writeByte+0x58>
        return ERROR;
    1528:	1c 82       	std	Y+4, r1	; 0x04
    152a:	0d c0       	rjmp	.+26     	; 0x1546 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1532:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    1536:	88 32       	cpi	r24, 0x28	; 40
    1538:	11 f0       	breq	.+4      	; 0x153e <EEPROM_writeByte+0x6a>
        return ERROR;
    153a:	1c 82       	std	Y+4, r1	; 0x04
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    153e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <TWI_stop>
	
    return SUCCESS;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	8c 83       	std	Y+4, r24	; 0x04
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <EEPROM_readByte+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <EEPROM_readByte+0x8>
    155e:	0f 92       	push	r0
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	9a 83       	std	Y+2, r25	; 0x02
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	7c 83       	std	Y+4, r23	; 0x04
    156a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    156c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1570:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    1574:	88 30       	cpi	r24, 0x08	; 8
    1576:	11 f0       	breq	.+4      	; 0x157c <EEPROM_readByte+0x26>
        return ERROR;
    1578:	1d 82       	std	Y+5, r1	; 0x05
    157a:	44 c0       	rjmp	.+136    	; 0x1604 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	80 70       	andi	r24, 0x00	; 0
    1582:	97 70       	andi	r25, 0x07	; 7
    1584:	88 0f       	add	r24, r24
    1586:	89 2f       	mov	r24, r25
    1588:	88 1f       	adc	r24, r24
    158a:	99 0b       	sbc	r25, r25
    158c:	91 95       	neg	r25
    158e:	80 6a       	ori	r24, 0xA0	; 160
    1590:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1594:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    1598:	88 31       	cpi	r24, 0x18	; 24
    159a:	11 f0       	breq	.+4      	; 0x15a0 <EEPROM_readByte+0x4a>
        return ERROR;
    159c:	1d 82       	std	Y+5, r1	; 0x05
    159e:	32 c0       	rjmp	.+100    	; 0x1604 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15a6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    15aa:	88 32       	cpi	r24, 0x28	; 40
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <EEPROM_readByte+0x5c>
        return ERROR;
    15ae:	1d 82       	std	Y+5, r1	; 0x05
    15b0:	29 c0       	rjmp	.+82     	; 0x1604 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    15b2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    15b6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    15ba:	80 31       	cpi	r24, 0x10	; 16
    15bc:	11 f0       	breq	.+4      	; 0x15c2 <EEPROM_readByte+0x6c>
        return ERROR;
    15be:	1d 82       	std	Y+5, r1	; 0x05
    15c0:	21 c0       	rjmp	.+66     	; 0x1604 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	80 70       	andi	r24, 0x00	; 0
    15c8:	97 70       	andi	r25, 0x07	; 7
    15ca:	88 0f       	add	r24, r24
    15cc:	89 2f       	mov	r24, r25
    15ce:	88 1f       	adc	r24, r24
    15d0:	99 0b       	sbc	r25, r25
    15d2:	91 95       	neg	r25
    15d4:	81 6a       	ori	r24, 0xA1	; 161
    15d6:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    15da:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    15de:	80 34       	cpi	r24, 0x40	; 64
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <EEPROM_readByte+0x90>
        return ERROR;
    15e2:	1d 82       	std	Y+5, r1	; 0x05
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    15e6:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <TWI_readByteWithNACK>
    15ea:	eb 81       	ldd	r30, Y+3	; 0x03
    15ec:	fc 81       	ldd	r31, Y+4	; 0x04
    15ee:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    15f0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    15f4:	88 35       	cpi	r24, 0x58	; 88
    15f6:	11 f0       	breq	.+4      	; 0x15fc <EEPROM_readByte+0xa6>
        return ERROR;
    15f8:	1d 82       	std	Y+5, r1	; 0x05
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    15fc:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <TWI_stop>

    return SUCCESS;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	8d 83       	std	Y+5, r24	; 0x05
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <GPIO_setupPinDirection+0x6>
    161c:	00 d0       	rcall	.+0      	; 0x161e <GPIO_setupPinDirection+0x8>
    161e:	0f 92       	push	r0
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	6a 83       	std	Y+2, r22	; 0x02
    1628:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	88 30       	cpi	r24, 0x08	; 8
    162e:	08 f0       	brcs	.+2      	; 0x1632 <GPIO_setupPinDirection+0x1c>
    1630:	d5 c0       	rjmp	.+426    	; 0x17dc <GPIO_setupPinDirection+0x1c6>
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	08 f0       	brcs	.+2      	; 0x163a <GPIO_setupPinDirection+0x24>
    1638:	d1 c0       	rjmp	.+418    	; 0x17dc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	3d 83       	std	Y+5, r19	; 0x05
    1642:	2c 83       	std	Y+4, r18	; 0x04
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	9d 81       	ldd	r25, Y+5	; 0x05
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 05       	cpc	r25, r1
    164c:	09 f4       	brne	.+2      	; 0x1650 <GPIO_setupPinDirection+0x3a>
    164e:	43 c0       	rjmp	.+134    	; 0x16d6 <GPIO_setupPinDirection+0xc0>
    1650:	2c 81       	ldd	r18, Y+4	; 0x04
    1652:	3d 81       	ldd	r19, Y+5	; 0x05
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	2c f4       	brge	.+10     	; 0x1664 <GPIO_setupPinDirection+0x4e>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	71 f0       	breq	.+28     	; 0x167e <GPIO_setupPinDirection+0x68>
    1662:	bc c0       	rjmp	.+376    	; 0x17dc <GPIO_setupPinDirection+0x1c6>
    1664:	2c 81       	ldd	r18, Y+4	; 0x04
    1666:	3d 81       	ldd	r19, Y+5	; 0x05
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <GPIO_setupPinDirection+0x5a>
    166e:	5f c0       	rjmp	.+190    	; 0x172e <GPIO_setupPinDirection+0x118>
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <GPIO_setupPinDirection+0x66>
    167a:	85 c0       	rjmp	.+266    	; 0x1786 <GPIO_setupPinDirection+0x170>
    167c:	af c0       	rjmp	.+350    	; 0x17dc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	a1 f4       	brne	.+40     	; 0x16ac <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1684:	aa e3       	ldi	r26, 0x3A	; 58
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	ea e3       	ldi	r30, 0x3A	; 58
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <GPIO_setupPinDirection+0x8c>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <GPIO_setupPinDirection+0x88>
    16a6:	84 2b       	or	r24, r20
    16a8:	8c 93       	st	X, r24
    16aa:	98 c0       	rjmp	.+304    	; 0x17dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16ac:	aa e3       	ldi	r26, 0x3A	; 58
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	ea e3       	ldi	r30, 0x3A	; 58
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <GPIO_setupPinDirection+0xb4>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <GPIO_setupPinDirection+0xb0>
    16ce:	80 95       	com	r24
    16d0:	84 23       	and	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	83 c0       	rjmp	.+262    	; 0x17dc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	a1 f4       	brne	.+40     	; 0x1704 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16dc:	a7 e3       	ldi	r26, 0x37	; 55
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e7 e3       	ldi	r30, 0x37	; 55
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <GPIO_setupPinDirection+0xe4>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <GPIO_setupPinDirection+0xe0>
    16fe:	84 2b       	or	r24, r20
    1700:	8c 93       	st	X, r24
    1702:	6c c0       	rjmp	.+216    	; 0x17dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1704:	a7 e3       	ldi	r26, 0x37	; 55
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e7 e3       	ldi	r30, 0x37	; 55
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <GPIO_setupPinDirection+0x10c>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <GPIO_setupPinDirection+0x108>
    1726:	80 95       	com	r24
    1728:	84 23       	and	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	57 c0       	rjmp	.+174    	; 0x17dc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	a1 f4       	brne	.+40     	; 0x175c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1734:	a4 e3       	ldi	r26, 0x34	; 52
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e4 e3       	ldi	r30, 0x34	; 52
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <GPIO_setupPinDirection+0x13c>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <GPIO_setupPinDirection+0x138>
    1756:	84 2b       	or	r24, r20
    1758:	8c 93       	st	X, r24
    175a:	40 c0       	rjmp	.+128    	; 0x17dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    175c:	a4 e3       	ldi	r26, 0x34	; 52
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e4 e3       	ldi	r30, 0x34	; 52
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <GPIO_setupPinDirection+0x164>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <GPIO_setupPinDirection+0x160>
    177e:	80 95       	com	r24
    1780:	84 23       	and	r24, r20
    1782:	8c 93       	st	X, r24
    1784:	2b c0       	rjmp	.+86     	; 0x17dc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	a1 f4       	brne	.+40     	; 0x17b4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    178c:	a1 e3       	ldi	r26, 0x31	; 49
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e1 e3       	ldi	r30, 0x31	; 49
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	48 2f       	mov	r20, r24
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <GPIO_setupPinDirection+0x194>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <GPIO_setupPinDirection+0x190>
    17ae:	84 2b       	or	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17b4:	a1 e3       	ldi	r26, 0x31	; 49
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e1 e3       	ldi	r30, 0x31	; 49
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <GPIO_setupPinDirection+0x1bc>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <GPIO_setupPinDirection+0x1b8>
    17d6:	80 95       	com	r24
    17d8:	84 23       	and	r24, r20
    17da:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <GPIO_writePin+0x6>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <GPIO_writePin+0x8>
    17f4:	0f 92       	push	r0
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	6a 83       	std	Y+2, r22	; 0x02
    17fe:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	88 30       	cpi	r24, 0x08	; 8
    1804:	08 f0       	brcs	.+2      	; 0x1808 <GPIO_writePin+0x1c>
    1806:	d5 c0       	rjmp	.+426    	; 0x19b2 <GPIO_writePin+0x1c6>
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	84 30       	cpi	r24, 0x04	; 4
    180c:	08 f0       	brcs	.+2      	; 0x1810 <GPIO_writePin+0x24>
    180e:	d1 c0       	rjmp	.+418    	; 0x19b2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	3d 83       	std	Y+5, r19	; 0x05
    1818:	2c 83       	std	Y+4, r18	; 0x04
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	91 05       	cpc	r25, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <GPIO_writePin+0x3a>
    1824:	43 c0       	rjmp	.+134    	; 0x18ac <GPIO_writePin+0xc0>
    1826:	2c 81       	ldd	r18, Y+4	; 0x04
    1828:	3d 81       	ldd	r19, Y+5	; 0x05
    182a:	22 30       	cpi	r18, 0x02	; 2
    182c:	31 05       	cpc	r19, r1
    182e:	2c f4       	brge	.+10     	; 0x183a <GPIO_writePin+0x4e>
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	71 f0       	breq	.+28     	; 0x1854 <GPIO_writePin+0x68>
    1838:	bc c0       	rjmp	.+376    	; 0x19b2 <GPIO_writePin+0x1c6>
    183a:	2c 81       	ldd	r18, Y+4	; 0x04
    183c:	3d 81       	ldd	r19, Y+5	; 0x05
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <GPIO_writePin+0x5a>
    1844:	5f c0       	rjmp	.+190    	; 0x1904 <GPIO_writePin+0x118>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	83 30       	cpi	r24, 0x03	; 3
    184c:	91 05       	cpc	r25, r1
    184e:	09 f4       	brne	.+2      	; 0x1852 <GPIO_writePin+0x66>
    1850:	85 c0       	rjmp	.+266    	; 0x195c <GPIO_writePin+0x170>
    1852:	af c0       	rjmp	.+350    	; 0x19b2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	a1 f4       	brne	.+40     	; 0x1882 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    185a:	ab e3       	ldi	r26, 0x3B	; 59
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	eb e3       	ldi	r30, 0x3B	; 59
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 2e       	mov	r0, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <GPIO_writePin+0x8c>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 94       	dec	r0
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <GPIO_writePin+0x88>
    187c:	84 2b       	or	r24, r20
    187e:	8c 93       	st	X, r24
    1880:	98 c0       	rjmp	.+304    	; 0x19b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1882:	ab e3       	ldi	r26, 0x3B	; 59
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	eb e3       	ldi	r30, 0x3B	; 59
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <GPIO_writePin+0xb4>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <GPIO_writePin+0xb0>
    18a4:	80 95       	com	r24
    18a6:	84 23       	and	r24, r20
    18a8:	8c 93       	st	X, r24
    18aa:	83 c0       	rjmp	.+262    	; 0x19b2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	a1 f4       	brne	.+40     	; 0x18da <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    18b2:	a8 e3       	ldi	r26, 0x38	; 56
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e8 e3       	ldi	r30, 0x38	; 56
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <GPIO_writePin+0xe4>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <GPIO_writePin+0xe0>
    18d4:	84 2b       	or	r24, r20
    18d6:	8c 93       	st	X, r24
    18d8:	6c c0       	rjmp	.+216    	; 0x19b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18da:	a8 e3       	ldi	r26, 0x38	; 56
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e8 e3       	ldi	r30, 0x38	; 56
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <GPIO_writePin+0x10c>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <GPIO_writePin+0x108>
    18fc:	80 95       	com	r24
    18fe:	84 23       	and	r24, r20
    1900:	8c 93       	st	X, r24
    1902:	57 c0       	rjmp	.+174    	; 0x19b2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	a1 f4       	brne	.+40     	; 0x1932 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    190a:	a5 e3       	ldi	r26, 0x35	; 53
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e5 e3       	ldi	r30, 0x35	; 53
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <GPIO_writePin+0x13c>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <GPIO_writePin+0x138>
    192c:	84 2b       	or	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	40 c0       	rjmp	.+128    	; 0x19b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1932:	a5 e3       	ldi	r26, 0x35	; 53
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e5 e3       	ldi	r30, 0x35	; 53
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <GPIO_writePin+0x164>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <GPIO_writePin+0x160>
    1954:	80 95       	com	r24
    1956:	84 23       	and	r24, r20
    1958:	8c 93       	st	X, r24
    195a:	2b c0       	rjmp	.+86     	; 0x19b2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	a1 f4       	brne	.+40     	; 0x198a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1962:	a2 e3       	ldi	r26, 0x32	; 50
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e2 e3       	ldi	r30, 0x32	; 50
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	48 2f       	mov	r20, r24
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <GPIO_writePin+0x194>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <GPIO_writePin+0x190>
    1984:	84 2b       	or	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    198a:	a2 e3       	ldi	r26, 0x32	; 50
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e2 e3       	ldi	r30, 0x32	; 50
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <GPIO_writePin+0x1bc>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <GPIO_writePin+0x1b8>
    19ac:	80 95       	com	r24
    19ae:	84 23       	and	r24, r20
    19b0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <GPIO_readPin+0x6>
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <GPIO_readPin+0x8>
    19ca:	0f 92       	push	r0
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	8a 83       	std	Y+2, r24	; 0x02
    19d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    19d4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	88 30       	cpi	r24, 0x08	; 8
    19da:	08 f0       	brcs	.+2      	; 0x19de <GPIO_readPin+0x1c>
    19dc:	84 c0       	rjmp	.+264    	; 0x1ae6 <GPIO_readPin+0x124>
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	84 30       	cpi	r24, 0x04	; 4
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <GPIO_readPin+0x24>
    19e4:	80 c0       	rjmp	.+256    	; 0x1ae6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	3d 83       	std	Y+5, r19	; 0x05
    19ee:	2c 83       	std	Y+4, r18	; 0x04
    19f0:	4c 81       	ldd	r20, Y+4	; 0x04
    19f2:	5d 81       	ldd	r21, Y+5	; 0x05
    19f4:	41 30       	cpi	r20, 0x01	; 1
    19f6:	51 05       	cpc	r21, r1
    19f8:	79 f1       	breq	.+94     	; 0x1a58 <GPIO_readPin+0x96>
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	9d 81       	ldd	r25, Y+5	; 0x05
    19fe:	82 30       	cpi	r24, 0x02	; 2
    1a00:	91 05       	cpc	r25, r1
    1a02:	34 f4       	brge	.+12     	; 0x1a10 <GPIO_readPin+0x4e>
    1a04:	2c 81       	ldd	r18, Y+4	; 0x04
    1a06:	3d 81       	ldd	r19, Y+5	; 0x05
    1a08:	21 15       	cp	r18, r1
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	69 f0       	breq	.+26     	; 0x1a28 <GPIO_readPin+0x66>
    1a0e:	6b c0       	rjmp	.+214    	; 0x1ae6 <GPIO_readPin+0x124>
    1a10:	4c 81       	ldd	r20, Y+4	; 0x04
    1a12:	5d 81       	ldd	r21, Y+5	; 0x05
    1a14:	42 30       	cpi	r20, 0x02	; 2
    1a16:	51 05       	cpc	r21, r1
    1a18:	b9 f1       	breq	.+110    	; 0x1a88 <GPIO_readPin+0xc6>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	91 05       	cpc	r25, r1
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <GPIO_readPin+0x64>
    1a24:	49 c0       	rjmp	.+146    	; 0x1ab8 <GPIO_readPin+0xf6>
    1a26:	5f c0       	rjmp	.+190    	; 0x1ae6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a28:	e9 e3       	ldi	r30, 0x39	; 57
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	a9 01       	movw	r20, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <GPIO_readPin+0x7e>
    1a3c:	55 95       	asr	r21
    1a3e:	47 95       	ror	r20
    1a40:	8a 95       	dec	r24
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <GPIO_readPin+0x7a>
    1a44:	ca 01       	movw	r24, r20
    1a46:	81 70       	andi	r24, 0x01	; 1
    1a48:	90 70       	andi	r25, 0x00	; 0
    1a4a:	88 23       	and	r24, r24
    1a4c:	19 f0       	breq	.+6      	; 0x1a54 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	49 c0       	rjmp	.+146    	; 0x1ae6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a54:	19 82       	std	Y+1, r1	; 0x01
    1a56:	47 c0       	rjmp	.+142    	; 0x1ae6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a58:	e6 e3       	ldi	r30, 0x36	; 54
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a9 01       	movw	r20, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <GPIO_readPin+0xae>
    1a6c:	55 95       	asr	r21
    1a6e:	47 95       	ror	r20
    1a70:	8a 95       	dec	r24
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <GPIO_readPin+0xaa>
    1a74:	ca 01       	movw	r24, r20
    1a76:	81 70       	andi	r24, 0x01	; 1
    1a78:	90 70       	andi	r25, 0x00	; 0
    1a7a:	88 23       	and	r24, r24
    1a7c:	19 f0       	breq	.+6      	; 0x1a84 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	31 c0       	rjmp	.+98     	; 0x1ae6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a84:	19 82       	std	Y+1, r1	; 0x01
    1a86:	2f c0       	rjmp	.+94     	; 0x1ae6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a88:	e3 e3       	ldi	r30, 0x33	; 51
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a9 01       	movw	r20, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <GPIO_readPin+0xde>
    1a9c:	55 95       	asr	r21
    1a9e:	47 95       	ror	r20
    1aa0:	8a 95       	dec	r24
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <GPIO_readPin+0xda>
    1aa4:	ca 01       	movw	r24, r20
    1aa6:	81 70       	andi	r24, 0x01	; 1
    1aa8:	90 70       	andi	r25, 0x00	; 0
    1aaa:	88 23       	and	r24, r24
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	19 c0       	rjmp	.+50     	; 0x1ae6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ab4:	19 82       	std	Y+1, r1	; 0x01
    1ab6:	17 c0       	rjmp	.+46     	; 0x1ae6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ab8:	e0 e3       	ldi	r30, 0x30	; 48
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a9 01       	movw	r20, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <GPIO_readPin+0x10e>
    1acc:	55 95       	asr	r21
    1ace:	47 95       	ror	r20
    1ad0:	8a 95       	dec	r24
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <GPIO_readPin+0x10a>
    1ad4:	ca 01       	movw	r24, r20
    1ad6:	81 70       	andi	r24, 0x01	; 1
    1ad8:	90 70       	andi	r25, 0x00	; 0
    1ada:	88 23       	and	r24, r24
    1adc:	19 f0       	breq	.+6      	; 0x1ae4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ae4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <GPIO_setupPortDirection+0x6>
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <GPIO_setupPortDirection+0x8>
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	84 30       	cpi	r24, 0x04	; 4
    1b0c:	90 f5       	brcc	.+100    	; 0x1b72 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	3c 83       	std	Y+4, r19	; 0x04
    1b16:	2b 83       	std	Y+3, r18	; 0x03
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	91 05       	cpc	r25, r1
    1b20:	d1 f0       	breq	.+52     	; 0x1b56 <GPIO_setupPortDirection+0x5e>
    1b22:	2b 81       	ldd	r18, Y+3	; 0x03
    1b24:	3c 81       	ldd	r19, Y+4	; 0x04
    1b26:	22 30       	cpi	r18, 0x02	; 2
    1b28:	31 05       	cpc	r19, r1
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <GPIO_setupPortDirection+0x3e>
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	61 f0       	breq	.+24     	; 0x1b4c <GPIO_setupPortDirection+0x54>
    1b34:	1e c0       	rjmp	.+60     	; 0x1b72 <GPIO_setupPortDirection+0x7a>
    1b36:	2b 81       	ldd	r18, Y+3	; 0x03
    1b38:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	81 f0       	breq	.+32     	; 0x1b60 <GPIO_setupPortDirection+0x68>
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	83 30       	cpi	r24, 0x03	; 3
    1b46:	91 05       	cpc	r25, r1
    1b48:	81 f0       	breq	.+32     	; 0x1b6a <GPIO_setupPortDirection+0x72>
    1b4a:	13 c0       	rjmp	.+38     	; 0x1b72 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b4c:	ea e3       	ldi	r30, 0x3A	; 58
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	80 83       	st	Z, r24
    1b54:	0e c0       	rjmp	.+28     	; 0x1b72 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b56:	e7 e3       	ldi	r30, 0x37	; 55
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	80 83       	st	Z, r24
    1b5e:	09 c0       	rjmp	.+18     	; 0x1b72 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b60:	e4 e3       	ldi	r30, 0x34	; 52
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	80 83       	st	Z, r24
    1b68:	04 c0       	rjmp	.+8      	; 0x1b72 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b6a:	e1 e3       	ldi	r30, 0x31	; 49
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <GPIO_writePort+0x6>
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <GPIO_writePort+0x8>
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	84 30       	cpi	r24, 0x04	; 4
    1b94:	90 f5       	brcc	.+100    	; 0x1bfa <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3c 83       	std	Y+4, r19	; 0x04
    1b9e:	2b 83       	std	Y+3, r18	; 0x03
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	d1 f0       	breq	.+52     	; 0x1bde <GPIO_writePort+0x5e>
    1baa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bac:	3c 81       	ldd	r19, Y+4	; 0x04
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <GPIO_writePort+0x3e>
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	61 f0       	breq	.+24     	; 0x1bd4 <GPIO_writePort+0x54>
    1bbc:	1e c0       	rjmp	.+60     	; 0x1bfa <GPIO_writePort+0x7a>
    1bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	81 f0       	breq	.+32     	; 0x1be8 <GPIO_writePort+0x68>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	91 05       	cpc	r25, r1
    1bd0:	81 f0       	breq	.+32     	; 0x1bf2 <GPIO_writePort+0x72>
    1bd2:	13 c0       	rjmp	.+38     	; 0x1bfa <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1bd4:	eb e3       	ldi	r30, 0x3B	; 59
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	80 83       	st	Z, r24
    1bdc:	0e c0       	rjmp	.+28     	; 0x1bfa <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1bde:	e8 e3       	ldi	r30, 0x38	; 56
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	80 83       	st	Z, r24
    1be6:	09 c0       	rjmp	.+18     	; 0x1bfa <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1be8:	e5 e3       	ldi	r30, 0x35	; 53
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	80 83       	st	Z, r24
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1bf2:	e2 e3       	ldi	r30, 0x32	; 50
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <GPIO_readPort+0x6>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <GPIO_readPort+0x8>
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c16:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	84 30       	cpi	r24, 0x04	; 4
    1c1c:	90 f5       	brcc	.+100    	; 0x1c82 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3c 83       	std	Y+4, r19	; 0x04
    1c26:	2b 83       	std	Y+3, r18	; 0x03
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	91 05       	cpc	r25, r1
    1c30:	d1 f0       	breq	.+52     	; 0x1c66 <GPIO_readPort+0x5e>
    1c32:	2b 81       	ldd	r18, Y+3	; 0x03
    1c34:	3c 81       	ldd	r19, Y+4	; 0x04
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <GPIO_readPort+0x3e>
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	61 f0       	breq	.+24     	; 0x1c5c <GPIO_readPort+0x54>
    1c44:	1e c0       	rjmp	.+60     	; 0x1c82 <GPIO_readPort+0x7a>
    1c46:	2b 81       	ldd	r18, Y+3	; 0x03
    1c48:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4a:	22 30       	cpi	r18, 0x02	; 2
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	81 f0       	breq	.+32     	; 0x1c70 <GPIO_readPort+0x68>
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	83 30       	cpi	r24, 0x03	; 3
    1c56:	91 05       	cpc	r25, r1
    1c58:	81 f0       	breq	.+32     	; 0x1c7a <GPIO_readPort+0x72>
    1c5a:	13 c0       	rjmp	.+38     	; 0x1c82 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c5c:	e9 e3       	ldi	r30, 0x39	; 57
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	0e c0       	rjmp	.+28     	; 0x1c82 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c66:	e6 e3       	ldi	r30, 0x36	; 54
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c70:	e3 e3       	ldi	r30, 0x33	; 51
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c7a:	e0 e3       	ldi	r30, 0x30	; 48
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <main>:
 *  Created on: Oct 23, 2023
 *      Author: Mina
 */
#include"MC_ctrl.h"

int main(void){
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62

	START_init(); //start initialization of components
    1c9a:	0e 94 27 07 	call	0xe4e	; 0xe4e <START_init>

	receive_pass();  // receive first pass and save it
    1c9e:	0e 94 98 07 	call	0xf30	; 0xf30 <receive_pass>

	while(1)
	{
		main_options(); //for main option set menu
    1ca2:	0e 94 c8 09 	call	0x1390	; 0x1390 <main_options>
    1ca6:	fd cf       	rjmp	.-6      	; 0x1ca2 <main+0x10>

00001ca8 <PWM_Timer0_start>:
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */

void PWM_Timer0_start(uint8 duty_cycle_percentage)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <PWM_Timer0_start+0x6>
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 duty_cycle; // to make it easy to use
	duty_cycle=(uint8)((((float32)duty_cycle_percentage)/100)*255);
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e0       	ldi	r26, 0x00	; 0
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	48 ec       	ldi	r20, 0xC8	; 200
    1cd4:	52 e4       	ldi	r21, 0x42	; 66
    1cd6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4f e7       	ldi	r20, 0x7F	; 127
    1ce8:	53 e4       	ldi	r21, 0x43	; 67
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
    1d00:	e2 e5       	ldi	r30, 0x52	; 82
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	10 82       	st	Z, r1
	OCR0  = duty_cycle; // Set Compare Value
    1d06:	ec e5       	ldi	r30, 0x5C	; 92
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	80 83       	st	Z, r24
	GPIO_setupPinDirection(MOTOR_PORT_E1,MOTOR_PIN_E1,PIN_OUTPUT);  //set OC0 as output pin
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	63 e0       	ldi	r22, 0x03	; 3
    1d12:	41 e0       	ldi	r20, 0x01	; 1
    1d14:	0e 94 0b 0b 	call	0x1616	; 0x1616 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1d18:	e3 e5       	ldi	r30, 0x53	; 83
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	8a e6       	ldi	r24, 0x6A	; 106
    1d1e:	80 83       	st	Z, r24
}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    1d2a:	1f 92       	push	r1
    1d2c:	0f 92       	push	r0
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	0f 92       	push	r0
    1d32:	11 24       	eor	r1, r1
    1d34:	2f 93       	push	r18
    1d36:	3f 93       	push	r19
    1d38:	4f 93       	push	r20
    1d3a:	5f 93       	push	r21
    1d3c:	6f 93       	push	r22
    1d3e:	7f 93       	push	r23
    1d40:	8f 93       	push	r24
    1d42:	9f 93       	push	r25
    1d44:	af 93       	push	r26
    1d46:	bf 93       	push	r27
    1d48:	ef 93       	push	r30
    1d4a:	ff 93       	push	r31
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1d54:	80 91 7b 01 	lds	r24, 0x017B
    1d58:	90 91 7c 01 	lds	r25, 0x017C
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	29 f0       	breq	.+10     	; 0x1d6a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1d60:	e0 91 7b 01 	lds	r30, 0x017B
    1d64:	f0 91 7c 01 	lds	r31, 0x017C
    1d68:	09 95       	icall
	}
}
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	ff 91       	pop	r31
    1d70:	ef 91       	pop	r30
    1d72:	bf 91       	pop	r27
    1d74:	af 91       	pop	r26
    1d76:	9f 91       	pop	r25
    1d78:	8f 91       	pop	r24
    1d7a:	7f 91       	pop	r23
    1d7c:	6f 91       	pop	r22
    1d7e:	5f 91       	pop	r21
    1d80:	4f 91       	pop	r20
    1d82:	3f 91       	pop	r19
    1d84:	2f 91       	pop	r18
    1d86:	0f 90       	pop	r0
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	0f 90       	pop	r0
    1d8c:	1f 90       	pop	r1
    1d8e:	18 95       	reti

00001d90 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    1d90:	1f 92       	push	r1
    1d92:	0f 92       	push	r0
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	0f 92       	push	r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	2f 93       	push	r18
    1d9c:	3f 93       	push	r19
    1d9e:	4f 93       	push	r20
    1da0:	5f 93       	push	r21
    1da2:	6f 93       	push	r22
    1da4:	7f 93       	push	r23
    1da6:	8f 93       	push	r24
    1da8:	9f 93       	push	r25
    1daa:	af 93       	push	r26
    1dac:	bf 93       	push	r27
    1dae:	ef 93       	push	r30
    1db0:	ff 93       	push	r31
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1dba:	80 91 7b 01 	lds	r24, 0x017B
    1dbe:	90 91 7c 01 	lds	r25, 0x017C
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	29 f0       	breq	.+10     	; 0x1dd0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1dc6:	e0 91 7b 01 	lds	r30, 0x017B
    1dca:	f0 91 7c 01 	lds	r31, 0x017C
    1dce:	09 95       	icall
	}
}
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	ff 91       	pop	r31
    1dd6:	ef 91       	pop	r30
    1dd8:	bf 91       	pop	r27
    1dda:	af 91       	pop	r26
    1ddc:	9f 91       	pop	r25
    1dde:	8f 91       	pop	r24
    1de0:	7f 91       	pop	r23
    1de2:	6f 91       	pop	r22
    1de4:	5f 91       	pop	r21
    1de6:	4f 91       	pop	r20
    1de8:	3f 91       	pop	r19
    1dea:	2f 91       	pop	r18
    1dec:	0f 90       	pop	r0
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	0f 90       	pop	r0
    1df2:	1f 90       	pop	r1
    1df4:	18 95       	reti

00001df6 <TIMER1_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER1_init(const Timer1_ConfigType * Config_Ptr)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <TIMER1_init+0x6>
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
	 * For TCCR1A register : -
	 * non-pwm mode so FOC1A and FOC2A = 1
	 * in case of compare and normal mode , WGM11 & WGM10 & WGM13 = 0
	 * but only WGM12 = 1 in case of compare and equal to 0 in case of normal mode
	 */
	TCCR1A = ( 1 << FOC1A ) | ( 1 << FOC1B );
    1e04:	ef e4       	ldi	r30, 0x4F	; 79
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	8c e0       	ldi	r24, 0x0C	; 12
    1e0a:	80 83       	st	Z, r24
	/*
	 * For TCCR1B register : -
	 * WGM12 = 1 -> Compare mode or 0 -> Normal mode
	 * CS12 : CS10 = prescaler value
	 */
	TCCR1B = ( Config_Ptr ->prescaler ) | ( ( Config_Ptr ->mode ) << WGM12 );
    1e0c:	ae e4       	ldi	r26, 0x4E	; 78
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e9 81       	ldd	r30, Y+1	; 0x01
    1e12:	fa 81       	ldd	r31, Y+2	; 0x02
    1e14:	84 81       	ldd	r24, Z+4	; 0x04
    1e16:	28 2f       	mov	r18, r24
    1e18:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1c:	85 81       	ldd	r24, Z+5	; 0x05
    1e1e:	88 2f       	mov	r24, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	82 2b       	or	r24, r18
    1e30:	8c 93       	st	X, r24

	TCNT1 =Config_Ptr->initial_value;		/* Set timer1 initial value */
    1e32:	ac e4       	ldi	r26, 0x4C	; 76
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e9 81       	ldd	r30, Y+1	; 0x01
    1e38:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	11 96       	adiw	r26, 0x01	; 1
    1e40:	9c 93       	st	X, r25
    1e42:	8e 93       	st	-X, r24

	if(Config_Ptr->mode==NORMAL)
    1e44:	e9 81       	ldd	r30, Y+1	; 0x01
    1e46:	fa 81       	ldd	r31, Y+2	; 0x02
    1e48:	85 81       	ldd	r24, Z+5	; 0x05
    1e4a:	88 23       	and	r24, r24
    1e4c:	79 f4       	brne	.+30     	; 0x1e6c <TIMER1_init+0x76>
	{
		TCCR1B&=~(1<<WGM12);
    1e4e:	ae e4       	ldi	r26, 0x4E	; 78
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	ee e4       	ldi	r30, 0x4E	; 78
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	87 7f       	andi	r24, 0xF7	; 247
    1e5a:	8c 93       	st	X, r24
		TIMSK|=(1<<TOIE1);//Overflow Interrupt Enable
    1e5c:	a9 e5       	ldi	r26, 0x59	; 89
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e9 e5       	ldi	r30, 0x59	; 89
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	84 60       	ori	r24, 0x04	; 4
    1e68:	8c 93       	st	X, r24
    1e6a:	1c c0       	rjmp	.+56     	; 0x1ea4 <TIMER1_init+0xae>

	}
	else if(Config_Ptr->mode==COMPARE)
    1e6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e70:	85 81       	ldd	r24, Z+5	; 0x05
    1e72:	81 30       	cpi	r24, 0x01	; 1
    1e74:	b9 f4       	brne	.+46     	; 0x1ea4 <TIMER1_init+0xae>
	{
		TCCR1B|=(1<<WGM12);
    1e76:	ae e4       	ldi	r26, 0x4E	; 78
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	ee e4       	ldi	r30, 0x4E	; 78
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 60       	ori	r24, 0x08	; 8
    1e82:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;    /* Set timer1 compare value */
    1e84:	aa e4       	ldi	r26, 0x4A	; 74
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	11 96       	adiw	r26, 0x01	; 1
    1e92:	9c 93       	st	X, r25
    1e94:	8e 93       	st	-X, r24
		TIMSK |= (1 << OCIE1A); //Output Compare A Match Interrupt Enable
    1e96:	a9 e5       	ldi	r26, 0x59	; 89
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e9 e5       	ldi	r30, 0x59	; 89
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	80 61       	ori	r24, 0x10	; 16
    1ea2:	8c 93       	st	X, r24
	}
}
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <TIMER1_deInit>:
void TIMER1_deInit(void){
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
	/* clear all registers */
	TCCR1A = 0;
    1eb6:	ef e4       	ldi	r30, 0x4F	; 79
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	10 82       	st	Z, r1
	TCCR1B = 0;
    1ebc:	ee e4       	ldi	r30, 0x4E	; 78
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	10 82       	st	Z, r1
	TIMSK = 0;
    1ec2:	e9 e5       	ldi	r30, 0x59	; 89
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	10 82       	st	Z, r1
	TCNT1 = 0;
    1ec8:	ec e4       	ldi	r30, 0x4C	; 76
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	11 82       	std	Z+1, r1	; 0x01
    1ece:	10 82       	st	Z, r1
	OCR1A = 0;
    1ed0:	ea e4       	ldi	r30, 0x4A	; 74
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	11 82       	std	Z+1, r1	; 0x01
    1ed6:	10 82       	st	Z, r1
}
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <TIMER1_setCallBack>:

void TIMER1_setCallBack(void(*a_ptr)(void))
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <TIMER1_setCallBack+0x6>
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	9a 83       	std	Y+2, r25	; 0x02
    1eea:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	90 93 7c 01 	sts	0x017C, r25
    1ef4:	80 93 7b 01 	sts	0x017B, r24
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <TWI_init+0x6>
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    1f10:	a0 e2       	ldi	r26, 0x20	; 32
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e9 81       	ldd	r30, Y+1	; 0x01
    1f16:	fa 81       	ldd	r31, Y+2	; 0x02
    1f18:	81 81       	ldd	r24, Z+1	; 0x01
    1f1a:	8c 93       	st	X, r24
	TWSR = Config_Ptr->prescaler;
    1f1c:	a1 e2       	ldi	r26, 0x21	; 33
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e9 81       	ldd	r30, Y+1	; 0x01
    1f22:	fa 81       	ldd	r31, Y+2	; 0x02
    1f24:	82 81       	ldd	r24, Z+2	; 0x02
    1f26:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    1f28:	a2 e2       	ldi	r26, 0x22	; 34
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f30:	80 81       	ld	r24, Z
    1f32:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1f34:	e6 e5       	ldi	r30, 0x56	; 86
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	84 e0       	ldi	r24, 0x04	; 4
    1f3a:	80 83       	st	Z, r24
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <TWI_start>:

void TWI_start(void)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1f4e:	e6 e5       	ldi	r30, 0x56	; 86
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	84 ea       	ldi	r24, 0xA4	; 164
    1f54:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f56:	e6 e5       	ldi	r30, 0x56	; 86
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	88 23       	and	r24, r24
    1f5e:	dc f7       	brge	.-10     	; 0x1f56 <TWI_start+0x10>
}
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <TWI_stop>:

void TWI_stop(void)
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1f6e:	e6 e5       	ldi	r30, 0x56	; 86
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	84 e9       	ldi	r24, 0x94	; 148
    1f74:	80 83       	st	Z, r24
}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	0f 92       	push	r0
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1f88:	e3 e2       	ldi	r30, 0x23	; 35
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1f90:	e6 e5       	ldi	r30, 0x56	; 86
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	84 e8       	ldi	r24, 0x84	; 132
    1f96:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f98:	e6 e5       	ldi	r30, 0x56	; 86
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 23       	and	r24, r24
    1fa0:	dc f7       	brge	.-10     	; 0x1f98 <TWI_writeByte+0x1c>
}
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1fb2:	e6 e5       	ldi	r30, 0x56	; 86
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	84 ec       	ldi	r24, 0xC4	; 196
    1fb8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fba:	e6 e5       	ldi	r30, 0x56	; 86
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	88 23       	and	r24, r24
    1fc2:	dc f7       	brge	.-10     	; 0x1fba <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1fc4:	e3 e2       	ldi	r30, 0x23	; 35
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
}
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1fd8:	e6 e5       	ldi	r30, 0x56	; 86
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	84 e8       	ldi	r24, 0x84	; 132
    1fde:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fe0:	e6 e5       	ldi	r30, 0x56	; 86
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	88 23       	and	r24, r24
    1fe8:	dc f7       	brge	.-10     	; 0x1fe0 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1fea:	e3 e2       	ldi	r30, 0x23	; 35
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
}
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	0f 92       	push	r0
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2000:	e1 e2       	ldi	r30, 0x21	; 33
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	88 7f       	andi	r24, 0xF8	; 248
    2008:	89 83       	std	Y+1, r24	; 0x01
    return status;
    200a:	89 81       	ldd	r24, Y+1	; 0x01
}
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	00 d0       	rcall	.+0      	; 0x201a <UART_init+0x6>
    201a:	00 d0       	rcall	.+0      	; 0x201c <UART_init+0x8>
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	9c 83       	std	Y+4, r25	; 0x04
    2022:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2024:	1a 82       	std	Y+2, r1	; 0x02
    2026:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2028:	eb e2       	ldi	r30, 0x2B	; 43
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2030:	ea e2       	ldi	r30, 0x2A	; 42
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	88 e1       	ldi	r24, 0x18	; 24
    2036:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC =(1<<URSEL)|((Config_Ptr->parity_bit)<<4)|((Config_Ptr->stop_bit)<<3)|((Config_Ptr->character_size)<<1);
    2038:	a0 e4       	ldi	r26, 0x40	; 64
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	eb 81       	ldd	r30, Y+3	; 0x03
    203e:	fc 81       	ldd	r31, Y+4	; 0x04
    2040:	80 81       	ld	r24, Z
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	82 95       	swap	r24
    2048:	92 95       	swap	r25
    204a:	90 7f       	andi	r25, 0xF0	; 240
    204c:	98 27       	eor	r25, r24
    204e:	80 7f       	andi	r24, 0xF0	; 240
    2050:	98 27       	eor	r25, r24
    2052:	28 2f       	mov	r18, r24
    2054:	20 68       	ori	r18, 0x80	; 128
    2056:	eb 81       	ldd	r30, Y+3	; 0x03
    2058:	fc 81       	ldd	r31, Y+4	; 0x04
    205a:	81 81       	ldd	r24, Z+1	; 0x01
    205c:	88 2f       	mov	r24, r24
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	28 2b       	or	r18, r24
    206e:	eb 81       	ldd	r30, Y+3	; 0x03
    2070:	fc 81       	ldd	r31, Y+4	; 0x04
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	88 2f       	mov	r24, r24
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	82 2b       	or	r24, r18
    207e:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2080:	eb 81       	ldd	r30, Y+3	; 0x03
    2082:	fc 81       	ldd	r31, Y+4	; 0x04
    2084:	83 81       	ldd	r24, Z+3	; 0x03
    2086:	94 81       	ldd	r25, Z+4	; 0x04
    2088:	a5 81       	ldd	r26, Z+5	; 0x05
    208a:	b6 81       	ldd	r27, Z+6	; 0x06
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	aa 1f       	adc	r26, r26
    2092:	bb 1f       	adc	r27, r27
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	aa 1f       	adc	r26, r26
    209a:	bb 1f       	adc	r27, r27
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	aa 1f       	adc	r26, r26
    20a2:	bb 1f       	adc	r27, r27
    20a4:	9c 01       	movw	r18, r24
    20a6:	ad 01       	movw	r20, r26
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	92 e1       	ldi	r25, 0x12	; 18
    20ac:	aa e7       	ldi	r26, 0x7A	; 122
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 05 11 	call	0x220a	; 0x220a <__udivmodsi4>
    20b8:	da 01       	movw	r26, r20
    20ba:	c9 01       	movw	r24, r18
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    20c2:	e0 e4       	ldi	r30, 0x40	; 64
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	89 2f       	mov	r24, r25
    20cc:	99 27       	eor	r25, r25
    20ce:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    20d0:	e9 e2       	ldi	r30, 0x29	; 41
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	80 83       	st	Z, r24
}
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	0f 92       	push	r0
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    20f2:	eb e2       	ldi	r30, 0x2B	; 43
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	88 2f       	mov	r24, r24
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	80 72       	andi	r24, 0x20	; 32
    20fe:	90 70       	andi	r25, 0x00	; 0
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	b9 f3       	breq	.-18     	; 0x20f2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2104:	ec e2       	ldi	r30, 0x2C	; 44
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    211c:	eb e2       	ldi	r30, 0x2B	; 43
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	88 23       	and	r24, r24
    2124:	dc f7       	brge	.-10     	; 0x211c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2126:	ec e2       	ldi	r30, 0x2C	; 44
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
}
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <UART_sendString+0x6>
    2138:	0f 92       	push	r0
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	9b 83       	std	Y+3, r25	; 0x03
    2140:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2142:	19 82       	std	Y+1, r1	; 0x01
    2144:	0e c0       	rjmp	.+28     	; 0x2162 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	9b 81       	ldd	r25, Y+3	; 0x03
    2150:	fc 01       	movw	r30, r24
    2152:	e2 0f       	add	r30, r18
    2154:	f3 1f       	adc	r31, r19
    2156:	80 81       	ld	r24, Z
    2158:	0e 94 73 10 	call	0x20e6	; 0x20e6 <UART_sendByte>
		i++;
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	9b 81       	ldd	r25, Y+3	; 0x03
    216c:	fc 01       	movw	r30, r24
    216e:	e2 0f       	add	r30, r18
    2170:	f3 1f       	adc	r31, r19
    2172:	80 81       	ld	r24, Z
    2174:	88 23       	and	r24, r24
    2176:	39 f7       	brne	.-50     	; 0x2146 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <UART_receiveString+0xa>
    218e:	0f 92       	push	r0
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	9b 83       	std	Y+3, r25	; 0x03
    2196:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2198:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	9b 81       	ldd	r25, Y+3	; 0x03
    21a4:	8c 01       	movw	r16, r24
    21a6:	02 0f       	add	r16, r18
    21a8:	13 1f       	adc	r17, r19
    21aa:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
    21ae:	f8 01       	movw	r30, r16
    21b0:	80 83       	st	Z, r24
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	8f 5f       	subi	r24, 0xFF	; 255
    21b8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	9b 81       	ldd	r25, Y+3	; 0x03
    21c4:	8c 01       	movw	r16, r24
    21c6:	02 0f       	add	r16, r18
    21c8:	13 1f       	adc	r17, r19
    21ca:	0e 94 8a 10 	call	0x2114	; 0x2114 <UART_recieveByte>
    21ce:	f8 01       	movw	r30, r16
    21d0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	9b 81       	ldd	r25, Y+3	; 0x03
    21dc:	fc 01       	movw	r30, r24
    21de:	e2 0f       	add	r30, r18
    21e0:	f3 1f       	adc	r31, r19
    21e2:	80 81       	ld	r24, Z
    21e4:	83 32       	cpi	r24, 0x23	; 35
    21e6:	31 f7       	brne	.-52     	; 0x21b4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	9b 81       	ldd	r25, Y+3	; 0x03
    21f2:	fc 01       	movw	r30, r24
    21f4:	e2 0f       	add	r30, r18
    21f6:	f3 1f       	adc	r31, r19
    21f8:	10 82       	st	Z, r1
}
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	08 95       	ret

0000220a <__udivmodsi4>:
    220a:	a1 e2       	ldi	r26, 0x21	; 33
    220c:	1a 2e       	mov	r1, r26
    220e:	aa 1b       	sub	r26, r26
    2210:	bb 1b       	sub	r27, r27
    2212:	fd 01       	movw	r30, r26
    2214:	0d c0       	rjmp	.+26     	; 0x2230 <__udivmodsi4_ep>

00002216 <__udivmodsi4_loop>:
    2216:	aa 1f       	adc	r26, r26
    2218:	bb 1f       	adc	r27, r27
    221a:	ee 1f       	adc	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	a2 17       	cp	r26, r18
    2220:	b3 07       	cpc	r27, r19
    2222:	e4 07       	cpc	r30, r20
    2224:	f5 07       	cpc	r31, r21
    2226:	20 f0       	brcs	.+8      	; 0x2230 <__udivmodsi4_ep>
    2228:	a2 1b       	sub	r26, r18
    222a:	b3 0b       	sbc	r27, r19
    222c:	e4 0b       	sbc	r30, r20
    222e:	f5 0b       	sbc	r31, r21

00002230 <__udivmodsi4_ep>:
    2230:	66 1f       	adc	r22, r22
    2232:	77 1f       	adc	r23, r23
    2234:	88 1f       	adc	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	1a 94       	dec	r1
    223a:	69 f7       	brne	.-38     	; 0x2216 <__udivmodsi4_loop>
    223c:	60 95       	com	r22
    223e:	70 95       	com	r23
    2240:	80 95       	com	r24
    2242:	90 95       	com	r25
    2244:	9b 01       	movw	r18, r22
    2246:	ac 01       	movw	r20, r24
    2248:	bd 01       	movw	r22, r26
    224a:	cf 01       	movw	r24, r30
    224c:	08 95       	ret

0000224e <__prologue_saves__>:
    224e:	2f 92       	push	r2
    2250:	3f 92       	push	r3
    2252:	4f 92       	push	r4
    2254:	5f 92       	push	r5
    2256:	6f 92       	push	r6
    2258:	7f 92       	push	r7
    225a:	8f 92       	push	r8
    225c:	9f 92       	push	r9
    225e:	af 92       	push	r10
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	ca 1b       	sub	r28, r26
    2278:	db 0b       	sbc	r29, r27
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	09 94       	ijmp

00002286 <__epilogue_restores__>:
    2286:	2a 88       	ldd	r2, Y+18	; 0x12
    2288:	39 88       	ldd	r3, Y+17	; 0x11
    228a:	48 88       	ldd	r4, Y+16	; 0x10
    228c:	5f 84       	ldd	r5, Y+15	; 0x0f
    228e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2290:	7d 84       	ldd	r7, Y+13	; 0x0d
    2292:	8c 84       	ldd	r8, Y+12	; 0x0c
    2294:	9b 84       	ldd	r9, Y+11	; 0x0b
    2296:	aa 84       	ldd	r10, Y+10	; 0x0a
    2298:	b9 84       	ldd	r11, Y+9	; 0x09
    229a:	c8 84       	ldd	r12, Y+8	; 0x08
    229c:	df 80       	ldd	r13, Y+7	; 0x07
    229e:	ee 80       	ldd	r14, Y+6	; 0x06
    22a0:	fd 80       	ldd	r15, Y+5	; 0x05
    22a2:	0c 81       	ldd	r16, Y+4	; 0x04
    22a4:	1b 81       	ldd	r17, Y+3	; 0x03
    22a6:	aa 81       	ldd	r26, Y+2	; 0x02
    22a8:	b9 81       	ldd	r27, Y+1	; 0x01
    22aa:	ce 0f       	add	r28, r30
    22ac:	d1 1d       	adc	r29, r1
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	ed 01       	movw	r28, r26
    22ba:	08 95       	ret

000022bc <_exit>:
    22bc:	f8 94       	cli

000022be <__stop_program>:
    22be:	ff cf       	rjmp	.-2      	; 0x22be <__stop_program>
