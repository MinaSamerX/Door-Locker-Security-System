
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  00003222  000032b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800156  00800156  000033ac  2**0
                  ALLOC
  3 .stab         00002ff4  00000000  00000000  000033ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011ef  00000000  00000000  000063a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000758f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000076cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000783f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a373  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b120  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b280  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b50d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bcdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 35       	cpi	r26, 0x5D	; 93
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <main>
      8a:	0c 94 0f 19 	jmp	0x321e	; 0x321e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e4       	ldi	r26, 0x40	; 64
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 18 	jmp	0x315e	; 0x315e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e4       	ldi	r24, 0x40	; 64
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 18 	jmp	0x315e	; 0x315e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Calculate_time>:
static Timer1_ConfigType Timer_Config = {0,7813,N_1024,COMPARE};
/*******************************************************************************
 *                       FUNCTION FOR ISR                                      *
 *******************************************************************************/
void Calculate_time(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick ++;  //increment every one sec
     b4e:	80 91 57 01 	lds	r24, 0x0157
     b52:	90 91 58 01 	lds	r25, 0x0158
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 58 01 	sts	0x0158, r25
     b5c:	80 93 57 01 	sts	0x0157, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <START_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void START_init(void){
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	6a 97       	sbiw	r28, 0x1a	; 26
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType UART_Configurations = {DISABLED,ONE_BIT,EIGHT_BIT,9600};  //uart config
     b7a:	ce 01       	movw	r24, r28
     b7c:	0f 96       	adiw	r24, 0x0f	; 15
     b7e:	9f 8b       	std	Y+23, r25	; 0x17
     b80:	8e 8b       	std	Y+22, r24	; 0x16
     b82:	ef e4       	ldi	r30, 0x4F	; 79
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	f9 8f       	std	Y+25, r31	; 0x19
     b88:	e8 8f       	std	Y+24, r30	; 0x18
     b8a:	f7 e0       	ldi	r31, 0x07	; 7
     b8c:	fa 8f       	std	Y+26, r31	; 0x1a
     b8e:	e8 8d       	ldd	r30, Y+24	; 0x18
     b90:	f9 8d       	ldd	r31, Y+25	; 0x19
     b92:	00 80       	ld	r0, Z
     b94:	88 8d       	ldd	r24, Y+24	; 0x18
     b96:	99 8d       	ldd	r25, Y+25	; 0x19
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	99 8f       	std	Y+25, r25	; 0x19
     b9c:	88 8f       	std	Y+24, r24	; 0x18
     b9e:	ee 89       	ldd	r30, Y+22	; 0x16
     ba0:	ff 89       	ldd	r31, Y+23	; 0x17
     ba2:	00 82       	st	Z, r0
     ba4:	8e 89       	ldd	r24, Y+22	; 0x16
     ba6:	9f 89       	ldd	r25, Y+23	; 0x17
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	9f 8b       	std	Y+23, r25	; 0x17
     bac:	8e 8b       	std	Y+22, r24	; 0x16
     bae:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bb0:	91 50       	subi	r25, 0x01	; 1
     bb2:	9a 8f       	std	Y+26, r25	; 0x1a
     bb4:	ea 8d       	ldd	r30, Y+26	; 0x1a
     bb6:	ee 23       	and	r30, r30
     bb8:	51 f7       	brne	.-44     	; 0xb8e <START_init+0x28>


	SREG|=(1<<7);      //enable interrupt bit
     bba:	af e5       	ldi	r26, 0x5F	; 95
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ef e5       	ldi	r30, 0x5F	; 95
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	8c 93       	st	X, r24

	LCD_init();   //lcd initialization
     bc8:	0e 94 17 11 	call	0x222e	; 0x222e <LCD_init>
	UART_init(&UART_Configurations);   // uart initialization
     bcc:	ce 01       	movw	r24, r28
     bce:	0f 96       	adiw	r24, 0x0f	; 15
     bd0:	0e 94 76 17 	call	0x2eec	; 0x2eec <UART_init>
	TIMER1_setCallBack(Calculate_time);  // isr timer 1 function
     bd4:	83 ea       	ldi	r24, 0xA3	; 163
     bd6:	95 e0       	ldi	r25, 0x05	; 5
     bd8:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <TIMER1_setCallBack>

	UART_sendByte(M1_READY);   //telling mcu2 that mcu1 is ready
     bdc:	80 e1       	ldi	r24, 0x10	; 16
     bde:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <UART_sendByte>
	while(UART_recieveByte()!= M2_READY);  //waiting mcu2 to respond that is he his ready
     be2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <UART_recieveByte>
     be6:	80 32       	cpi	r24, 0x20	; 32
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <START_init+0x7c>
	LCD_displayStringRowColumn(0,5,"Welcome");
     bea:	20 e6       	ldi	r18, 0x60	; 96
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	65 e0       	ldi	r22, 0x05	; 5
     bf2:	a9 01       	movw	r20, r18
     bf4:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,3,"Ready to go");
     bf8:	28 e6       	ldi	r18, 0x68	; 104
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	63 e0       	ldi	r22, 0x03	; 3
     c00:	a9 01       	movw	r20, r18
     c02:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	aa ef       	ldi	r26, 0xFA	; 250
     c0c:	b3 e4       	ldi	r27, 0x43	; 67
     c0e:	8b 87       	std	Y+11, r24	; 0x0b
     c10:	9c 87       	std	Y+12, r25	; 0x0c
     c12:	ad 87       	std	Y+13, r26	; 0x0d
     c14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c16:	6b 85       	ldd	r22, Y+11	; 0x0b
     c18:	7c 85       	ldd	r23, Y+12	; 0x0c
     c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	4a ef       	ldi	r20, 0xFA	; 250
     c24:	54 e4       	ldi	r21, 0x44	; 68
     c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	8f 83       	std	Y+7, r24	; 0x07
     c30:	98 87       	std	Y+8, r25	; 0x08
     c32:	a9 87       	std	Y+9, r26	; 0x09
     c34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c36:	6f 81       	ldd	r22, Y+7	; 0x07
     c38:	78 85       	ldd	r23, Y+8	; 0x08
     c3a:	89 85       	ldd	r24, Y+9	; 0x09
     c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e8       	ldi	r20, 0x80	; 128
     c44:	5f e3       	ldi	r21, 0x3F	; 63
     c46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c4a:	88 23       	and	r24, r24
     c4c:	2c f4       	brge	.+10     	; 0xc58 <START_init+0xf2>
		__ticks = 1;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	3f c0       	rjmp	.+126    	; 0xcd6 <START_init+0x170>
	else if (__tmp > 65535)
     c58:	6f 81       	ldd	r22, Y+7	; 0x07
     c5a:	78 85       	ldd	r23, Y+8	; 0x08
     c5c:	89 85       	ldd	r24, Y+9	; 0x09
     c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	3f ef       	ldi	r19, 0xFF	; 255
     c64:	4f e7       	ldi	r20, 0x7F	; 127
     c66:	57 e4       	ldi	r21, 0x47	; 71
     c68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c6c:	18 16       	cp	r1, r24
     c6e:	4c f5       	brge	.+82     	; 0xcc2 <START_init+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c70:	6b 85       	ldd	r22, Y+11	; 0x0b
     c72:	7c 85       	ldd	r23, Y+12	; 0x0c
     c74:	8d 85       	ldd	r24, Y+13	; 0x0d
     c76:	9e 85       	ldd	r25, Y+14	; 0x0e
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e2       	ldi	r20, 0x20	; 32
     c7e:	51 e4       	ldi	r21, 0x41	; 65
     c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	bc 01       	movw	r22, r24
     c8a:	cd 01       	movw	r24, r26
     c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	9e 83       	std	Y+6, r25	; 0x06
     c96:	8d 83       	std	Y+5, r24	; 0x05
     c98:	0f c0       	rjmp	.+30     	; 0xcb8 <START_init+0x152>
     c9a:	88 ec       	ldi	r24, 0xC8	; 200
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	9c 83       	std	Y+4, r25	; 0x04
     ca0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	9c 81       	ldd	r25, Y+4	; 0x04
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <START_init+0x140>
     caa:	9c 83       	std	Y+4, r25	; 0x04
     cac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cae:	8d 81       	ldd	r24, Y+5	; 0x05
     cb0:	9e 81       	ldd	r25, Y+6	; 0x06
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	9e 83       	std	Y+6, r25	; 0x06
     cb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb8:	8d 81       	ldd	r24, Y+5	; 0x05
     cba:	9e 81       	ldd	r25, Y+6	; 0x06
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	69 f7       	brne	.-38     	; 0xc9a <START_init+0x134>
     cc0:	14 c0       	rjmp	.+40     	; 0xcea <START_init+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc2:	6f 81       	ldd	r22, Y+7	; 0x07
     cc4:	78 85       	ldd	r23, Y+8	; 0x08
     cc6:	89 85       	ldd	r24, Y+9	; 0x09
     cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	9e 83       	std	Y+6, r25	; 0x06
     cd4:	8d 83       	std	Y+5, r24	; 0x05
     cd6:	8d 81       	ldd	r24, Y+5	; 0x05
     cd8:	9e 81       	ldd	r25, Y+6	; 0x06
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	89 83       	std	Y+1, r24	; 0x01
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	9a 81       	ldd	r25, Y+2	; 0x02
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <START_init+0x17c>
     ce6:	9a 83       	std	Y+2, r25	; 0x02
     ce8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms((2*D));
	LCD_clearScreen();
     cea:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
	LCD_displayString("PLZ enter pass:");
     cee:	84 e7       	ldi	r24, 0x74	; 116
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayString>
}
     cf6:	6a 96       	adiw	r28, 0x1a	; 26
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <send_pass>:

void send_pass(uint16 *pass){  //sending pass to mcu2
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <send_pass+0x6>
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	9b 83       	std	Y+3, r25	; 0x03
     d16:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     d18:	19 82       	std	Y+1, r1	; 0x01
	UART_sendByte(SAVE);
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <UART_sendByte>
	while(UART_recieveByte() != M2_READY){}
     d20:	0e 94 f6 17 	call	0x2fec	; 0x2fec <UART_recieveByte>
     d24:	80 32       	cpi	r24, 0x20	; 32
     d26:	e1 f7       	brne	.-8      	; 0xd20 <send_pass+0x18>
	UART_sendByte(counter);
     d28:	80 91 56 01 	lds	r24, 0x0156
     d2c:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <UART_sendByte>
     d30:	16 c0       	rjmp	.+44     	; 0xd5e <send_pass+0x56>
	while(i<(counter)){
		while(UART_recieveByte() != M2_READY){}
     d32:	0e 94 f6 17 	call	0x2fec	; 0x2fec <UART_recieveByte>
     d36:	80 32       	cpi	r24, 0x20	; 32
     d38:	e1 f7       	brne	.-8      	; 0xd32 <send_pass+0x2a>
		UART_sendByte(pass[i]);
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	9c 01       	movw	r18, r24
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	9b 81       	ldd	r25, Y+3	; 0x03
     d4a:	fc 01       	movw	r30, r24
     d4c:	e2 0f       	add	r30, r18
     d4e:	f3 1f       	adc	r31, r19
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <UART_sendByte>
		i++;
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	8f 5f       	subi	r24, 0xFF	; 255
     d5c:	89 83       	std	Y+1, r24	; 0x01
void send_pass(uint16 *pass){  //sending pass to mcu2
	uint8 i=0;
	UART_sendByte(SAVE);
	while(UART_recieveByte() != M2_READY){}
	UART_sendByte(counter);
	while(i<(counter)){
     d5e:	90 91 56 01 	lds	r25, 0x0156
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	89 17       	cp	r24, r25
     d66:	28 f3       	brcs	.-54     	; 0xd32 <send_pass+0x2a>
		while(UART_recieveByte() != M2_READY){}
		UART_sendByte(pass[i]);
		i++;
	}
	while(UART_recieveByte()!= END_SAVING);
     d68:	0e 94 f6 17 	call	0x2fec	; 0x2fec <UART_recieveByte>
     d6c:	83 30       	cpi	r24, 0x03	; 3
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <send_pass+0x60>
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <enter_pass>:
void enter_pass(uint16 *pass){  //entring pass to system
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	a0 97       	sbiw	r28, 0x20	; 32
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	98 a3       	std	Y+32, r25	; 0x20
     d96:	8f 8f       	std	Y+31, r24	; 0x1f
	counter=0;
     d98:	10 92 56 01 	sts	0x0156, r1
	uint8 key=KEYPAD_getPressedKey();
     d9c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <KEYPAD_getPressedKey>
     da0:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i=0;
     da2:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_moveCursor(1,0);
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_moveCursor>
     dac:	13 c1       	rjmp	.+550    	; 0xfd4 <enter_pass+0x258>
	while((key!=' ')){
		pass[i]=KEYPAD_getPressedKey();
     dae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db0:	88 2f       	mov	r24, r24
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9c 01       	movw	r18, r24
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dbc:	98 a1       	ldd	r25, Y+32	; 0x20
     dbe:	8c 01       	movw	r16, r24
     dc0:	02 0f       	add	r16, r18
     dc2:	13 1f       	adc	r17, r19
     dc4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <KEYPAD_getPressedKey>
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	f8 01       	movw	r30, r16
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	80 83       	st	Z, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	aa e7       	ldi	r26, 0x7A	; 122
     dd8:	b3 e4       	ldi	r27, 0x43	; 67
     dda:	89 8f       	std	Y+25, r24	; 0x19
     ddc:	9a 8f       	std	Y+26, r25	; 0x1a
     dde:	ab 8f       	std	Y+27, r26	; 0x1b
     de0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	69 8d       	ldd	r22, Y+25	; 0x19
     de4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     de6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     de8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8d 8b       	std	Y+21, r24	; 0x15
     dfc:	9e 8b       	std	Y+22, r25	; 0x16
     dfe:	af 8b       	std	Y+23, r26	; 0x17
     e00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e02:	6d 89       	ldd	r22, Y+21	; 0x15
     e04:	7e 89       	ldd	r23, Y+22	; 0x16
     e06:	8f 89       	ldd	r24, Y+23	; 0x17
     e08:	98 8d       	ldd	r25, Y+24	; 0x18
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <enter_pass+0xa8>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9c 8b       	std	Y+20, r25	; 0x14
     e20:	8b 8b       	std	Y+19, r24	; 0x13
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <enter_pass+0x126>
	else if (__tmp > 65535)
     e24:	6d 89       	ldd	r22, Y+21	; 0x15
     e26:	7e 89       	ldd	r23, Y+22	; 0x16
     e28:	8f 89       	ldd	r24, Y+23	; 0x17
     e2a:	98 8d       	ldd	r25, Y+24	; 0x18
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <enter_pass+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	69 8d       	ldd	r22, Y+25	; 0x19
     e3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e40:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e42:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9c 8b       	std	Y+20, r25	; 0x14
     e62:	8b 8b       	std	Y+19, r24	; 0x13
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <enter_pass+0x108>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9a 8b       	std	Y+18, r25	; 0x12
     e6c:	89 8b       	std	Y+17, r24	; 0x11
     e6e:	89 89       	ldd	r24, Y+17	; 0x11
     e70:	9a 89       	ldd	r25, Y+18	; 0x12
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <enter_pass+0xf6>
     e76:	9a 8b       	std	Y+18, r25	; 0x12
     e78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8b 89       	ldd	r24, Y+19	; 0x13
     e7c:	9c 89       	ldd	r25, Y+20	; 0x14
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9c 8b       	std	Y+20, r25	; 0x14
     e82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8b 89       	ldd	r24, Y+19	; 0x13
     e86:	9c 89       	ldd	r25, Y+20	; 0x14
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <enter_pass+0xea>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <enter_pass+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6d 89       	ldd	r22, Y+21	; 0x15
     e90:	7e 89       	ldd	r23, Y+22	; 0x16
     e92:	8f 89       	ldd	r24, Y+23	; 0x17
     e94:	98 8d       	ldd	r25, Y+24	; 0x18
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9c 8b       	std	Y+20, r25	; 0x14
     ea0:	8b 8b       	std	Y+19, r24	; 0x13
     ea2:	8b 89       	ldd	r24, Y+19	; 0x13
     ea4:	9c 89       	ldd	r25, Y+20	; 0x14
     ea6:	98 8b       	std	Y+16, r25	; 0x10
     ea8:	8f 87       	std	Y+15, r24	; 0x0f
     eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
     eac:	98 89       	ldd	r25, Y+16	; 0x10
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <enter_pass+0x132>
     eb2:	98 8b       	std	Y+16, r25	; 0x10
     eb4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(D);
		key=pass[i];
     eb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9c 01       	movw	r18, r24
     ebe:	22 0f       	add	r18, r18
     ec0:	33 1f       	adc	r19, r19
     ec2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ec4:	98 a1       	ldd	r25, Y+32	; 0x20
     ec6:	fc 01       	movw	r30, r24
     ec8:	e2 0f       	add	r30, r18
     eca:	f3 1f       	adc	r31, r19
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	8e 8f       	std	Y+30, r24	; 0x1e
		if(key == ' '){
     ed2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ed4:	80 32       	cpi	r24, 0x20	; 32
     ed6:	09 f4       	brne	.+2      	; 0xeda <enter_pass+0x15e>
     ed8:	81 c0       	rjmp	.+258    	; 0xfdc <enter_pass+0x260>
			break;
		}
		LCD_displayCharacter('*');
     eda:	8a e2       	ldi	r24, 0x2A	; 42
     edc:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayCharacter>
		i++;
     ee0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	8d 8f       	std	Y+29, r24	; 0x1d
		counter++;
     ee6:	80 91 56 01 	lds	r24, 0x0156
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	80 93 56 01 	sts	0x0156, r24
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	aa e7       	ldi	r26, 0x7A	; 122
     ef6:	b3 e4       	ldi	r27, 0x43	; 67
     ef8:	8b 87       	std	Y+11, r24	; 0x0b
     efa:	9c 87       	std	Y+12, r25	; 0x0c
     efc:	ad 87       	std	Y+13, r26	; 0x0d
     efe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f00:	6b 85       	ldd	r22, Y+11	; 0x0b
     f02:	7c 85       	ldd	r23, Y+12	; 0x0c
     f04:	8d 85       	ldd	r24, Y+13	; 0x0d
     f06:	9e 85       	ldd	r25, Y+14	; 0x0e
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	4a ef       	ldi	r20, 0xFA	; 250
     f0e:	54 e4       	ldi	r21, 0x44	; 68
     f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	8f 83       	std	Y+7, r24	; 0x07
     f1a:	98 87       	std	Y+8, r25	; 0x08
     f1c:	a9 87       	std	Y+9, r26	; 0x09
     f1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f20:	6f 81       	ldd	r22, Y+7	; 0x07
     f22:	78 85       	ldd	r23, Y+8	; 0x08
     f24:	89 85       	ldd	r24, Y+9	; 0x09
     f26:	9a 85       	ldd	r25, Y+10	; 0x0a
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e8       	ldi	r20, 0x80	; 128
     f2e:	5f e3       	ldi	r21, 0x3F	; 63
     f30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f34:	88 23       	and	r24, r24
     f36:	2c f4       	brge	.+10     	; 0xf42 <enter_pass+0x1c6>
		__ticks = 1;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	9e 83       	std	Y+6, r25	; 0x06
     f3e:	8d 83       	std	Y+5, r24	; 0x05
     f40:	3f c0       	rjmp	.+126    	; 0xfc0 <enter_pass+0x244>
	else if (__tmp > 65535)
     f42:	6f 81       	ldd	r22, Y+7	; 0x07
     f44:	78 85       	ldd	r23, Y+8	; 0x08
     f46:	89 85       	ldd	r24, Y+9	; 0x09
     f48:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	3f ef       	ldi	r19, 0xFF	; 255
     f4e:	4f e7       	ldi	r20, 0x7F	; 127
     f50:	57 e4       	ldi	r21, 0x47	; 71
     f52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f56:	18 16       	cp	r1, r24
     f58:	4c f5       	brge	.+82     	; 0xfac <enter_pass+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f60:	9e 85       	ldd	r25, Y+14	; 0x0e
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e2       	ldi	r20, 0x20	; 32
     f68:	51 e4       	ldi	r21, 0x41	; 65
     f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	bc 01       	movw	r22, r24
     f74:	cd 01       	movw	r24, r26
     f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	9e 83       	std	Y+6, r25	; 0x06
     f80:	8d 83       	std	Y+5, r24	; 0x05
     f82:	0f c0       	rjmp	.+30     	; 0xfa2 <enter_pass+0x226>
     f84:	88 ec       	ldi	r24, 0xC8	; 200
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	9c 83       	std	Y+4, r25	; 0x04
     f8a:	8b 83       	std	Y+3, r24	; 0x03
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	f1 f7       	brne	.-4      	; 0xf90 <enter_pass+0x214>
     f94:	9c 83       	std	Y+4, r25	; 0x04
     f96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	69 f7       	brne	.-38     	; 0xf84 <enter_pass+0x208>
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <enter_pass+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fac:	6f 81       	ldd	r22, Y+7	; 0x07
     fae:	78 85       	ldd	r23, Y+8	; 0x08
     fb0:	89 85       	ldd	r24, Y+9	; 0x09
     fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	9e 83       	std	Y+6, r25	; 0x06
     fbe:	8d 83       	std	Y+5, r24	; 0x05
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	9e 81       	ldd	r25, Y+6	; 0x06
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <enter_pass+0x250>
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
void enter_pass(uint16 *pass){  //entring pass to system
	counter=0;
	uint8 key=KEYPAD_getPressedKey();
	uint8 i=0;
	LCD_moveCursor(1,0);
	while((key!=' ')){
     fd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd6:	80 32       	cpi	r24, 0x20	; 32
     fd8:	09 f0       	breq	.+2      	; 0xfdc <enter_pass+0x260>
     fda:	e9 ce       	rjmp	.-558    	; 0xdae <enter_pass+0x32>
		LCD_displayCharacter('*');
		i++;
		counter++;
		_delay_ms(D);
	}
}
     fdc:	a0 96       	adiw	r28, 0x20	; 32
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <Lock_NewPass>:

void Lock_NewPass(void){  //add frist pass to the system
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	c5 57       	subi	r28, 0x75	; 117
     ffc:	d0 40       	sbci	r29, 0x00	; 0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
	uint16 pass1[15],pass2[15];
	uint8 j=0;
    1008:	19 ae       	std	Y+57, r1	; 0x39
	enter_pass(pass1);
    100a:	ce 01       	movw	r24, r28
    100c:	ca 96       	adiw	r24, 0x3a	; 58
    100e:	0e 94 be 06 	call	0xd7c	; 0xd7c <enter_pass>


	LCD_clearScreen();
    1012:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"PLZ renter it:");
    1016:	24 e8       	ldi	r18, 0x84	; 132
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	a9 01       	movw	r20, r18
    1020:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a8 e4       	ldi	r26, 0x48	; 72
    102a:	b2 e4       	ldi	r27, 0x42	; 66
    102c:	8d ab       	std	Y+53, r24	; 0x35
    102e:	9e ab       	std	Y+54, r25	; 0x36
    1030:	af ab       	std	Y+55, r26	; 0x37
    1032:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1034:	6d a9       	ldd	r22, Y+53	; 0x35
    1036:	7e a9       	ldd	r23, Y+54	; 0x36
    1038:	8f a9       	ldd	r24, Y+55	; 0x37
    103a:	98 ad       	ldd	r25, Y+56	; 0x38
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	4a ef       	ldi	r20, 0xFA	; 250
    1042:	54 e4       	ldi	r21, 0x44	; 68
    1044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	89 ab       	std	Y+49, r24	; 0x31
    104e:	9a ab       	std	Y+50, r25	; 0x32
    1050:	ab ab       	std	Y+51, r26	; 0x33
    1052:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1054:	69 a9       	ldd	r22, Y+49	; 0x31
    1056:	7a a9       	ldd	r23, Y+50	; 0x32
    1058:	8b a9       	ldd	r24, Y+51	; 0x33
    105a:	9c a9       	ldd	r25, Y+52	; 0x34
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e8       	ldi	r20, 0x80	; 128
    1062:	5f e3       	ldi	r21, 0x3F	; 63
    1064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1068:	88 23       	and	r24, r24
    106a:	2c f4       	brge	.+10     	; 0x1076 <Lock_NewPass+0x84>
		__ticks = 1;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	98 ab       	std	Y+48, r25	; 0x30
    1072:	8f a7       	std	Y+47, r24	; 0x2f
    1074:	3f c0       	rjmp	.+126    	; 0x10f4 <Lock_NewPass+0x102>
	else if (__tmp > 65535)
    1076:	69 a9       	ldd	r22, Y+49	; 0x31
    1078:	7a a9       	ldd	r23, Y+50	; 0x32
    107a:	8b a9       	ldd	r24, Y+51	; 0x33
    107c:	9c a9       	ldd	r25, Y+52	; 0x34
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	3f ef       	ldi	r19, 0xFF	; 255
    1082:	4f e7       	ldi	r20, 0x7F	; 127
    1084:	57 e4       	ldi	r21, 0x47	; 71
    1086:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    108a:	18 16       	cp	r1, r24
    108c:	4c f5       	brge	.+82     	; 0x10e0 <Lock_NewPass+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108e:	6d a9       	ldd	r22, Y+53	; 0x35
    1090:	7e a9       	ldd	r23, Y+54	; 0x36
    1092:	8f a9       	ldd	r24, Y+55	; 0x37
    1094:	98 ad       	ldd	r25, Y+56	; 0x38
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e2       	ldi	r20, 0x20	; 32
    109c:	51 e4       	ldi	r21, 0x41	; 65
    109e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	bc 01       	movw	r22, r24
    10a8:	cd 01       	movw	r24, r26
    10aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	98 ab       	std	Y+48, r25	; 0x30
    10b4:	8f a7       	std	Y+47, r24	; 0x2f
    10b6:	0f c0       	rjmp	.+30     	; 0x10d6 <Lock_NewPass+0xe4>
    10b8:	88 ec       	ldi	r24, 0xC8	; 200
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	9e a7       	std	Y+46, r25	; 0x2e
    10be:	8d a7       	std	Y+45, r24	; 0x2d
    10c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    10c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <Lock_NewPass+0xd2>
    10c8:	9e a7       	std	Y+46, r25	; 0x2e
    10ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ce:	98 a9       	ldd	r25, Y+48	; 0x30
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	98 ab       	std	Y+48, r25	; 0x30
    10d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d8:	98 a9       	ldd	r25, Y+48	; 0x30
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	69 f7       	brne	.-38     	; 0x10b8 <Lock_NewPass+0xc6>
    10de:	14 c0       	rjmp	.+40     	; 0x1108 <Lock_NewPass+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e0:	69 a9       	ldd	r22, Y+49	; 0x31
    10e2:	7a a9       	ldd	r23, Y+50	; 0x32
    10e4:	8b a9       	ldd	r24, Y+51	; 0x33
    10e6:	9c a9       	ldd	r25, Y+52	; 0x34
    10e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	98 ab       	std	Y+48, r25	; 0x30
    10f2:	8f a7       	std	Y+47, r24	; 0x2f
    10f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    10f6:	98 a9       	ldd	r25, Y+48	; 0x30
    10f8:	9c a7       	std	Y+44, r25	; 0x2c
    10fa:	8b a7       	std	Y+43, r24	; 0x2b
    10fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    10fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <Lock_NewPass+0x10e>
    1104:	9c a7       	std	Y+44, r25	; 0x2c
    1106:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);

	enter_pass(pass2);
    1108:	ce 01       	movw	r24, r28
    110a:	88 5a       	subi	r24, 0xA8	; 168
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	0e 94 be 06 	call	0xd7c	; 0xd7c <enter_pass>
    1112:	a6 c0       	rjmp	.+332    	; 0x1260 <Lock_NewPass+0x26e>

	while(j<(counter)){
		if(pass2[j] == pass1[j]){
    1114:	89 ad       	ldd	r24, Y+57	; 0x39
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9e 01       	movw	r18, r28
    111c:	28 5a       	subi	r18, 0xA8	; 168
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	f9 01       	movw	r30, r18
    1126:	e8 0f       	add	r30, r24
    1128:	f9 1f       	adc	r31, r25
    112a:	40 81       	ld	r20, Z
    112c:	51 81       	ldd	r21, Z+1	; 0x01
    112e:	89 ad       	ldd	r24, Y+57	; 0x39
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9c 01       	movw	r18, r24
    1136:	22 0f       	add	r18, r18
    1138:	33 1f       	adc	r19, r19
    113a:	ce 01       	movw	r24, r28
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	fc 01       	movw	r30, r24
    1144:	f9 96       	adiw	r30, 0x39	; 57
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	48 17       	cp	r20, r24
    114c:	59 07       	cpc	r21, r25
    114e:	21 f4       	brne	.+8      	; 0x1158 <Lock_NewPass+0x166>
			j++;
    1150:	89 ad       	ldd	r24, Y+57	; 0x39
    1152:	8f 5f       	subi	r24, 0xFF	; 255
    1154:	89 af       	std	Y+57, r24	; 0x39
    1156:	84 c0       	rjmp	.+264    	; 0x1260 <Lock_NewPass+0x26e>
		}
		else{
			LCD_clearScreen();
    1158:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,6,"ERROR");
    115c:	23 e9       	ldi	r18, 0x93	; 147
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	66 e0       	ldi	r22, 0x06	; 6
    1164:	a9 01       	movw	r20, r18
    1166:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	aa e7       	ldi	r26, 0x7A	; 122
    1170:	b4 e4       	ldi	r27, 0x44	; 68
    1172:	8f a3       	std	Y+39, r24	; 0x27
    1174:	98 a7       	std	Y+40, r25	; 0x28
    1176:	a9 a7       	std	Y+41, r26	; 0x29
    1178:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117a:	6f a1       	ldd	r22, Y+39	; 0x27
    117c:	78 a5       	ldd	r23, Y+40	; 0x28
    117e:	89 a5       	ldd	r24, Y+41	; 0x29
    1180:	9a a5       	ldd	r25, Y+42	; 0x2a
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	4a ef       	ldi	r20, 0xFA	; 250
    1188:	54 e4       	ldi	r21, 0x44	; 68
    118a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	8b a3       	std	Y+35, r24	; 0x23
    1194:	9c a3       	std	Y+36, r25	; 0x24
    1196:	ad a3       	std	Y+37, r26	; 0x25
    1198:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    119a:	6b a1       	ldd	r22, Y+35	; 0x23
    119c:	7c a1       	ldd	r23, Y+36	; 0x24
    119e:	8d a1       	ldd	r24, Y+37	; 0x25
    11a0:	9e a1       	ldd	r25, Y+38	; 0x26
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	5f e3       	ldi	r21, 0x3F	; 63
    11aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ae:	88 23       	and	r24, r24
    11b0:	2c f4       	brge	.+10     	; 0x11bc <Lock_NewPass+0x1ca>
		__ticks = 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	9a a3       	std	Y+34, r25	; 0x22
    11b8:	89 a3       	std	Y+33, r24	; 0x21
    11ba:	3f c0       	rjmp	.+126    	; 0x123a <Lock_NewPass+0x248>
	else if (__tmp > 65535)
    11bc:	6b a1       	ldd	r22, Y+35	; 0x23
    11be:	7c a1       	ldd	r23, Y+36	; 0x24
    11c0:	8d a1       	ldd	r24, Y+37	; 0x25
    11c2:	9e a1       	ldd	r25, Y+38	; 0x26
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	4f e7       	ldi	r20, 0x7F	; 127
    11ca:	57 e4       	ldi	r21, 0x47	; 71
    11cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d0:	18 16       	cp	r1, r24
    11d2:	4c f5       	brge	.+82     	; 0x1226 <Lock_NewPass+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d4:	6f a1       	ldd	r22, Y+39	; 0x27
    11d6:	78 a5       	ldd	r23, Y+40	; 0x28
    11d8:	89 a5       	ldd	r24, Y+41	; 0x29
    11da:	9a a5       	ldd	r25, Y+42	; 0x2a
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	51 e4       	ldi	r21, 0x41	; 65
    11e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	bc 01       	movw	r22, r24
    11ee:	cd 01       	movw	r24, r26
    11f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	9a a3       	std	Y+34, r25	; 0x22
    11fa:	89 a3       	std	Y+33, r24	; 0x21
    11fc:	0f c0       	rjmp	.+30     	; 0x121c <Lock_NewPass+0x22a>
    11fe:	88 ec       	ldi	r24, 0xC8	; 200
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	98 a3       	std	Y+32, r25	; 0x20
    1204:	8f 8f       	std	Y+31, r24	; 0x1f
    1206:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1208:	98 a1       	ldd	r25, Y+32	; 0x20
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <Lock_NewPass+0x218>
    120e:	98 a3       	std	Y+32, r25	; 0x20
    1210:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1212:	89 a1       	ldd	r24, Y+33	; 0x21
    1214:	9a a1       	ldd	r25, Y+34	; 0x22
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	9a a3       	std	Y+34, r25	; 0x22
    121a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    121c:	89 a1       	ldd	r24, Y+33	; 0x21
    121e:	9a a1       	ldd	r25, Y+34	; 0x22
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	69 f7       	brne	.-38     	; 0x11fe <Lock_NewPass+0x20c>
    1224:	14 c0       	rjmp	.+40     	; 0x124e <Lock_NewPass+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1226:	6b a1       	ldd	r22, Y+35	; 0x23
    1228:	7c a1       	ldd	r23, Y+36	; 0x24
    122a:	8d a1       	ldd	r24, Y+37	; 0x25
    122c:	9e a1       	ldd	r25, Y+38	; 0x26
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9a a3       	std	Y+34, r25	; 0x22
    1238:	89 a3       	std	Y+33, r24	; 0x21
    123a:	89 a1       	ldd	r24, Y+33	; 0x21
    123c:	9a a1       	ldd	r25, Y+34	; 0x22
    123e:	9e 8f       	std	Y+30, r25	; 0x1e
    1240:	8d 8f       	std	Y+29, r24	; 0x1d
    1242:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1244:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <Lock_NewPass+0x254>
    124a:	9e 8f       	std	Y+30, r25	; 0x1e
    124c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms((4*D));
			LCD_clearScreen();
    124e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
			LCD_displayString("PLZ enter pass:");
    1252:	84 e7       	ldi	r24, 0x74	; 116
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayString>
			Lock_NewPass();
    125a:	0e 94 f9 07 	call	0xff2	; 0xff2 <Lock_NewPass>
    125e:	06 c0       	rjmp	.+12     	; 0x126c <Lock_NewPass+0x27a>
	LCD_displayStringRowColumn(0,0,"PLZ renter it:");
	_delay_ms(50);

	enter_pass(pass2);

	while(j<(counter)){
    1260:	90 91 56 01 	lds	r25, 0x0156
    1264:	89 ad       	ldd	r24, Y+57	; 0x39
    1266:	89 17       	cp	r24, r25
    1268:	08 f4       	brcc	.+2      	; 0x126c <Lock_NewPass+0x27a>
    126a:	54 cf       	rjmp	.-344    	; 0x1114 <Lock_NewPass+0x122>
			Lock_NewPass();
			break;
		}

	}
	if (send_flag ==1){
    126c:	80 91 48 01 	lds	r24, 0x0148
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	09 f0       	breq	.+2      	; 0x1276 <Lock_NewPass+0x284>
    1274:	05 c1       	rjmp	.+522    	; 0x1480 <Lock_NewPass+0x48e>
		send_pass(pass1);
    1276:	ce 01       	movw	r24, r28
    1278:	ca 96       	adiw	r24, 0x3a	; 58
    127a:	0e 94 84 06 	call	0xd08	; 0xd08 <send_pass>
		LCD_clearScreen();
    127e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
		LCD_displayString("THANKS pass has");
    1282:	89 e9       	ldi	r24, 0x99	; 153
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"been set.");
    128a:	29 ea       	ldi	r18, 0xA9	; 169
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	a9 01       	movw	r20, r18
    1294:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	aa ef       	ldi	r26, 0xFA	; 250
    129e:	b3 e4       	ldi	r27, 0x43	; 67
    12a0:	89 8f       	std	Y+25, r24	; 0x19
    12a2:	9a 8f       	std	Y+26, r25	; 0x1a
    12a4:	ab 8f       	std	Y+27, r26	; 0x1b
    12a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a8:	69 8d       	ldd	r22, Y+25	; 0x19
    12aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a ef       	ldi	r20, 0xFA	; 250
    12b6:	54 e4       	ldi	r21, 0x44	; 68
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8d 8b       	std	Y+21, r24	; 0x15
    12c2:	9e 8b       	std	Y+22, r25	; 0x16
    12c4:	af 8b       	std	Y+23, r26	; 0x17
    12c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12c8:	6d 89       	ldd	r22, Y+21	; 0x15
    12ca:	7e 89       	ldd	r23, Y+22	; 0x16
    12cc:	8f 89       	ldd	r24, Y+23	; 0x17
    12ce:	98 8d       	ldd	r25, Y+24	; 0x18
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e8       	ldi	r20, 0x80	; 128
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12dc:	88 23       	and	r24, r24
    12de:	2c f4       	brge	.+10     	; 0x12ea <Lock_NewPass+0x2f8>
		__ticks = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9c 8b       	std	Y+20, r25	; 0x14
    12e6:	8b 8b       	std	Y+19, r24	; 0x13
    12e8:	3f c0       	rjmp	.+126    	; 0x1368 <Lock_NewPass+0x376>
	else if (__tmp > 65535)
    12ea:	6d 89       	ldd	r22, Y+21	; 0x15
    12ec:	7e 89       	ldd	r23, Y+22	; 0x16
    12ee:	8f 89       	ldd	r24, Y+23	; 0x17
    12f0:	98 8d       	ldd	r25, Y+24	; 0x18
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	4f e7       	ldi	r20, 0x7F	; 127
    12f8:	57 e4       	ldi	r21, 0x47	; 71
    12fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	4c f5       	brge	.+82     	; 0x1354 <Lock_NewPass+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1302:	69 8d       	ldd	r22, Y+25	; 0x19
    1304:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1306:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1308:	9c 8d       	ldd	r25, Y+28	; 0x1c
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9c 8b       	std	Y+20, r25	; 0x14
    1328:	8b 8b       	std	Y+19, r24	; 0x13
    132a:	0f c0       	rjmp	.+30     	; 0x134a <Lock_NewPass+0x358>
    132c:	88 ec       	ldi	r24, 0xC8	; 200
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9a 8b       	std	Y+18, r25	; 0x12
    1332:	89 8b       	std	Y+17, r24	; 0x11
    1334:	89 89       	ldd	r24, Y+17	; 0x11
    1336:	9a 89       	ldd	r25, Y+18	; 0x12
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <Lock_NewPass+0x346>
    133c:	9a 8b       	std	Y+18, r25	; 0x12
    133e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1340:	8b 89       	ldd	r24, Y+19	; 0x13
    1342:	9c 89       	ldd	r25, Y+20	; 0x14
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	9c 8b       	std	Y+20, r25	; 0x14
    1348:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134a:	8b 89       	ldd	r24, Y+19	; 0x13
    134c:	9c 89       	ldd	r25, Y+20	; 0x14
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	69 f7       	brne	.-38     	; 0x132c <Lock_NewPass+0x33a>
    1352:	14 c0       	rjmp	.+40     	; 0x137c <Lock_NewPass+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1354:	6d 89       	ldd	r22, Y+21	; 0x15
    1356:	7e 89       	ldd	r23, Y+22	; 0x16
    1358:	8f 89       	ldd	r24, Y+23	; 0x17
    135a:	98 8d       	ldd	r25, Y+24	; 0x18
    135c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9c 8b       	std	Y+20, r25	; 0x14
    1366:	8b 8b       	std	Y+19, r24	; 0x13
    1368:	8b 89       	ldd	r24, Y+19	; 0x13
    136a:	9c 89       	ldd	r25, Y+20	; 0x14
    136c:	98 8b       	std	Y+16, r25	; 0x10
    136e:	8f 87       	std	Y+15, r24	; 0x0f
    1370:	8f 85       	ldd	r24, Y+15	; 0x0f
    1372:	98 89       	ldd	r25, Y+16	; 0x10
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <Lock_NewPass+0x382>
    1378:	98 8b       	std	Y+16, r25	; 0x10
    137a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms((2*D));
		LCD_displayStringRowColumn(0,0,"+ : open door");
    137c:	23 eb       	ldi	r18, 0xB3	; 179
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	a9 01       	movw	r20, r18
    1386:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"- : change pass");
    138a:	21 ec       	ldi	r18, 0xC1	; 193
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	a9 01       	movw	r20, r18
    1394:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	aa ef       	ldi	r26, 0xFA	; 250
    139e:	b2 e4       	ldi	r27, 0x42	; 66
    13a0:	8b 87       	std	Y+11, r24	; 0x0b
    13a2:	9c 87       	std	Y+12, r25	; 0x0c
    13a4:	ad 87       	std	Y+13, r26	; 0x0d
    13a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	4a ef       	ldi	r20, 0xFA	; 250
    13b6:	54 e4       	ldi	r21, 0x44	; 68
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8f 83       	std	Y+7, r24	; 0x07
    13c2:	98 87       	std	Y+8, r25	; 0x08
    13c4:	a9 87       	std	Y+9, r26	; 0x09
    13c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13dc:	88 23       	and	r24, r24
    13de:	2c f4       	brge	.+10     	; 0x13ea <Lock_NewPass+0x3f8>
		__ticks = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9e 83       	std	Y+6, r25	; 0x06
    13e6:	8d 83       	std	Y+5, r24	; 0x05
    13e8:	3f c0       	rjmp	.+126    	; 0x1468 <Lock_NewPass+0x476>
	else if (__tmp > 65535)
    13ea:	6f 81       	ldd	r22, Y+7	; 0x07
    13ec:	78 85       	ldd	r23, Y+8	; 0x08
    13ee:	89 85       	ldd	r24, Y+9	; 0x09
    13f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fe:	18 16       	cp	r1, r24
    1400:	4c f5       	brge	.+82     	; 0x1454 <Lock_NewPass+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1402:	6b 85       	ldd	r22, Y+11	; 0x0b
    1404:	7c 85       	ldd	r23, Y+12	; 0x0c
    1406:	8d 85       	ldd	r24, Y+13	; 0x0d
    1408:	9e 85       	ldd	r25, Y+14	; 0x0e
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e2       	ldi	r20, 0x20	; 32
    1410:	51 e4       	ldi	r21, 0x41	; 65
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
    142a:	0f c0       	rjmp	.+30     	; 0x144a <Lock_NewPass+0x458>
    142c:	88 ec       	ldi	r24, 0xC8	; 200
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9c 83       	std	Y+4, r25	; 0x04
    1432:	8b 83       	std	Y+3, r24	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <Lock_NewPass+0x446>
    143c:	9c 83       	std	Y+4, r25	; 0x04
    143e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	69 f7       	brne	.-38     	; 0x142c <Lock_NewPass+0x43a>
    1452:	14 c0       	rjmp	.+40     	; 0x147c <Lock_NewPass+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <Lock_NewPass+0x482>
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(D/2);
		send_flag=0;
    147c:	10 92 48 01 	sts	0x0148, r1
	}
}
    1480:	cb 58       	subi	r28, 0x8B	; 139
    1482:	df 4f       	sbci	r29, 0xFF	; 255
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <check_pass>:

void check_pass(void){  //checking pass
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	ad 97       	sbiw	r28, 0x2d	; 45
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
	uint16 pass[15];
	uint8 error_pass=0;
    14a8:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
    14aa:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter pass:");
    14ae:	21 ed       	ldi	r18, 0xD1	; 209
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	a9 01       	movw	r20, r18
    14b8:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
	enter_pass(pass);
    14bc:	ce 01       	movw	r24, r28
    14be:	40 96       	adiw	r24, 0x10	; 16
    14c0:	0e 94 be 06 	call	0xd7c	; 0xd7c <enter_pass>
	UART_sendByte(CHECK_PASS);
    14c4:	84 e0       	ldi	r24, 0x04	; 4
    14c6:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <UART_sendByte>
	send_pass(pass);
    14ca:	ce 01       	movw	r24, r28
    14cc:	40 96       	adiw	r24, 0x10	; 16
    14ce:	0e 94 84 06 	call	0xd08	; 0xd08 <send_pass>
	if(UART_recieveByte() == Error_pass)
    14d2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <UART_recieveByte>
    14d6:	88 23       	and	r24, r24
    14d8:	19 f4       	brne	.+6      	; 0x14e0 <check_pass+0x4c>
	{
		error_pass ++;
    14da:	8f 85       	ldd	r24, Y+15	; 0x0f
    14dc:	8f 5f       	subi	r24, 0xFF	; 255
    14de:	8f 87       	std	Y+15, r24	; 0x0f
	}

	if(error_pass != 0)
    14e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e2:	88 23       	and	r24, r24
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <check_pass+0x54>
    14e6:	b4 c0       	rjmp	.+360    	; 0x1650 <check_pass+0x1bc>
	{
		counter_error ++;
    14e8:	80 91 59 01 	lds	r24, 0x0159
    14ec:	8f 5f       	subi	r24, 0xFF	; 255
    14ee:	80 93 59 01 	sts	0x0159, r24
		UART_sendByte(counter_error);
    14f2:	80 91 59 01 	lds	r24, 0x0159
    14f6:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <UART_sendByte>

		if(counter_error < 3)
    14fa:	80 91 59 01 	lds	r24, 0x0159
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	08 f0       	brcs	.+2      	; 0x1504 <check_pass+0x70>
    1502:	7e c0       	rjmp	.+252    	; 0x1600 <check_pass+0x16c>
		{
			LCD_clearScreen();
    1504:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"INCORRECT PASS");
    1508:	21 ee       	ldi	r18, 0xE1	; 225
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	a9 01       	movw	r20, r18
    1512:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	aa ef       	ldi	r26, 0xFA	; 250
    151c:	b3 e4       	ldi	r27, 0x43	; 67
    151e:	8b 87       	std	Y+11, r24	; 0x0b
    1520:	9c 87       	std	Y+12, r25	; 0x0c
    1522:	ad 87       	std	Y+13, r26	; 0x0d
    1524:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1526:	6b 85       	ldd	r22, Y+11	; 0x0b
    1528:	7c 85       	ldd	r23, Y+12	; 0x0c
    152a:	8d 85       	ldd	r24, Y+13	; 0x0d
    152c:	9e 85       	ldd	r25, Y+14	; 0x0e
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	4a ef       	ldi	r20, 0xFA	; 250
    1534:	54 e4       	ldi	r21, 0x44	; 68
    1536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	8f 83       	std	Y+7, r24	; 0x07
    1540:	98 87       	std	Y+8, r25	; 0x08
    1542:	a9 87       	std	Y+9, r26	; 0x09
    1544:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1546:	6f 81       	ldd	r22, Y+7	; 0x07
    1548:	78 85       	ldd	r23, Y+8	; 0x08
    154a:	89 85       	ldd	r24, Y+9	; 0x09
    154c:	9a 85       	ldd	r25, Y+10	; 0x0a
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	5f e3       	ldi	r21, 0x3F	; 63
    1556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    155a:	88 23       	and	r24, r24
    155c:	2c f4       	brge	.+10     	; 0x1568 <check_pass+0xd4>
		__ticks = 1;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	3f c0       	rjmp	.+126    	; 0x15e6 <check_pass+0x152>
	else if (__tmp > 65535)
    1568:	6f 81       	ldd	r22, Y+7	; 0x07
    156a:	78 85       	ldd	r23, Y+8	; 0x08
    156c:	89 85       	ldd	r24, Y+9	; 0x09
    156e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3f ef       	ldi	r19, 0xFF	; 255
    1574:	4f e7       	ldi	r20, 0x7F	; 127
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157c:	18 16       	cp	r1, r24
    157e:	4c f5       	brge	.+82     	; 0x15d2 <check_pass+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1580:	6b 85       	ldd	r22, Y+11	; 0x0b
    1582:	7c 85       	ldd	r23, Y+12	; 0x0c
    1584:	8d 85       	ldd	r24, Y+13	; 0x0d
    1586:	9e 85       	ldd	r25, Y+14	; 0x0e
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e2       	ldi	r20, 0x20	; 32
    158e:	51 e4       	ldi	r21, 0x41	; 65
    1590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <check_pass+0x134>
    15aa:	88 ec       	ldi	r24, 0xC8	; 200
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9c 83       	std	Y+4, r25	; 0x04
    15b0:	8b 83       	std	Y+3, r24	; 0x03
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <check_pass+0x122>
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	9e 83       	std	Y+6, r25	; 0x06
    15c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ca:	9e 81       	ldd	r25, Y+6	; 0x06
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	69 f7       	brne	.-38     	; 0x15aa <check_pass+0x116>
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <check_pass+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d2:	6f 81       	ldd	r22, Y+7	; 0x07
    15d4:	78 85       	ldd	r23, Y+8	; 0x08
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	9e 83       	std	Y+6, r25	; 0x06
    15e4:	8d 83       	std	Y+5, r24	; 0x05
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	9a 83       	std	Y+2, r25	; 0x02
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <check_pass+0x15e>
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2*D);
			check_pass();
    15fa:	0e 94 4a 0a 	call	0x1494	; 0x1494 <check_pass>
    15fe:	2d c0       	rjmp	.+90     	; 0x165a <check_pass+0x1c6>
		}
		else
		{
			LCD_clearScreen();
    1600:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>

			TIMER1_deInit();
    1604:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <TIMER1_deInit>
			TIMER1_init(&Timer_Config);
    1608:	89 e4       	ldi	r24, 0x49	; 73
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <TIMER1_init>
			g_tick =0;
    1610:	10 92 58 01 	sts	0x0158, r1
    1614:	10 92 57 01 	sts	0x0157, r1
    1618:	0e c0       	rjmp	.+28     	; 0x1636 <check_pass+0x1a2>
			while (g_tick != 60)
			{
				LCD_displayStringRowColumn(0,0,"Wait 60 Seconds");
    161a:	20 ef       	ldi	r18, 0xF0	; 240
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	a9 01       	movw	r20, r18
    1624:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,5,"Thief");
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	31 e0       	ldi	r19, 0x01	; 1
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	65 e0       	ldi	r22, 0x05	; 5
    1630:	a9 01       	movw	r20, r18
    1632:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
			LCD_clearScreen();

			TIMER1_deInit();
			TIMER1_init(&Timer_Config);
			g_tick =0;
			while (g_tick != 60)
    1636:	80 91 57 01 	lds	r24, 0x0157
    163a:	90 91 58 01 	lds	r25, 0x0158
    163e:	8c 33       	cpi	r24, 0x3C	; 60
    1640:	91 05       	cpc	r25, r1
    1642:	59 f7       	brne	.-42     	; 0x161a <check_pass+0x186>
			{
				LCD_displayStringRowColumn(0,0,"Wait 60 Seconds");
				LCD_displayStringRowColumn(1,5,"Thief");
			}

			counter_error = 0;
    1644:	10 92 59 01 	sts	0x0159, r1
			return_flag =1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	80 93 5a 01 	sts	0x015A, r24
    164e:	05 c0       	rjmp	.+10     	; 0x165a <check_pass+0x1c6>
		}
	}
	else
	{
		UART_sendByte(4);
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <UART_sendByte>
		counter_error = 0;
    1656:	10 92 59 01 	sts	0x0159, r1
	}

}
    165a:	ad 96       	adiw	r28, 0x2d	; 45
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <Open_Door>:


void Open_Door(void){  //open door system
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(UNLOCK_DOOR);
    1674:	86 e0       	ldi	r24, 0x06	; 6
    1676:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <UART_sendByte>

	LCD_clearScreen();
    167a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
	TIMER1_deInit();
    167e:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <TIMER1_deInit>
	TIMER1_init(&Timer_Config);
    1682:	89 e4       	ldi	r24, 0x49	; 73
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <TIMER1_init>
	g_tick =0;
    168a:	10 92 58 01 	sts	0x0158, r1
    168e:	10 92 57 01 	sts	0x0157, r1
    1692:	07 c0       	rjmp	.+14     	; 0x16a2 <Open_Door+0x36>
	while(g_tick != 15)
	{
		LCD_displayStringRowColumn(0,0,"Opening Door..");
    1694:	26 e0       	ldi	r18, 0x06	; 6
    1696:	31 e0       	ldi	r19, 0x01	; 1
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	a9 01       	movw	r20, r18
    169e:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>

	LCD_clearScreen();
	TIMER1_deInit();
	TIMER1_init(&Timer_Config);
	g_tick =0;
	while(g_tick != 15)
    16a2:	80 91 57 01 	lds	r24, 0x0157
    16a6:	90 91 58 01 	lds	r25, 0x0158
    16aa:	8f 30       	cpi	r24, 0x0F	; 15
    16ac:	91 05       	cpc	r25, r1
    16ae:	91 f7       	brne	.-28     	; 0x1694 <Open_Door+0x28>
	{
		LCD_displayStringRowColumn(0,0,"Opening Door..");
	}

	LCD_clearScreen();
    16b0:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
	g_tick =0;
    16b4:	10 92 58 01 	sts	0x0158, r1
    16b8:	10 92 57 01 	sts	0x0157, r1
    16bc:	07 c0       	rjmp	.+14     	; 0x16cc <Open_Door+0x60>
	while(g_tick != 3)
	{
		LCD_displayStringRowColumn(0,0,"Door Opened");
    16be:	25 e1       	ldi	r18, 0x15	; 21
    16c0:	31 e0       	ldi	r19, 0x01	; 1
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	a9 01       	movw	r20, r18
    16c8:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(0,0,"Opening Door..");
	}

	LCD_clearScreen();
	g_tick =0;
	while(g_tick != 3)
    16cc:	80 91 57 01 	lds	r24, 0x0157
    16d0:	90 91 58 01 	lds	r25, 0x0158
    16d4:	83 30       	cpi	r24, 0x03	; 3
    16d6:	91 05       	cpc	r25, r1
    16d8:	91 f7       	brne	.-28     	; 0x16be <Open_Door+0x52>
	{
		LCD_displayStringRowColumn(0,0,"Door Opened");
	}

	LCD_clearScreen();
    16da:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
	g_tick =0;
    16de:	10 92 58 01 	sts	0x0158, r1
    16e2:	10 92 57 01 	sts	0x0157, r1
    16e6:	07 c0       	rjmp	.+14     	; 0x16f6 <Open_Door+0x8a>
	while(g_tick!= 15)
	{
		LCD_displayStringRowColumn(0,0,"Closing Door..");
    16e8:	21 e2       	ldi	r18, 0x21	; 33
    16ea:	31 e0       	ldi	r19, 0x01	; 1
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	a9 01       	movw	r20, r18
    16f2:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(0,0,"Door Opened");
	}

	LCD_clearScreen();
	g_tick =0;
	while(g_tick!= 15)
    16f6:	80 91 57 01 	lds	r24, 0x0157
    16fa:	90 91 58 01 	lds	r25, 0x0158
    16fe:	8f 30       	cpi	r24, 0x0F	; 15
    1700:	91 05       	cpc	r25, r1
    1702:	91 f7       	brne	.-28     	; 0x16e8 <Open_Door+0x7c>
	{
		LCD_displayStringRowColumn(0,0,"Closing Door..");
	}
}
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <Main_Options>:

void Main_Options(void){  //main option set menu
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	2f 97       	sbiw	r28, 0x0f	; 15
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
	LCD_displayStringRowColumn(0,0,"+ : open door");
    171e:	23 eb       	ldi	r18, 0xB3	; 179
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	a9 01       	movw	r20, r18
    1728:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : change pass");
    172c:	21 ec       	ldi	r18, 0xC1	; 193
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	a9 01       	movw	r20, r18
    1736:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
    173a:	09 c0       	rjmp	.+18     	; 0x174e <Main_Options+0x44>
	uint8 key;
	while((key != '+') || (key != '-')){
		key=KEYPAD_getPressedKey();
    173c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <KEYPAD_getPressedKey>
    1740:	8f 87       	std	Y+15, r24	; 0x0f
		if((key == '+') || (key == '-')){
    1742:	8f 85       	ldd	r24, Y+15	; 0x0f
    1744:	8b 32       	cpi	r24, 0x2B	; 43
    1746:	49 f0       	breq	.+18     	; 0x175a <Main_Options+0x50>
    1748:	8f 85       	ldd	r24, Y+15	; 0x0f
    174a:	8d 32       	cpi	r24, 0x2D	; 45
    174c:	31 f0       	breq	.+12     	; 0x175a <Main_Options+0x50>

void Main_Options(void){  //main option set menu
	LCD_displayStringRowColumn(0,0,"+ : open door");
	LCD_displayStringRowColumn(1,0,"- : change pass");
	uint8 key;
	while((key != '+') || (key != '-')){
    174e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1750:	8b 32       	cpi	r24, 0x2B	; 43
    1752:	a1 f7       	brne	.-24     	; 0x173c <Main_Options+0x32>
    1754:	8f 85       	ldd	r24, Y+15	; 0x0f
    1756:	8d 32       	cpi	r24, 0x2D	; 45
    1758:	89 f7       	brne	.-30     	; 0x173c <Main_Options+0x32>
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	aa e7       	ldi	r26, 0x7A	; 122
    1760:	b3 e4       	ldi	r27, 0x43	; 67
    1762:	8b 87       	std	Y+11, r24	; 0x0b
    1764:	9c 87       	std	Y+12, r25	; 0x0c
    1766:	ad 87       	std	Y+13, r26	; 0x0d
    1768:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176a:	6b 85       	ldd	r22, Y+11	; 0x0b
    176c:	7c 85       	ldd	r23, Y+12	; 0x0c
    176e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1770:	9e 85       	ldd	r25, Y+14	; 0x0e
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	4a ef       	ldi	r20, 0xFA	; 250
    1778:	54 e4       	ldi	r21, 0x44	; 68
    177a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	8f 83       	std	Y+7, r24	; 0x07
    1784:	98 87       	std	Y+8, r25	; 0x08
    1786:	a9 87       	std	Y+9, r26	; 0x09
    1788:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    178a:	6f 81       	ldd	r22, Y+7	; 0x07
    178c:	78 85       	ldd	r23, Y+8	; 0x08
    178e:	89 85       	ldd	r24, Y+9	; 0x09
    1790:	9a 85       	ldd	r25, Y+10	; 0x0a
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e8       	ldi	r20, 0x80	; 128
    1798:	5f e3       	ldi	r21, 0x3F	; 63
    179a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    179e:	88 23       	and	r24, r24
    17a0:	2c f4       	brge	.+10     	; 0x17ac <Main_Options+0xa2>
		__ticks = 1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
    17aa:	3f c0       	rjmp	.+126    	; 0x182a <Main_Options+0x120>
	else if (__tmp > 65535)
    17ac:	6f 81       	ldd	r22, Y+7	; 0x07
    17ae:	78 85       	ldd	r23, Y+8	; 0x08
    17b0:	89 85       	ldd	r24, Y+9	; 0x09
    17b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	3f ef       	ldi	r19, 0xFF	; 255
    17b8:	4f e7       	ldi	r20, 0x7F	; 127
    17ba:	57 e4       	ldi	r21, 0x47	; 71
    17bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c0:	18 16       	cp	r1, r24
    17c2:	4c f5       	brge	.+82     	; 0x1816 <Main_Options+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e2       	ldi	r20, 0x20	; 32
    17d2:	51 e4       	ldi	r21, 0x41	; 65
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	bc 01       	movw	r22, r24
    17de:	cd 01       	movw	r24, r26
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	9e 83       	std	Y+6, r25	; 0x06
    17ea:	8d 83       	std	Y+5, r24	; 0x05
    17ec:	0f c0       	rjmp	.+30     	; 0x180c <Main_Options+0x102>
    17ee:	88 ec       	ldi	r24, 0xC8	; 200
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9c 83       	std	Y+4, r25	; 0x04
    17f4:	8b 83       	std	Y+3, r24	; 0x03
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <Main_Options+0xf0>
    17fe:	9c 83       	std	Y+4, r25	; 0x04
    1800:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	9e 83       	std	Y+6, r25	; 0x06
    180a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	69 f7       	brne	.-38     	; 0x17ee <Main_Options+0xe4>
    1814:	14 c0       	rjmp	.+40     	; 0x183e <Main_Options+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1816:	6f 81       	ldd	r22, Y+7	; 0x07
    1818:	78 85       	ldd	r23, Y+8	; 0x08
    181a:	89 85       	ldd	r24, Y+9	; 0x09
    181c:	9a 85       	ldd	r25, Y+10	; 0x0a
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	9e 81       	ldd	r25, Y+6	; 0x06
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	9a 81       	ldd	r25, Y+2	; 0x02
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <Main_Options+0x12c>
    183a:	9a 83       	std	Y+2, r25	; 0x02
    183c:	89 83       	std	Y+1, r24	; 0x01
		if((key == '+') || (key == '-')){
			break;
		}
	}
	_delay_ms(D);
	check_pass();
    183e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <check_pass>
	UART_sendByte(return_flag);
    1842:	80 91 5a 01 	lds	r24, 0x015A
    1846:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <UART_sendByte>
	UART_sendByte(key);
    184a:	8f 85       	ldd	r24, Y+15	; 0x0f
    184c:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <UART_sendByte>
	if(return_flag == 0)
    1850:	80 91 5a 01 	lds	r24, 0x015A
    1854:	88 23       	and	r24, r24
    1856:	a9 f4       	brne	.+42     	; 0x1882 <Main_Options+0x178>
	{
		if(key== '+'){
    1858:	8f 85       	ldd	r24, Y+15	; 0x0f
    185a:	8b 32       	cpi	r24, 0x2B	; 43
    185c:	19 f4       	brne	.+6      	; 0x1864 <Main_Options+0x15a>
			Open_Door();
    185e:	0e 94 36 0b 	call	0x166c	; 0x166c <Open_Door>
    1862:	11 c0       	rjmp	.+34     	; 0x1886 <Main_Options+0x17c>
		}
		else if (key== '-'){
    1864:	8f 85       	ldd	r24, Y+15	; 0x0f
    1866:	8d 32       	cpi	r24, 0x2D	; 45
    1868:	71 f4       	brne	.+28     	; 0x1886 <Main_Options+0x17c>
			LCD_clearScreen();
    186a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
			LCD_displayString("Enter new pass:");
    186e:	80 e3       	ldi	r24, 0x30	; 48
    1870:	91 e0       	ldi	r25, 0x01	; 1
    1872:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayString>
			send_flag=1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	80 93 48 01 	sts	0x0148, r24
			Lock_NewPass();
    187c:	0e 94 f9 07 	call	0xff2	; 0xff2 <Lock_NewPass>
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <Main_Options+0x17c>
		}
	}
	else
	{
		return_flag=0;
    1882:	10 92 5a 01 	sts	0x015A, r1
	}

	LCD_clearScreen();
    1886:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
}
    188a:	2f 96       	adiw	r28, 0x0f	; 15
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <GPIO_setupPinDirection+0x6>
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <GPIO_setupPinDirection+0x8>
    18a4:	0f 92       	push	r0
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	6a 83       	std	Y+2, r22	; 0x02
    18ae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	88 30       	cpi	r24, 0x08	; 8
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <GPIO_setupPinDirection+0x1c>
    18b6:	d5 c0       	rjmp	.+426    	; 0x1a62 <GPIO_setupPinDirection+0x1c6>
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <GPIO_setupPinDirection+0x24>
    18be:	d1 c0       	rjmp	.+418    	; 0x1a62 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	3d 83       	std	Y+5, r19	; 0x05
    18c8:	2c 83       	std	Y+4, r18	; 0x04
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	91 05       	cpc	r25, r1
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <GPIO_setupPinDirection+0x3a>
    18d4:	43 c0       	rjmp	.+134    	; 0x195c <GPIO_setupPinDirection+0xc0>
    18d6:	2c 81       	ldd	r18, Y+4	; 0x04
    18d8:	3d 81       	ldd	r19, Y+5	; 0x05
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	2c f4       	brge	.+10     	; 0x18ea <GPIO_setupPinDirection+0x4e>
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	9d 81       	ldd	r25, Y+5	; 0x05
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	71 f0       	breq	.+28     	; 0x1904 <GPIO_setupPinDirection+0x68>
    18e8:	bc c0       	rjmp	.+376    	; 0x1a62 <GPIO_setupPinDirection+0x1c6>
    18ea:	2c 81       	ldd	r18, Y+4	; 0x04
    18ec:	3d 81       	ldd	r19, Y+5	; 0x05
    18ee:	22 30       	cpi	r18, 0x02	; 2
    18f0:	31 05       	cpc	r19, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <GPIO_setupPinDirection+0x5a>
    18f4:	5f c0       	rjmp	.+190    	; 0x19b4 <GPIO_setupPinDirection+0x118>
    18f6:	8c 81       	ldd	r24, Y+4	; 0x04
    18f8:	9d 81       	ldd	r25, Y+5	; 0x05
    18fa:	83 30       	cpi	r24, 0x03	; 3
    18fc:	91 05       	cpc	r25, r1
    18fe:	09 f4       	brne	.+2      	; 0x1902 <GPIO_setupPinDirection+0x66>
    1900:	85 c0       	rjmp	.+266    	; 0x1a0c <GPIO_setupPinDirection+0x170>
    1902:	af c0       	rjmp	.+350    	; 0x1a62 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	a1 f4       	brne	.+40     	; 0x1932 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    190a:	aa e3       	ldi	r26, 0x3A	; 58
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	ea e3       	ldi	r30, 0x3A	; 58
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <GPIO_setupPinDirection+0x8c>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <GPIO_setupPinDirection+0x88>
    192c:	84 2b       	or	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	98 c0       	rjmp	.+304    	; 0x1a62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1932:	aa e3       	ldi	r26, 0x3A	; 58
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ea e3       	ldi	r30, 0x3A	; 58
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <GPIO_setupPinDirection+0xb4>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <GPIO_setupPinDirection+0xb0>
    1954:	80 95       	com	r24
    1956:	84 23       	and	r24, r20
    1958:	8c 93       	st	X, r24
    195a:	83 c0       	rjmp	.+262    	; 0x1a62 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	a1 f4       	brne	.+40     	; 0x198a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1962:	a7 e3       	ldi	r26, 0x37	; 55
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e7 e3       	ldi	r30, 0x37	; 55
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	48 2f       	mov	r20, r24
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <GPIO_setupPinDirection+0xe4>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <GPIO_setupPinDirection+0xe0>
    1984:	84 2b       	or	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	6c c0       	rjmp	.+216    	; 0x1a62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    198a:	a7 e3       	ldi	r26, 0x37	; 55
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e7 e3       	ldi	r30, 0x37	; 55
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <GPIO_setupPinDirection+0x10c>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <GPIO_setupPinDirection+0x108>
    19ac:	80 95       	com	r24
    19ae:	84 23       	and	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	57 c0       	rjmp	.+174    	; 0x1a62 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	a1 f4       	brne	.+40     	; 0x19e2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    19ba:	a4 e3       	ldi	r26, 0x34	; 52
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e4 e3       	ldi	r30, 0x34	; 52
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <GPIO_setupPinDirection+0x13c>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <GPIO_setupPinDirection+0x138>
    19dc:	84 2b       	or	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	40 c0       	rjmp	.+128    	; 0x1a62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19e2:	a4 e3       	ldi	r26, 0x34	; 52
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e4 e3       	ldi	r30, 0x34	; 52
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	48 2f       	mov	r20, r24
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 2e       	mov	r0, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <GPIO_setupPinDirection+0x164>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	0a 94       	dec	r0
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <GPIO_setupPinDirection+0x160>
    1a04:	80 95       	com	r24
    1a06:	84 23       	and	r24, r20
    1a08:	8c 93       	st	X, r24
    1a0a:	2b c0       	rjmp	.+86     	; 0x1a62 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	a1 f4       	brne	.+40     	; 0x1a3a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a12:	a1 e3       	ldi	r26, 0x31	; 49
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e1 e3       	ldi	r30, 0x31	; 49
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <GPIO_setupPinDirection+0x194>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <GPIO_setupPinDirection+0x190>
    1a34:	84 2b       	or	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a3a:	a1 e3       	ldi	r26, 0x31	; 49
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e1 e3       	ldi	r30, 0x31	; 49
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 2e       	mov	r0, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <GPIO_setupPinDirection+0x1bc>
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	0a 94       	dec	r0
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <GPIO_setupPinDirection+0x1b8>
    1a5c:	80 95       	com	r24
    1a5e:	84 23       	and	r24, r20
    1a60:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <GPIO_writePin+0x6>
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <GPIO_writePin+0x8>
    1a7a:	0f 92       	push	r0
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	6a 83       	std	Y+2, r22	; 0x02
    1a84:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	88 30       	cpi	r24, 0x08	; 8
    1a8a:	08 f0       	brcs	.+2      	; 0x1a8e <GPIO_writePin+0x1c>
    1a8c:	d5 c0       	rjmp	.+426    	; 0x1c38 <GPIO_writePin+0x1c6>
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	84 30       	cpi	r24, 0x04	; 4
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <GPIO_writePin+0x24>
    1a94:	d1 c0       	rjmp	.+418    	; 0x1c38 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3d 83       	std	Y+5, r19	; 0x05
    1a9e:	2c 83       	std	Y+4, r18	; 0x04
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <GPIO_writePin+0x3a>
    1aaa:	43 c0       	rjmp	.+134    	; 0x1b32 <GPIO_writePin+0xc0>
    1aac:	2c 81       	ldd	r18, Y+4	; 0x04
    1aae:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab0:	22 30       	cpi	r18, 0x02	; 2
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <GPIO_writePin+0x4e>
    1ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	71 f0       	breq	.+28     	; 0x1ada <GPIO_writePin+0x68>
    1abe:	bc c0       	rjmp	.+376    	; 0x1c38 <GPIO_writePin+0x1c6>
    1ac0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac4:	22 30       	cpi	r18, 0x02	; 2
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <GPIO_writePin+0x5a>
    1aca:	5f c0       	rjmp	.+190    	; 0x1b8a <GPIO_writePin+0x118>
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	83 30       	cpi	r24, 0x03	; 3
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <GPIO_writePin+0x66>
    1ad6:	85 c0       	rjmp	.+266    	; 0x1be2 <GPIO_writePin+0x170>
    1ad8:	af c0       	rjmp	.+350    	; 0x1c38 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	a1 f4       	brne	.+40     	; 0x1b08 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ae0:	ab e3       	ldi	r26, 0x3B	; 59
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	eb e3       	ldi	r30, 0x3B	; 59
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	48 2f       	mov	r20, r24
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 2e       	mov	r0, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <GPIO_writePin+0x8c>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	0a 94       	dec	r0
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <GPIO_writePin+0x88>
    1b02:	84 2b       	or	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	98 c0       	rjmp	.+304    	; 0x1c38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b08:	ab e3       	ldi	r26, 0x3B	; 59
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	eb e3       	ldi	r30, 0x3B	; 59
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <GPIO_writePin+0xb4>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <GPIO_writePin+0xb0>
    1b2a:	80 95       	com	r24
    1b2c:	84 23       	and	r24, r20
    1b2e:	8c 93       	st	X, r24
    1b30:	83 c0       	rjmp	.+262    	; 0x1c38 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	a1 f4       	brne	.+40     	; 0x1b60 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b38:	a8 e3       	ldi	r26, 0x38	; 56
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e8 e3       	ldi	r30, 0x38	; 56
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	02 2e       	mov	r0, r18
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <GPIO_writePin+0xe4>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	0a 94       	dec	r0
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <GPIO_writePin+0xe0>
    1b5a:	84 2b       	or	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	6c c0       	rjmp	.+216    	; 0x1c38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b60:	a8 e3       	ldi	r26, 0x38	; 56
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e8 e3       	ldi	r30, 0x38	; 56
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <GPIO_writePin+0x10c>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <GPIO_writePin+0x108>
    1b82:	80 95       	com	r24
    1b84:	84 23       	and	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	57 c0       	rjmp	.+174    	; 0x1c38 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	a1 f4       	brne	.+40     	; 0x1bb8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b90:	a5 e3       	ldi	r26, 0x35	; 53
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e5 e3       	ldi	r30, 0x35	; 53
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	02 2e       	mov	r0, r18
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <GPIO_writePin+0x13c>
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	0a 94       	dec	r0
    1bb0:	e2 f7       	brpl	.-8      	; 0x1baa <GPIO_writePin+0x138>
    1bb2:	84 2b       	or	r24, r20
    1bb4:	8c 93       	st	X, r24
    1bb6:	40 c0       	rjmp	.+128    	; 0x1c38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1bb8:	a5 e3       	ldi	r26, 0x35	; 53
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e5 e3       	ldi	r30, 0x35	; 53
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 2e       	mov	r0, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <GPIO_writePin+0x164>
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	0a 94       	dec	r0
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <GPIO_writePin+0x160>
    1bda:	80 95       	com	r24
    1bdc:	84 23       	and	r24, r20
    1bde:	8c 93       	st	X, r24
    1be0:	2b c0       	rjmp	.+86     	; 0x1c38 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	a1 f4       	brne	.+40     	; 0x1c10 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1be8:	a2 e3       	ldi	r26, 0x32	; 50
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e2 e3       	ldi	r30, 0x32	; 50
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <GPIO_writePin+0x194>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <GPIO_writePin+0x190>
    1c0a:	84 2b       	or	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	14 c0       	rjmp	.+40     	; 0x1c38 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c10:	a2 e3       	ldi	r26, 0x32	; 50
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e2 e3       	ldi	r30, 0x32	; 50
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	48 2f       	mov	r20, r24
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <GPIO_writePin+0x1bc>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <GPIO_writePin+0x1b8>
    1c32:	80 95       	com	r24
    1c34:	84 23       	and	r24, r20
    1c36:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <GPIO_readPin+0x6>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <GPIO_readPin+0x8>
    1c50:	0f 92       	push	r0
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	8a 83       	std	Y+2, r24	; 0x02
    1c58:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c5a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	88 30       	cpi	r24, 0x08	; 8
    1c60:	08 f0       	brcs	.+2      	; 0x1c64 <GPIO_readPin+0x1c>
    1c62:	84 c0       	rjmp	.+264    	; 0x1d6c <GPIO_readPin+0x124>
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	84 30       	cpi	r24, 0x04	; 4
    1c68:	08 f0       	brcs	.+2      	; 0x1c6c <GPIO_readPin+0x24>
    1c6a:	80 c0       	rjmp	.+256    	; 0x1d6c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	3d 83       	std	Y+5, r19	; 0x05
    1c74:	2c 83       	std	Y+4, r18	; 0x04
    1c76:	4c 81       	ldd	r20, Y+4	; 0x04
    1c78:	5d 81       	ldd	r21, Y+5	; 0x05
    1c7a:	41 30       	cpi	r20, 0x01	; 1
    1c7c:	51 05       	cpc	r21, r1
    1c7e:	79 f1       	breq	.+94     	; 0x1cde <GPIO_readPin+0x96>
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	9d 81       	ldd	r25, Y+5	; 0x05
    1c84:	82 30       	cpi	r24, 0x02	; 2
    1c86:	91 05       	cpc	r25, r1
    1c88:	34 f4       	brge	.+12     	; 0x1c96 <GPIO_readPin+0x4e>
    1c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8e:	21 15       	cp	r18, r1
    1c90:	31 05       	cpc	r19, r1
    1c92:	69 f0       	breq	.+26     	; 0x1cae <GPIO_readPin+0x66>
    1c94:	6b c0       	rjmp	.+214    	; 0x1d6c <GPIO_readPin+0x124>
    1c96:	4c 81       	ldd	r20, Y+4	; 0x04
    1c98:	5d 81       	ldd	r21, Y+5	; 0x05
    1c9a:	42 30       	cpi	r20, 0x02	; 2
    1c9c:	51 05       	cpc	r21, r1
    1c9e:	b9 f1       	breq	.+110    	; 0x1d0e <GPIO_readPin+0xc6>
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca4:	83 30       	cpi	r24, 0x03	; 3
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <GPIO_readPin+0x64>
    1caa:	49 c0       	rjmp	.+146    	; 0x1d3e <GPIO_readPin+0xf6>
    1cac:	5f c0       	rjmp	.+190    	; 0x1d6c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1cae:	e9 e3       	ldi	r30, 0x39	; 57
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a9 01       	movw	r20, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <GPIO_readPin+0x7e>
    1cc2:	55 95       	asr	r21
    1cc4:	47 95       	ror	r20
    1cc6:	8a 95       	dec	r24
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <GPIO_readPin+0x7a>
    1cca:	ca 01       	movw	r24, r20
    1ccc:	81 70       	andi	r24, 0x01	; 1
    1cce:	90 70       	andi	r25, 0x00	; 0
    1cd0:	88 23       	and	r24, r24
    1cd2:	19 f0       	breq	.+6      	; 0x1cda <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	49 c0       	rjmp	.+146    	; 0x1d6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cda:	19 82       	std	Y+1, r1	; 0x01
    1cdc:	47 c0       	rjmp	.+142    	; 0x1d6c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1cde:	e6 e3       	ldi	r30, 0x36	; 54
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a9 01       	movw	r20, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <GPIO_readPin+0xae>
    1cf2:	55 95       	asr	r21
    1cf4:	47 95       	ror	r20
    1cf6:	8a 95       	dec	r24
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <GPIO_readPin+0xaa>
    1cfa:	ca 01       	movw	r24, r20
    1cfc:	81 70       	andi	r24, 0x01	; 1
    1cfe:	90 70       	andi	r25, 0x00	; 0
    1d00:	88 23       	and	r24, r24
    1d02:	19 f0       	breq	.+6      	; 0x1d0a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	31 c0       	rjmp	.+98     	; 0x1d6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d0a:	19 82       	std	Y+1, r1	; 0x01
    1d0c:	2f c0       	rjmp	.+94     	; 0x1d6c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d0e:	e3 e3       	ldi	r30, 0x33	; 51
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	88 2f       	mov	r24, r24
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	a9 01       	movw	r20, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <GPIO_readPin+0xde>
    1d22:	55 95       	asr	r21
    1d24:	47 95       	ror	r20
    1d26:	8a 95       	dec	r24
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <GPIO_readPin+0xda>
    1d2a:	ca 01       	movw	r24, r20
    1d2c:	81 70       	andi	r24, 0x01	; 1
    1d2e:	90 70       	andi	r25, 0x00	; 0
    1d30:	88 23       	and	r24, r24
    1d32:	19 f0       	breq	.+6      	; 0x1d3a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	19 c0       	rjmp	.+50     	; 0x1d6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d3a:	19 82       	std	Y+1, r1	; 0x01
    1d3c:	17 c0       	rjmp	.+46     	; 0x1d6c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d3e:	e0 e3       	ldi	r30, 0x30	; 48
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a9 01       	movw	r20, r18
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <GPIO_readPin+0x10e>
    1d52:	55 95       	asr	r21
    1d54:	47 95       	ror	r20
    1d56:	8a 95       	dec	r24
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <GPIO_readPin+0x10a>
    1d5a:	ca 01       	movw	r24, r20
    1d5c:	81 70       	andi	r24, 0x01	; 1
    1d5e:	90 70       	andi	r25, 0x00	; 0
    1d60:	88 23       	and	r24, r24
    1d62:	19 f0       	breq	.+6      	; 0x1d6a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d6a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <GPIO_setupPortDirection+0x6>
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <GPIO_setupPortDirection+0x8>
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	84 30       	cpi	r24, 0x04	; 4
    1d92:	90 f5       	brcc	.+100    	; 0x1df8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	3c 83       	std	Y+4, r19	; 0x04
    1d9c:	2b 83       	std	Y+3, r18	; 0x03
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	91 05       	cpc	r25, r1
    1da6:	d1 f0       	breq	.+52     	; 0x1ddc <GPIO_setupPortDirection+0x5e>
    1da8:	2b 81       	ldd	r18, Y+3	; 0x03
    1daa:	3c 81       	ldd	r19, Y+4	; 0x04
    1dac:	22 30       	cpi	r18, 0x02	; 2
    1dae:	31 05       	cpc	r19, r1
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <GPIO_setupPortDirection+0x3e>
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	61 f0       	breq	.+24     	; 0x1dd2 <GPIO_setupPortDirection+0x54>
    1dba:	1e c0       	rjmp	.+60     	; 0x1df8 <GPIO_setupPortDirection+0x7a>
    1dbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc0:	22 30       	cpi	r18, 0x02	; 2
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	81 f0       	breq	.+32     	; 0x1de6 <GPIO_setupPortDirection+0x68>
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dca:	83 30       	cpi	r24, 0x03	; 3
    1dcc:	91 05       	cpc	r25, r1
    1dce:	81 f0       	breq	.+32     	; 0x1df0 <GPIO_setupPortDirection+0x72>
    1dd0:	13 c0       	rjmp	.+38     	; 0x1df8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1dd2:	ea e3       	ldi	r30, 0x3A	; 58
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	80 83       	st	Z, r24
    1dda:	0e c0       	rjmp	.+28     	; 0x1df8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ddc:	e7 e3       	ldi	r30, 0x37	; 55
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	80 83       	st	Z, r24
    1de4:	09 c0       	rjmp	.+18     	; 0x1df8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1de6:	e4 e3       	ldi	r30, 0x34	; 52
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	80 83       	st	Z, r24
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1df0:	e1 e3       	ldi	r30, 0x31	; 49
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <GPIO_writePort+0x6>
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <GPIO_writePort+0x8>
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	90 f5       	brcc	.+100    	; 0x1e80 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	3c 83       	std	Y+4, r19	; 0x04
    1e24:	2b 83       	std	Y+3, r18	; 0x03
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	d1 f0       	breq	.+52     	; 0x1e64 <GPIO_writePort+0x5e>
    1e30:	2b 81       	ldd	r18, Y+3	; 0x03
    1e32:	3c 81       	ldd	r19, Y+4	; 0x04
    1e34:	22 30       	cpi	r18, 0x02	; 2
    1e36:	31 05       	cpc	r19, r1
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <GPIO_writePort+0x3e>
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	61 f0       	breq	.+24     	; 0x1e5a <GPIO_writePort+0x54>
    1e42:	1e c0       	rjmp	.+60     	; 0x1e80 <GPIO_writePort+0x7a>
    1e44:	2b 81       	ldd	r18, Y+3	; 0x03
    1e46:	3c 81       	ldd	r19, Y+4	; 0x04
    1e48:	22 30       	cpi	r18, 0x02	; 2
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	81 f0       	breq	.+32     	; 0x1e6e <GPIO_writePort+0x68>
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	9c 81       	ldd	r25, Y+4	; 0x04
    1e52:	83 30       	cpi	r24, 0x03	; 3
    1e54:	91 05       	cpc	r25, r1
    1e56:	81 f0       	breq	.+32     	; 0x1e78 <GPIO_writePort+0x72>
    1e58:	13 c0       	rjmp	.+38     	; 0x1e80 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e5a:	eb e3       	ldi	r30, 0x3B	; 59
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	80 83       	st	Z, r24
    1e62:	0e c0       	rjmp	.+28     	; 0x1e80 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e64:	e8 e3       	ldi	r30, 0x38	; 56
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	80 83       	st	Z, r24
    1e6c:	09 c0       	rjmp	.+18     	; 0x1e80 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e6e:	e5 e3       	ldi	r30, 0x35	; 53
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	80 83       	st	Z, r24
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e78:	e2 e3       	ldi	r30, 0x32	; 50
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <GPIO_readPort+0x6>
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <GPIO_readPort+0x8>
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e9c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	84 30       	cpi	r24, 0x04	; 4
    1ea2:	90 f5       	brcc	.+100    	; 0x1f08 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	3c 83       	std	Y+4, r19	; 0x04
    1eac:	2b 83       	std	Y+3, r18	; 0x03
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb2:	81 30       	cpi	r24, 0x01	; 1
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	d1 f0       	breq	.+52     	; 0x1eec <GPIO_readPort+0x5e>
    1eb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eba:	3c 81       	ldd	r19, Y+4	; 0x04
    1ebc:	22 30       	cpi	r18, 0x02	; 2
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <GPIO_readPort+0x3e>
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	61 f0       	breq	.+24     	; 0x1ee2 <GPIO_readPort+0x54>
    1eca:	1e c0       	rjmp	.+60     	; 0x1f08 <GPIO_readPort+0x7a>
    1ecc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ece:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed0:	22 30       	cpi	r18, 0x02	; 2
    1ed2:	31 05       	cpc	r19, r1
    1ed4:	81 f0       	breq	.+32     	; 0x1ef6 <GPIO_readPort+0x68>
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	83 30       	cpi	r24, 0x03	; 3
    1edc:	91 05       	cpc	r25, r1
    1ede:	81 f0       	breq	.+32     	; 0x1f00 <GPIO_readPort+0x72>
    1ee0:	13 c0       	rjmp	.+38     	; 0x1f08 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ee2:	e9 e3       	ldi	r30, 0x39	; 57
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	0e c0       	rjmp	.+28     	; 0x1f08 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1eec:	e6 e3       	ldi	r30, 0x36	; 54
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	09 c0       	rjmp	.+18     	; 0x1f08 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ef6:	e3 e3       	ldi	r30, 0x33	; 51
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	04 c0       	rjmp	.+8      	; 0x1f08 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f00:	e0 e3       	ldi	r30, 0x30	; 48
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	60 97       	sbiw	r28, 0x10	; 16
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	63 e0       	ldi	r22, 0x03	; 3
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	64 e0       	ldi	r22, 0x04	; 4
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	65 e0       	ldi	r22, 0x05	; 5
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	66 e0       	ldi	r22, 0x06	; 6
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	67 e0       	ldi	r22, 0x07	; 7
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1f7c:	1f 86       	std	Y+15, r1	; 0x0f
    1f7e:	ab c0       	rjmp	.+342    	; 0x20d6 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f84:	41 e0       	ldi	r20, 0x01	; 1
    1f86:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1f94:	18 8a       	std	Y+16, r1	; 0x10
    1f96:	22 c0       	rjmp	.+68     	; 0x1fdc <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1f98:	88 89       	ldd	r24, Y+16	; 0x10
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	9c 5f       	subi	r25, 0xFC	; 252
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	69 2f       	mov	r22, r25
    1fa2:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <GPIO_readPin>
    1fa6:	88 23       	and	r24, r24
    1fa8:	b1 f4       	brne	.+44     	; 0x1fd6 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1faa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	98 2f       	mov	r25, r24
    1fba:	88 89       	ldd	r24, Y+16	; 0x10
    1fbc:	89 0f       	add	r24, r25
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1fc4:	60 96       	adiw	r28, 0x10	; 16
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1fd6:	88 89       	ldd	r24, Y+16	; 0x10
    1fd8:	8f 5f       	subi	r24, 0xFF	; 255
    1fda:	88 8b       	std	Y+16, r24	; 0x10
    1fdc:	88 89       	ldd	r24, Y+16	; 0x10
    1fde:	84 30       	cpi	r24, 0x04	; 4
    1fe0:	d8 f2       	brcs	.-74     	; 0x1f98 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	a0 ea       	ldi	r26, 0xA0	; 160
    1ff2:	b0 e4       	ldi	r27, 0x40	; 64
    1ff4:	8b 87       	std	Y+11, r24	; 0x0b
    1ff6:	9c 87       	std	Y+12, r25	; 0x0c
    1ff8:	ad 87       	std	Y+13, r26	; 0x0d
    1ffa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2000:	8d 85       	ldd	r24, Y+13	; 0x0d
    2002:	9e 85       	ldd	r25, Y+14	; 0x0e
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a ef       	ldi	r20, 0xFA	; 250
    200a:	54 e4       	ldi	r21, 0x44	; 68
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8f 83       	std	Y+7, r24	; 0x07
    2016:	98 87       	std	Y+8, r25	; 0x08
    2018:	a9 87       	std	Y+9, r26	; 0x09
    201a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201c:	6f 81       	ldd	r22, Y+7	; 0x07
    201e:	78 85       	ldd	r23, Y+8	; 0x08
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	2c f4       	brge	.+10     	; 0x203e <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9e 83       	std	Y+6, r25	; 0x06
    203a:	8d 83       	std	Y+5, r24	; 0x05
    203c:	3f c0       	rjmp	.+126    	; 0x20bc <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    203e:	6f 81       	ldd	r22, Y+7	; 0x07
    2040:	78 85       	ldd	r23, Y+8	; 0x08
    2042:	89 85       	ldd	r24, Y+9	; 0x09
    2044:	9a 85       	ldd	r25, Y+10	; 0x0a
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2052:	18 16       	cp	r1, r24
    2054:	4c f5       	brge	.+82     	; 0x20a8 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2056:	6b 85       	ldd	r22, Y+11	; 0x0b
    2058:	7c 85       	ldd	r23, Y+12	; 0x0c
    205a:	8d 85       	ldd	r24, Y+13	; 0x0d
    205c:	9e 85       	ldd	r25, Y+14	; 0x0e
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	51 e4       	ldi	r21, 0x41	; 65
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	0f c0       	rjmp	.+30     	; 0x209e <KEYPAD_getPressedKey+0x186>
    2080:	88 ec       	ldi	r24, 0xC8	; 200
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9c 83       	std	Y+4, r25	; 0x04
    2086:	8b 83       	std	Y+3, r24	; 0x03
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <KEYPAD_getPressedKey+0x174>
    2090:	9c 83       	std	Y+4, r25	; 0x04
    2092:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	69 f7       	brne	.-38     	; 0x2080 <KEYPAD_getPressedKey+0x168>
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a8:	6f 81       	ldd	r22, Y+7	; 0x07
    20aa:	78 85       	ldd	r23, Y+8	; 0x08
    20ac:	89 85       	ldd	r24, Y+9	; 0x09
    20ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	8d 81       	ldd	r24, Y+5	; 0x05
    20be:	9e 81       	ldd	r25, Y+6	; 0x06
    20c0:	9a 83       	std	Y+2, r25	; 0x02
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <KEYPAD_getPressedKey+0x1b0>
    20cc:	9a 83       	std	Y+2, r25	; 0x02
    20ce:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    20d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	8f 87       	std	Y+15, r24	; 0x0f
    20d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d8:	84 30       	cpi	r24, 0x04	; 4
    20da:	08 f4       	brcc	.+2      	; 0x20de <KEYPAD_getPressedKey+0x1c6>
    20dc:	51 cf       	rjmp	.-350    	; 0x1f80 <KEYPAD_getPressedKey+0x68>
    20de:	4e cf       	rjmp	.-356    	; 0x1f7c <KEYPAD_getPressedKey+0x64>

000020e0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    20ee:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	3c 83       	std	Y+4, r19	; 0x04
    20f8:	2b 83       	std	Y+3, r18	; 0x03
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	88 30       	cpi	r24, 0x08	; 8
    2100:	91 05       	cpc	r25, r1
    2102:	09 f4       	brne	.+2      	; 0x2106 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2104:	70 c0       	rjmp	.+224    	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2106:	2b 81       	ldd	r18, Y+3	; 0x03
    2108:	3c 81       	ldd	r19, Y+4	; 0x04
    210a:	29 30       	cpi	r18, 0x09	; 9
    210c:	31 05       	cpc	r19, r1
    210e:	5c f5       	brge	.+86     	; 0x2166 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	84 30       	cpi	r24, 0x04	; 4
    2116:	91 05       	cpc	r25, r1
    2118:	09 f4       	brne	.+2      	; 0x211c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    211a:	59 c0       	rjmp	.+178    	; 0x21ce <KEYPAD_4x4_adjustKeyNumber+0xee>
    211c:	2b 81       	ldd	r18, Y+3	; 0x03
    211e:	3c 81       	ldd	r19, Y+4	; 0x04
    2120:	25 30       	cpi	r18, 0x05	; 5
    2122:	31 05       	cpc	r19, r1
    2124:	9c f4       	brge	.+38     	; 0x214c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	82 30       	cpi	r24, 0x02	; 2
    212c:	91 05       	cpc	r25, r1
    212e:	09 f4       	brne	.+2      	; 0x2132 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2130:	48 c0       	rjmp	.+144    	; 0x21c2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2132:	2b 81       	ldd	r18, Y+3	; 0x03
    2134:	3c 81       	ldd	r19, Y+4	; 0x04
    2136:	23 30       	cpi	r18, 0x03	; 3
    2138:	31 05       	cpc	r19, r1
    213a:	0c f0       	brlt	.+2      	; 0x213e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    213c:	45 c0       	rjmp	.+138    	; 0x21c8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	91 05       	cpc	r25, r1
    2146:	09 f4       	brne	.+2      	; 0x214a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2148:	39 c0       	rjmp	.+114    	; 0x21bc <KEYPAD_4x4_adjustKeyNumber+0xdc>
    214a:	67 c0       	rjmp	.+206    	; 0x221a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    214c:	2b 81       	ldd	r18, Y+3	; 0x03
    214e:	3c 81       	ldd	r19, Y+4	; 0x04
    2150:	26 30       	cpi	r18, 0x06	; 6
    2152:	31 05       	cpc	r19, r1
    2154:	09 f4       	brne	.+2      	; 0x2158 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2156:	41 c0       	rjmp	.+130    	; 0x21da <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	87 30       	cpi	r24, 0x07	; 7
    215e:	91 05       	cpc	r25, r1
    2160:	0c f0       	brlt	.+2      	; 0x2164 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2162:	3e c0       	rjmp	.+124    	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2164:	37 c0       	rjmp	.+110    	; 0x21d4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2166:	2b 81       	ldd	r18, Y+3	; 0x03
    2168:	3c 81       	ldd	r19, Y+4	; 0x04
    216a:	2c 30       	cpi	r18, 0x0C	; 12
    216c:	31 05       	cpc	r19, r1
    216e:	09 f4       	brne	.+2      	; 0x2172 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2170:	46 c0       	rjmp	.+140    	; 0x21fe <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	8d 30       	cpi	r24, 0x0D	; 13
    2178:	91 05       	cpc	r25, r1
    217a:	5c f4       	brge	.+22     	; 0x2192 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    217c:	2b 81       	ldd	r18, Y+3	; 0x03
    217e:	3c 81       	ldd	r19, Y+4	; 0x04
    2180:	2a 30       	cpi	r18, 0x0A	; 10
    2182:	31 05       	cpc	r19, r1
    2184:	b1 f1       	breq	.+108    	; 0x21f2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	8b 30       	cpi	r24, 0x0B	; 11
    218c:	91 05       	cpc	r25, r1
    218e:	a4 f5       	brge	.+104    	; 0x21f8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2190:	2d c0       	rjmp	.+90     	; 0x21ec <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2192:	2b 81       	ldd	r18, Y+3	; 0x03
    2194:	3c 81       	ldd	r19, Y+4	; 0x04
    2196:	2e 30       	cpi	r18, 0x0E	; 14
    2198:	31 05       	cpc	r19, r1
    219a:	b9 f1       	breq	.+110    	; 0x220a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	9c 81       	ldd	r25, Y+4	; 0x04
    21a0:	8e 30       	cpi	r24, 0x0E	; 14
    21a2:	91 05       	cpc	r25, r1
    21a4:	7c f1       	brlt	.+94     	; 0x2204 <KEYPAD_4x4_adjustKeyNumber+0x124>
    21a6:	2b 81       	ldd	r18, Y+3	; 0x03
    21a8:	3c 81       	ldd	r19, Y+4	; 0x04
    21aa:	2f 30       	cpi	r18, 0x0F	; 15
    21ac:	31 05       	cpc	r19, r1
    21ae:	79 f1       	breq	.+94     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	80 31       	cpi	r24, 0x10	; 16
    21b6:	91 05       	cpc	r25, r1
    21b8:	69 f1       	breq	.+90     	; 0x2214 <KEYPAD_4x4_adjustKeyNumber+0x134>
    21ba:	2f c0       	rjmp	.+94     	; 0x221a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    21bc:	87 e0       	ldi	r24, 0x07	; 7
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	2e c0       	rjmp	.+92     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    21c2:	88 e0       	ldi	r24, 0x08	; 8
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	2b c0       	rjmp	.+86     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    21c8:	89 e0       	ldi	r24, 0x09	; 9
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	28 c0       	rjmp	.+80     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    21ce:	85 e2       	ldi	r24, 0x25	; 37
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	25 c0       	rjmp	.+74     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    21d4:	84 e0       	ldi	r24, 0x04	; 4
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	22 c0       	rjmp	.+68     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    21da:	85 e0       	ldi	r24, 0x05	; 5
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	1f c0       	rjmp	.+62     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    21e0:	86 e0       	ldi	r24, 0x06	; 6
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	1c c0       	rjmp	.+56     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    21e6:	8a e2       	ldi	r24, 0x2A	; 42
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	19 c0       	rjmp	.+50     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	16 c0       	rjmp	.+44     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    21f2:	82 e0       	ldi	r24, 0x02	; 2
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	13 c0       	rjmp	.+38     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    21f8:	83 e0       	ldi	r24, 0x03	; 3
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	10 c0       	rjmp	.+32     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    21fe:	8d e2       	ldi	r24, 0x2D	; 45
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	0d c0       	rjmp	.+26     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = ' ';  /* ASCII of Enter */
    2204:	80 e2       	ldi	r24, 0x20	; 32
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	0a c0       	rjmp	.+20     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    220a:	19 82       	std	Y+1, r1	; 0x01
    220c:	08 c0       	rjmp	.+16     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    220e:	8d e3       	ldi	r24, 0x3D	; 61
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	05 c0       	rjmp	.+10     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2214:	8b e2       	ldi	r24, 0x2B	; 43
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	02 c0       	rjmp	.+4      	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    221e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	2e 97       	sbiw	r28, 0x0e	; 14
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2242:	82 e0       	ldi	r24, 0x02	; 2
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	41 e0       	ldi	r20, 0x01	; 1
    2248:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    224c:	82 e0       	ldi	r24, 0x02	; 2
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_setupPinDirection>
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 ea       	ldi	r26, 0xA0	; 160
    225c:	b1 e4       	ldi	r27, 0x41	; 65
    225e:	8b 87       	std	Y+11, r24	; 0x0b
    2260:	9c 87       	std	Y+12, r25	; 0x0c
    2262:	ad 87       	std	Y+13, r26	; 0x0d
    2264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2266:	6b 85       	ldd	r22, Y+11	; 0x0b
    2268:	7c 85       	ldd	r23, Y+12	; 0x0c
    226a:	8d 85       	ldd	r24, Y+13	; 0x0d
    226c:	9e 85       	ldd	r25, Y+14	; 0x0e
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a ef       	ldi	r20, 0xFA	; 250
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8f 83       	std	Y+7, r24	; 0x07
    2280:	98 87       	std	Y+8, r25	; 0x08
    2282:	a9 87       	std	Y+9, r26	; 0x09
    2284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2286:	6f 81       	ldd	r22, Y+7	; 0x07
    2288:	78 85       	ldd	r23, Y+8	; 0x08
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	2c f4       	brge	.+10     	; 0x22a8 <LCD_init+0x7a>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	3f c0       	rjmp	.+126    	; 0x2326 <LCD_init+0xf8>
	else if (__tmp > 65535)
    22a8:	6f 81       	ldd	r22, Y+7	; 0x07
    22aa:	78 85       	ldd	r23, Y+8	; 0x08
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	4c f5       	brge	.+82     	; 0x2312 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	51 e4       	ldi	r21, 0x41	; 65
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <LCD_init+0xda>
    22ea:	88 ec       	ldi	r24, 0xC8	; 200
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_init+0xc8>
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	69 f7       	brne	.-38     	; 0x22ea <LCD_init+0xbc>
    2310:	14 c0       	rjmp	.+40     	; 0x233a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	6f 81       	ldd	r22, Y+7	; 0x07
    2314:	78 85       	ldd	r23, Y+8	; 0x08
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <LCD_init+0x104>
    2336:	9a 83       	std	Y+2, r25	; 0x02
    2338:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	6f ef       	ldi	r22, 0xFF	; 255
    233e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2342:	88 e3       	ldi	r24, 0x38	; 56
    2344:	0e 94 b3 11 	call	0x2366	; 0x2366 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2348:	8c e0       	ldi	r24, 0x0C	; 12
    234a:	0e 94 b3 11 	call	0x2366	; 0x2366 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	0e 94 b3 11 	call	0x2366	; 0x2366 <LCD_sendCommand>
}
    2354:	2e 96       	adiw	r28, 0x0e	; 14
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	e9 97       	sbiw	r28, 0x39	; 57
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <GPIO_writePin>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	a0 e8       	ldi	r26, 0x80	; 128
    238c:	bf e3       	ldi	r27, 0x3F	; 63
    238e:	8d ab       	std	Y+53, r24	; 0x35
    2390:	9e ab       	std	Y+54, r25	; 0x36
    2392:	af ab       	std	Y+55, r26	; 0x37
    2394:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2396:	6d a9       	ldd	r22, Y+53	; 0x35
    2398:	7e a9       	ldd	r23, Y+54	; 0x36
    239a:	8f a9       	ldd	r24, Y+55	; 0x37
    239c:	98 ad       	ldd	r25, Y+56	; 0x38
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4a ef       	ldi	r20, 0xFA	; 250
    23a4:	54 e4       	ldi	r21, 0x44	; 68
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	89 ab       	std	Y+49, r24	; 0x31
    23b0:	9a ab       	std	Y+50, r25	; 0x32
    23b2:	ab ab       	std	Y+51, r26	; 0x33
    23b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23b6:	69 a9       	ldd	r22, Y+49	; 0x31
    23b8:	7a a9       	ldd	r23, Y+50	; 0x32
    23ba:	8b a9       	ldd	r24, Y+51	; 0x33
    23bc:	9c a9       	ldd	r25, Y+52	; 0x34
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e8       	ldi	r20, 0x80	; 128
    23c4:	5f e3       	ldi	r21, 0x3F	; 63
    23c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ca:	88 23       	and	r24, r24
    23cc:	2c f4       	brge	.+10     	; 0x23d8 <LCD_sendCommand+0x72>
		__ticks = 1;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	98 ab       	std	Y+48, r25	; 0x30
    23d4:	8f a7       	std	Y+47, r24	; 0x2f
    23d6:	3f c0       	rjmp	.+126    	; 0x2456 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    23d8:	69 a9       	ldd	r22, Y+49	; 0x31
    23da:	7a a9       	ldd	r23, Y+50	; 0x32
    23dc:	8b a9       	ldd	r24, Y+51	; 0x33
    23de:	9c a9       	ldd	r25, Y+52	; 0x34
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	3f ef       	ldi	r19, 0xFF	; 255
    23e4:	4f e7       	ldi	r20, 0x7F	; 127
    23e6:	57 e4       	ldi	r21, 0x47	; 71
    23e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	4c f5       	brge	.+82     	; 0x2442 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f0:	6d a9       	ldd	r22, Y+53	; 0x35
    23f2:	7e a9       	ldd	r23, Y+54	; 0x36
    23f4:	8f a9       	ldd	r24, Y+55	; 0x37
    23f6:	98 ad       	ldd	r25, Y+56	; 0x38
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e2       	ldi	r20, 0x20	; 32
    23fe:	51 e4       	ldi	r21, 0x41	; 65
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	98 ab       	std	Y+48, r25	; 0x30
    2416:	8f a7       	std	Y+47, r24	; 0x2f
    2418:	0f c0       	rjmp	.+30     	; 0x2438 <LCD_sendCommand+0xd2>
    241a:	88 ec       	ldi	r24, 0xC8	; 200
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9e a7       	std	Y+46, r25	; 0x2e
    2420:	8d a7       	std	Y+45, r24	; 0x2d
    2422:	8d a5       	ldd	r24, Y+45	; 0x2d
    2424:	9e a5       	ldd	r25, Y+46	; 0x2e
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_sendCommand+0xc0>
    242a:	9e a7       	std	Y+46, r25	; 0x2e
    242c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2430:	98 a9       	ldd	r25, Y+48	; 0x30
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	98 ab       	std	Y+48, r25	; 0x30
    2436:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2438:	8f a5       	ldd	r24, Y+47	; 0x2f
    243a:	98 a9       	ldd	r25, Y+48	; 0x30
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	69 f7       	brne	.-38     	; 0x241a <LCD_sendCommand+0xb4>
    2440:	14 c0       	rjmp	.+40     	; 0x246a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2442:	69 a9       	ldd	r22, Y+49	; 0x31
    2444:	7a a9       	ldd	r23, Y+50	; 0x32
    2446:	8b a9       	ldd	r24, Y+51	; 0x33
    2448:	9c a9       	ldd	r25, Y+52	; 0x34
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	98 ab       	std	Y+48, r25	; 0x30
    2454:	8f a7       	std	Y+47, r24	; 0x2f
    2456:	8f a5       	ldd	r24, Y+47	; 0x2f
    2458:	98 a9       	ldd	r25, Y+48	; 0x30
    245a:	9c a7       	std	Y+44, r25	; 0x2c
    245c:	8b a7       	std	Y+43, r24	; 0x2b
    245e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2460:	9c a5       	ldd	r25, Y+44	; 0x2c
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <LCD_sendCommand+0xfc>
    2466:	9c a7       	std	Y+44, r25	; 0x2c
    2468:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <GPIO_writePin>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e8       	ldi	r26, 0x80	; 128
    247a:	bf e3       	ldi	r27, 0x3F	; 63
    247c:	8f a3       	std	Y+39, r24	; 0x27
    247e:	98 a7       	std	Y+40, r25	; 0x28
    2480:	a9 a7       	std	Y+41, r26	; 0x29
    2482:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2484:	6f a1       	ldd	r22, Y+39	; 0x27
    2486:	78 a5       	ldd	r23, Y+40	; 0x28
    2488:	89 a5       	ldd	r24, Y+41	; 0x29
    248a:	9a a5       	ldd	r25, Y+42	; 0x2a
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a ef       	ldi	r20, 0xFA	; 250
    2492:	54 e4       	ldi	r21, 0x44	; 68
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8b a3       	std	Y+35, r24	; 0x23
    249e:	9c a3       	std	Y+36, r25	; 0x24
    24a0:	ad a3       	std	Y+37, r26	; 0x25
    24a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24a4:	6b a1       	ldd	r22, Y+35	; 0x23
    24a6:	7c a1       	ldd	r23, Y+36	; 0x24
    24a8:	8d a1       	ldd	r24, Y+37	; 0x25
    24aa:	9e a1       	ldd	r25, Y+38	; 0x26
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <LCD_sendCommand+0x160>
		__ticks = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9a a3       	std	Y+34, r25	; 0x22
    24c2:	89 a3       	std	Y+33, r24	; 0x21
    24c4:	3f c0       	rjmp	.+126    	; 0x2544 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    24c6:	6b a1       	ldd	r22, Y+35	; 0x23
    24c8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ca:	8d a1       	ldd	r24, Y+37	; 0x25
    24cc:	9e a1       	ldd	r25, Y+38	; 0x26
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	4c f5       	brge	.+82     	; 0x2530 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24de:	6f a1       	ldd	r22, Y+39	; 0x27
    24e0:	78 a5       	ldd	r23, Y+40	; 0x28
    24e2:	89 a5       	ldd	r24, Y+41	; 0x29
    24e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	51 e4       	ldi	r21, 0x41	; 65
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9a a3       	std	Y+34, r25	; 0x22
    2504:	89 a3       	std	Y+33, r24	; 0x21
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <LCD_sendCommand+0x1c0>
    2508:	88 ec       	ldi	r24, 0xC8	; 200
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	98 a3       	std	Y+32, r25	; 0x20
    250e:	8f 8f       	std	Y+31, r24	; 0x1f
    2510:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2512:	98 a1       	ldd	r25, Y+32	; 0x20
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_sendCommand+0x1ae>
    2518:	98 a3       	std	Y+32, r25	; 0x20
    251a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	89 a1       	ldd	r24, Y+33	; 0x21
    251e:	9a a1       	ldd	r25, Y+34	; 0x22
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	9a a3       	std	Y+34, r25	; 0x22
    2524:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	89 a1       	ldd	r24, Y+33	; 0x21
    2528:	9a a1       	ldd	r25, Y+34	; 0x22
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f7       	brne	.-38     	; 0x2508 <LCD_sendCommand+0x1a2>
    252e:	14 c0       	rjmp	.+40     	; 0x2558 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2530:	6b a1       	ldd	r22, Y+35	; 0x23
    2532:	7c a1       	ldd	r23, Y+36	; 0x24
    2534:	8d a1       	ldd	r24, Y+37	; 0x25
    2536:	9e a1       	ldd	r25, Y+38	; 0x26
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9a a3       	std	Y+34, r25	; 0x22
    2542:	89 a3       	std	Y+33, r24	; 0x21
    2544:	89 a1       	ldd	r24, Y+33	; 0x21
    2546:	9a a1       	ldd	r25, Y+34	; 0x22
    2548:	9e 8f       	std	Y+30, r25	; 0x1e
    254a:	8d 8f       	std	Y+29, r24	; 0x1d
    254c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    254e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_sendCommand+0x1ea>
    2554:	9e 8f       	std	Y+30, r25	; 0x1e
    2556:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	69 ad       	ldd	r22, Y+57	; 0x39
    255c:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <GPIO_writePort>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a0 e8       	ldi	r26, 0x80	; 128
    2566:	bf e3       	ldi	r27, 0x3F	; 63
    2568:	89 8f       	std	Y+25, r24	; 0x19
    256a:	9a 8f       	std	Y+26, r25	; 0x1a
    256c:	ab 8f       	std	Y+27, r26	; 0x1b
    256e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2570:	69 8d       	ldd	r22, Y+25	; 0x19
    2572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a ef       	ldi	r20, 0xFA	; 250
    257e:	54 e4       	ldi	r21, 0x44	; 68
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	8d 8b       	std	Y+21, r24	; 0x15
    258a:	9e 8b       	std	Y+22, r25	; 0x16
    258c:	af 8b       	std	Y+23, r26	; 0x17
    258e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2590:	6d 89       	ldd	r22, Y+21	; 0x15
    2592:	7e 89       	ldd	r23, Y+22	; 0x16
    2594:	8f 89       	ldd	r24, Y+23	; 0x17
    2596:	98 8d       	ldd	r25, Y+24	; 0x18
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <LCD_sendCommand+0x24c>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9c 8b       	std	Y+20, r25	; 0x14
    25ae:	8b 8b       	std	Y+19, r24	; 0x13
    25b0:	3f c0       	rjmp	.+126    	; 0x2630 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    25b2:	6d 89       	ldd	r22, Y+21	; 0x15
    25b4:	7e 89       	ldd	r23, Y+22	; 0x16
    25b6:	8f 89       	ldd	r24, Y+23	; 0x17
    25b8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	3f ef       	ldi	r19, 0xFF	; 255
    25be:	4f e7       	ldi	r20, 0x7F	; 127
    25c0:	57 e4       	ldi	r21, 0x47	; 71
    25c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c6:	18 16       	cp	r1, r24
    25c8:	4c f5       	brge	.+82     	; 0x261c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ca:	69 8d       	ldd	r22, Y+25	; 0x19
    25cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e2       	ldi	r20, 0x20	; 32
    25d8:	51 e4       	ldi	r21, 0x41	; 65
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9c 8b       	std	Y+20, r25	; 0x14
    25f0:	8b 8b       	std	Y+19, r24	; 0x13
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <LCD_sendCommand+0x2ac>
    25f4:	88 ec       	ldi	r24, 0xC8	; 200
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9a 8b       	std	Y+18, r25	; 0x12
    25fa:	89 8b       	std	Y+17, r24	; 0x11
    25fc:	89 89       	ldd	r24, Y+17	; 0x11
    25fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_sendCommand+0x29a>
    2604:	9a 8b       	std	Y+18, r25	; 0x12
    2606:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	8b 89       	ldd	r24, Y+19	; 0x13
    260a:	9c 89       	ldd	r25, Y+20	; 0x14
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	9c 8b       	std	Y+20, r25	; 0x14
    2610:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	8b 89       	ldd	r24, Y+19	; 0x13
    2614:	9c 89       	ldd	r25, Y+20	; 0x14
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	69 f7       	brne	.-38     	; 0x25f4 <LCD_sendCommand+0x28e>
    261a:	14 c0       	rjmp	.+40     	; 0x2644 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	6d 89       	ldd	r22, Y+21	; 0x15
    261e:	7e 89       	ldd	r23, Y+22	; 0x16
    2620:	8f 89       	ldd	r24, Y+23	; 0x17
    2622:	98 8d       	ldd	r25, Y+24	; 0x18
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9c 8b       	std	Y+20, r25	; 0x14
    262e:	8b 8b       	std	Y+19, r24	; 0x13
    2630:	8b 89       	ldd	r24, Y+19	; 0x13
    2632:	9c 89       	ldd	r25, Y+20	; 0x14
    2634:	98 8b       	std	Y+16, r25	; 0x10
    2636:	8f 87       	std	Y+15, r24	; 0x0f
    2638:	8f 85       	ldd	r24, Y+15	; 0x0f
    263a:	98 89       	ldd	r25, Y+16	; 0x10
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_sendCommand+0x2d6>
    2640:	98 8b       	std	Y+16, r25	; 0x10
    2642:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	61 e0       	ldi	r22, 0x01	; 1
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <GPIO_writePin>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 e8       	ldi	r26, 0x80	; 128
    2654:	bf e3       	ldi	r27, 0x3F	; 63
    2656:	8b 87       	std	Y+11, r24	; 0x0b
    2658:	9c 87       	std	Y+12, r25	; 0x0c
    265a:	ad 87       	std	Y+13, r26	; 0x0d
    265c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2660:	7c 85       	ldd	r23, Y+12	; 0x0c
    2662:	8d 85       	ldd	r24, Y+13	; 0x0d
    2664:	9e 85       	ldd	r25, Y+14	; 0x0e
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a ef       	ldi	r20, 0xFA	; 250
    266c:	54 e4       	ldi	r21, 0x44	; 68
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8f 83       	std	Y+7, r24	; 0x07
    2678:	98 87       	std	Y+8, r25	; 0x08
    267a:	a9 87       	std	Y+9, r26	; 0x09
    267c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    267e:	6f 81       	ldd	r22, Y+7	; 0x07
    2680:	78 85       	ldd	r23, Y+8	; 0x08
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	2c f4       	brge	.+10     	; 0x26a0 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9e 83       	std	Y+6, r25	; 0x06
    269c:	8d 83       	std	Y+5, r24	; 0x05
    269e:	3f c0       	rjmp	.+126    	; 0x271e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	4c f5       	brge	.+82     	; 0x270a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    26bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26be:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <LCD_sendCommand+0x39a>
    26e2:	88 ec       	ldi	r24, 0xC8	; 200
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	8b 83       	std	Y+3, r24	; 0x03
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_sendCommand+0x388>
    26f2:	9c 83       	std	Y+4, r25	; 0x04
    26f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f7       	brne	.-38     	; 0x26e2 <LCD_sendCommand+0x37c>
    2708:	14 c0       	rjmp	.+40     	; 0x2732 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_sendCommand+0x3c4>
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2732:	e9 96       	adiw	r28, 0x39	; 57
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	e9 97       	sbiw	r28, 0x39	; 57
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    275a:	82 e0       	ldi	r24, 0x02	; 2
    275c:	60 e0       	ldi	r22, 0x00	; 0
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <GPIO_writePin>
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a0 e8       	ldi	r26, 0x80	; 128
    276a:	bf e3       	ldi	r27, 0x3F	; 63
    276c:	8d ab       	std	Y+53, r24	; 0x35
    276e:	9e ab       	std	Y+54, r25	; 0x36
    2770:	af ab       	std	Y+55, r26	; 0x37
    2772:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2774:	6d a9       	ldd	r22, Y+53	; 0x35
    2776:	7e a9       	ldd	r23, Y+54	; 0x36
    2778:	8f a9       	ldd	r24, Y+55	; 0x37
    277a:	98 ad       	ldd	r25, Y+56	; 0x38
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	4a ef       	ldi	r20, 0xFA	; 250
    2782:	54 e4       	ldi	r21, 0x44	; 68
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	89 ab       	std	Y+49, r24	; 0x31
    278e:	9a ab       	std	Y+50, r25	; 0x32
    2790:	ab ab       	std	Y+51, r26	; 0x33
    2792:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2794:	69 a9       	ldd	r22, Y+49	; 0x31
    2796:	7a a9       	ldd	r23, Y+50	; 0x32
    2798:	8b a9       	ldd	r24, Y+51	; 0x33
    279a:	9c a9       	ldd	r25, Y+52	; 0x34
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e8       	ldi	r20, 0x80	; 128
    27a2:	5f e3       	ldi	r21, 0x3F	; 63
    27a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	2c f4       	brge	.+10     	; 0x27b6 <LCD_displayCharacter+0x72>
		__ticks = 1;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	98 ab       	std	Y+48, r25	; 0x30
    27b2:	8f a7       	std	Y+47, r24	; 0x2f
    27b4:	3f c0       	rjmp	.+126    	; 0x2834 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    27b6:	69 a9       	ldd	r22, Y+49	; 0x31
    27b8:	7a a9       	ldd	r23, Y+50	; 0x32
    27ba:	8b a9       	ldd	r24, Y+51	; 0x33
    27bc:	9c a9       	ldd	r25, Y+52	; 0x34
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	4c f5       	brge	.+82     	; 0x2820 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	6d a9       	ldd	r22, Y+53	; 0x35
    27d0:	7e a9       	ldd	r23, Y+54	; 0x36
    27d2:	8f a9       	ldd	r24, Y+55	; 0x37
    27d4:	98 ad       	ldd	r25, Y+56	; 0x38
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	98 ab       	std	Y+48, r25	; 0x30
    27f4:	8f a7       	std	Y+47, r24	; 0x2f
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <LCD_displayCharacter+0xd2>
    27f8:	88 ec       	ldi	r24, 0xC8	; 200
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9e a7       	std	Y+46, r25	; 0x2e
    27fe:	8d a7       	std	Y+45, r24	; 0x2d
    2800:	8d a5       	ldd	r24, Y+45	; 0x2d
    2802:	9e a5       	ldd	r25, Y+46	; 0x2e
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <LCD_displayCharacter+0xc0>
    2808:	9e a7       	std	Y+46, r25	; 0x2e
    280a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280c:	8f a5       	ldd	r24, Y+47	; 0x2f
    280e:	98 a9       	ldd	r25, Y+48	; 0x30
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	98 ab       	std	Y+48, r25	; 0x30
    2814:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	8f a5       	ldd	r24, Y+47	; 0x2f
    2818:	98 a9       	ldd	r25, Y+48	; 0x30
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	69 f7       	brne	.-38     	; 0x27f8 <LCD_displayCharacter+0xb4>
    281e:	14 c0       	rjmp	.+40     	; 0x2848 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	69 a9       	ldd	r22, Y+49	; 0x31
    2822:	7a a9       	ldd	r23, Y+50	; 0x32
    2824:	8b a9       	ldd	r24, Y+51	; 0x33
    2826:	9c a9       	ldd	r25, Y+52	; 0x34
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	98 ab       	std	Y+48, r25	; 0x30
    2832:	8f a7       	std	Y+47, r24	; 0x2f
    2834:	8f a5       	ldd	r24, Y+47	; 0x2f
    2836:	98 a9       	ldd	r25, Y+48	; 0x30
    2838:	9c a7       	std	Y+44, r25	; 0x2c
    283a:	8b a7       	std	Y+43, r24	; 0x2b
    283c:	8b a5       	ldd	r24, Y+43	; 0x2b
    283e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <LCD_displayCharacter+0xfc>
    2844:	9c a7       	std	Y+44, r25	; 0x2c
    2846:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2848:	82 e0       	ldi	r24, 0x02	; 2
    284a:	61 e0       	ldi	r22, 0x01	; 1
    284c:	41 e0       	ldi	r20, 0x01	; 1
    284e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <GPIO_writePin>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 e8       	ldi	r26, 0x80	; 128
    2858:	bf e3       	ldi	r27, 0x3F	; 63
    285a:	8f a3       	std	Y+39, r24	; 0x27
    285c:	98 a7       	std	Y+40, r25	; 0x28
    285e:	a9 a7       	std	Y+41, r26	; 0x29
    2860:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2862:	6f a1       	ldd	r22, Y+39	; 0x27
    2864:	78 a5       	ldd	r23, Y+40	; 0x28
    2866:	89 a5       	ldd	r24, Y+41	; 0x29
    2868:	9a a5       	ldd	r25, Y+42	; 0x2a
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a ef       	ldi	r20, 0xFA	; 250
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8b a3       	std	Y+35, r24	; 0x23
    287c:	9c a3       	std	Y+36, r25	; 0x24
    287e:	ad a3       	std	Y+37, r26	; 0x25
    2880:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2882:	6b a1       	ldd	r22, Y+35	; 0x23
    2884:	7c a1       	ldd	r23, Y+36	; 0x24
    2886:	8d a1       	ldd	r24, Y+37	; 0x25
    2888:	9e a1       	ldd	r25, Y+38	; 0x26
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	2c f4       	brge	.+10     	; 0x28a4 <LCD_displayCharacter+0x160>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9a a3       	std	Y+34, r25	; 0x22
    28a0:	89 a3       	std	Y+33, r24	; 0x21
    28a2:	3f c0       	rjmp	.+126    	; 0x2922 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    28a4:	6b a1       	ldd	r22, Y+35	; 0x23
    28a6:	7c a1       	ldd	r23, Y+36	; 0x24
    28a8:	8d a1       	ldd	r24, Y+37	; 0x25
    28aa:	9e a1       	ldd	r25, Y+38	; 0x26
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	57 e4       	ldi	r21, 0x47	; 71
    28b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	4c f5       	brge	.+82     	; 0x290e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28bc:	6f a1       	ldd	r22, Y+39	; 0x27
    28be:	78 a5       	ldd	r23, Y+40	; 0x28
    28c0:	89 a5       	ldd	r24, Y+41	; 0x29
    28c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9a a3       	std	Y+34, r25	; 0x22
    28e2:	89 a3       	std	Y+33, r24	; 0x21
    28e4:	0f c0       	rjmp	.+30     	; 0x2904 <LCD_displayCharacter+0x1c0>
    28e6:	88 ec       	ldi	r24, 0xC8	; 200
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	98 a3       	std	Y+32, r25	; 0x20
    28ec:	8f 8f       	std	Y+31, r24	; 0x1f
    28ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f0:	98 a1       	ldd	r25, Y+32	; 0x20
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <LCD_displayCharacter+0x1ae>
    28f6:	98 a3       	std	Y+32, r25	; 0x20
    28f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	89 a1       	ldd	r24, Y+33	; 0x21
    28fc:	9a a1       	ldd	r25, Y+34	; 0x22
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	9a a3       	std	Y+34, r25	; 0x22
    2902:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	89 a1       	ldd	r24, Y+33	; 0x21
    2906:	9a a1       	ldd	r25, Y+34	; 0x22
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	69 f7       	brne	.-38     	; 0x28e6 <LCD_displayCharacter+0x1a2>
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	6b a1       	ldd	r22, Y+35	; 0x23
    2910:	7c a1       	ldd	r23, Y+36	; 0x24
    2912:	8d a1       	ldd	r24, Y+37	; 0x25
    2914:	9e a1       	ldd	r25, Y+38	; 0x26
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9a a3       	std	Y+34, r25	; 0x22
    2920:	89 a3       	std	Y+33, r24	; 0x21
    2922:	89 a1       	ldd	r24, Y+33	; 0x21
    2924:	9a a1       	ldd	r25, Y+34	; 0x22
    2926:	9e 8f       	std	Y+30, r25	; 0x1e
    2928:	8d 8f       	std	Y+29, r24	; 0x1d
    292a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    292c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <LCD_displayCharacter+0x1ea>
    2932:	9e 8f       	std	Y+30, r25	; 0x1e
    2934:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	69 ad       	ldd	r22, Y+57	; 0x39
    293a:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <GPIO_writePort>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	a0 e8       	ldi	r26, 0x80	; 128
    2944:	bf e3       	ldi	r27, 0x3F	; 63
    2946:	89 8f       	std	Y+25, r24	; 0x19
    2948:	9a 8f       	std	Y+26, r25	; 0x1a
    294a:	ab 8f       	std	Y+27, r26	; 0x1b
    294c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294e:	69 8d       	ldd	r22, Y+25	; 0x19
    2950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	4a ef       	ldi	r20, 0xFA	; 250
    295c:	54 e4       	ldi	r21, 0x44	; 68
    295e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	8d 8b       	std	Y+21, r24	; 0x15
    2968:	9e 8b       	std	Y+22, r25	; 0x16
    296a:	af 8b       	std	Y+23, r26	; 0x17
    296c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    296e:	6d 89       	ldd	r22, Y+21	; 0x15
    2970:	7e 89       	ldd	r23, Y+22	; 0x16
    2972:	8f 89       	ldd	r24, Y+23	; 0x17
    2974:	98 8d       	ldd	r25, Y+24	; 0x18
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e8       	ldi	r20, 0x80	; 128
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2982:	88 23       	and	r24, r24
    2984:	2c f4       	brge	.+10     	; 0x2990 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9c 8b       	std	Y+20, r25	; 0x14
    298c:	8b 8b       	std	Y+19, r24	; 0x13
    298e:	3f c0       	rjmp	.+126    	; 0x2a0e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2990:	6d 89       	ldd	r22, Y+21	; 0x15
    2992:	7e 89       	ldd	r23, Y+22	; 0x16
    2994:	8f 89       	ldd	r24, Y+23	; 0x17
    2996:	98 8d       	ldd	r25, Y+24	; 0x18
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	3f ef       	ldi	r19, 0xFF	; 255
    299c:	4f e7       	ldi	r20, 0x7F	; 127
    299e:	57 e4       	ldi	r21, 0x47	; 71
    29a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29a4:	18 16       	cp	r1, r24
    29a6:	4c f5       	brge	.+82     	; 0x29fa <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a8:	69 8d       	ldd	r22, Y+25	; 0x19
    29aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e2       	ldi	r20, 0x20	; 32
    29b6:	51 e4       	ldi	r21, 0x41	; 65
    29b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	9c 8b       	std	Y+20, r25	; 0x14
    29ce:	8b 8b       	std	Y+19, r24	; 0x13
    29d0:	0f c0       	rjmp	.+30     	; 0x29f0 <LCD_displayCharacter+0x2ac>
    29d2:	88 ec       	ldi	r24, 0xC8	; 200
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9a 8b       	std	Y+18, r25	; 0x12
    29d8:	89 8b       	std	Y+17, r24	; 0x11
    29da:	89 89       	ldd	r24, Y+17	; 0x11
    29dc:	9a 89       	ldd	r25, Y+18	; 0x12
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <LCD_displayCharacter+0x29a>
    29e2:	9a 8b       	std	Y+18, r25	; 0x12
    29e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e6:	8b 89       	ldd	r24, Y+19	; 0x13
    29e8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	9c 8b       	std	Y+20, r25	; 0x14
    29ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	8b 89       	ldd	r24, Y+19	; 0x13
    29f2:	9c 89       	ldd	r25, Y+20	; 0x14
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	69 f7       	brne	.-38     	; 0x29d2 <LCD_displayCharacter+0x28e>
    29f8:	14 c0       	rjmp	.+40     	; 0x2a22 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fa:	6d 89       	ldd	r22, Y+21	; 0x15
    29fc:	7e 89       	ldd	r23, Y+22	; 0x16
    29fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2a00:	98 8d       	ldd	r25, Y+24	; 0x18
    2a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9c 8b       	std	Y+20, r25	; 0x14
    2a0c:	8b 8b       	std	Y+19, r24	; 0x13
    2a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a10:	9c 89       	ldd	r25, Y+20	; 0x14
    2a12:	98 8b       	std	Y+16, r25	; 0x10
    2a14:	8f 87       	std	Y+15, r24	; 0x0f
    2a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a18:	98 89       	ldd	r25, Y+16	; 0x10
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <LCD_displayCharacter+0x2d6>
    2a1e:	98 8b       	std	Y+16, r25	; 0x10
    2a20:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a22:	82 e0       	ldi	r24, 0x02	; 2
    2a24:	61 e0       	ldi	r22, 0x01	; 1
    2a26:	40 e0       	ldi	r20, 0x00	; 0
    2a28:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <GPIO_writePin>
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	a0 e8       	ldi	r26, 0x80	; 128
    2a32:	bf e3       	ldi	r27, 0x3F	; 63
    2a34:	8b 87       	std	Y+11, r24	; 0x0b
    2a36:	9c 87       	std	Y+12, r25	; 0x0c
    2a38:	ad 87       	std	Y+13, r26	; 0x0d
    2a3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	4a ef       	ldi	r20, 0xFA	; 250
    2a4a:	54 e4       	ldi	r21, 0x44	; 68
    2a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	8f 83       	std	Y+7, r24	; 0x07
    2a56:	98 87       	std	Y+8, r25	; 0x08
    2a58:	a9 87       	std	Y+9, r26	; 0x09
    2a5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5e:	78 85       	ldd	r23, Y+8	; 0x08
    2a60:	89 85       	ldd	r24, Y+9	; 0x09
    2a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e8       	ldi	r20, 0x80	; 128
    2a6a:	5f e3       	ldi	r21, 0x3F	; 63
    2a6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a70:	88 23       	and	r24, r24
    2a72:	2c f4       	brge	.+10     	; 0x2a7e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
    2a7c:	3f c0       	rjmp	.+126    	; 0x2afc <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a80:	78 85       	ldd	r23, Y+8	; 0x08
    2a82:	89 85       	ldd	r24, Y+9	; 0x09
    2a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	3f ef       	ldi	r19, 0xFF	; 255
    2a8a:	4f e7       	ldi	r20, 0x7F	; 127
    2a8c:	57 e4       	ldi	r21, 0x47	; 71
    2a8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a92:	18 16       	cp	r1, r24
    2a94:	4c f5       	brge	.+82     	; 0x2ae8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e2       	ldi	r20, 0x20	; 32
    2aa4:	51 e4       	ldi	r21, 0x41	; 65
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9e 83       	std	Y+6, r25	; 0x06
    2abc:	8d 83       	std	Y+5, r24	; 0x05
    2abe:	0f c0       	rjmp	.+30     	; 0x2ade <LCD_displayCharacter+0x39a>
    2ac0:	88 ec       	ldi	r24, 0xC8	; 200
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9c 83       	std	Y+4, r25	; 0x04
    2ac6:	8b 83       	std	Y+3, r24	; 0x03
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	9c 81       	ldd	r25, Y+4	; 0x04
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_displayCharacter+0x388>
    2ad0:	9c 83       	std	Y+4, r25	; 0x04
    2ad2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	9e 83       	std	Y+6, r25	; 0x06
    2adc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	69 f7       	brne	.-38     	; 0x2ac0 <LCD_displayCharacter+0x37c>
    2ae6:	14 c0       	rjmp	.+40     	; 0x2b10 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aea:	78 85       	ldd	r23, Y+8	; 0x08
    2aec:	89 85       	ldd	r24, Y+9	; 0x09
    2aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9e 83       	std	Y+6, r25	; 0x06
    2afa:	8d 83       	std	Y+5, r24	; 0x05
    2afc:	8d 81       	ldd	r24, Y+5	; 0x05
    2afe:	9e 81       	ldd	r25, Y+6	; 0x06
    2b00:	9a 83       	std	Y+2, r25	; 0x02
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	9a 81       	ldd	r25, Y+2	; 0x02
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <LCD_displayCharacter+0x3c4>
    2b0c:	9a 83       	std	Y+2, r25	; 0x02
    2b0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b10:	e9 96       	adiw	r28, 0x39	; 57
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <LCD_displayString+0x6>
    2b28:	0f 92       	push	r0
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	9b 83       	std	Y+3, r25	; 0x03
    2b30:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b32:	19 82       	std	Y+1, r1	; 0x01
    2b34:	14 c0       	rjmp	.+40     	; 0x2b5e <LCD_displayString+0x3c>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b40:	fc 01       	movw	r30, r24
    2b42:	e2 0f       	add	r30, r18
    2b44:	f3 1f       	adc	r31, r19
    2b46:	80 81       	ld	r24, Z
    2b48:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayCharacter>
		i++;
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	8f 5f       	subi	r24, 0xFF	; 255
    2b50:	89 83       	std	Y+1, r24	; 0x01
		if(i==15){
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	8f 30       	cpi	r24, 0x0F	; 15
    2b56:	19 f4       	brne	.+6      	; 0x2b5e <LCD_displayString+0x3c>
			LCD_sendCommand(0xc0); // to make it start at new line
    2b58:	80 ec       	ldi	r24, 0xC0	; 192
    2b5a:	0e 94 b3 11 	call	0x2366	; 0x2366 <LCD_sendCommand>
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	9b 81       	ldd	r25, Y+3	; 0x03
    2b68:	fc 01       	movw	r30, r24
    2b6a:	e2 0f       	add	r30, r18
    2b6c:	f3 1f       	adc	r31, r19
    2b6e:	80 81       	ld	r24, Z
    2b70:	88 23       	and	r24, r24
    2b72:	09 f7       	brne	.-62     	; 0x2b36 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	08 95       	ret

00002b80 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	00 d0       	rcall	.+0      	; 0x2b86 <LCD_moveCursor+0x6>
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <LCD_moveCursor+0x8>
    2b88:	0f 92       	push	r0
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	8a 83       	std	Y+2, r24	; 0x02
    2b90:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	28 2f       	mov	r18, r24
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	3d 83       	std	Y+5, r19	; 0x05
    2b9a:	2c 83       	std	Y+4, r18	; 0x04
    2b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba0:	81 30       	cpi	r24, 0x01	; 1
    2ba2:	91 05       	cpc	r25, r1
    2ba4:	c1 f0       	breq	.+48     	; 0x2bd6 <LCD_moveCursor+0x56>
    2ba6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba8:	3d 81       	ldd	r19, Y+5	; 0x05
    2baa:	22 30       	cpi	r18, 0x02	; 2
    2bac:	31 05       	cpc	r19, r1
    2bae:	2c f4       	brge	.+10     	; 0x2bba <LCD_moveCursor+0x3a>
    2bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	61 f0       	breq	.+24     	; 0x2bd0 <LCD_moveCursor+0x50>
    2bb8:	19 c0       	rjmp	.+50     	; 0x2bec <LCD_moveCursor+0x6c>
    2bba:	2c 81       	ldd	r18, Y+4	; 0x04
    2bbc:	3d 81       	ldd	r19, Y+5	; 0x05
    2bbe:	22 30       	cpi	r18, 0x02	; 2
    2bc0:	31 05       	cpc	r19, r1
    2bc2:	69 f0       	breq	.+26     	; 0x2bde <LCD_moveCursor+0x5e>
    2bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc8:	83 30       	cpi	r24, 0x03	; 3
    2bca:	91 05       	cpc	r25, r1
    2bcc:	61 f0       	breq	.+24     	; 0x2be6 <LCD_moveCursor+0x66>
    2bce:	0e c0       	rjmp	.+28     	; 0x2bec <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	0b c0       	rjmp	.+22     	; 0x2bec <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	80 5c       	subi	r24, 0xC0	; 192
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	07 c0       	rjmp	.+14     	; 0x2bec <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	80 5f       	subi	r24, 0xF0	; 240
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	03 c0       	rjmp	.+6      	; 0x2bec <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	80 5b       	subi	r24, 0xB0	; 176
    2bea:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	80 68       	ori	r24, 0x80	; 128
    2bf0:	0e 94 b3 11 	call	0x2366	; 0x2366 <LCD_sendCommand>
}
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <LCD_displayStringRowColumn+0x6>
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <LCD_displayStringRowColumn+0x8>
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	6a 83       	std	Y+2, r22	; 0x02
    2c14:	5c 83       	std	Y+4, r21	; 0x04
    2c16:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	6a 81       	ldd	r22, Y+2	; 0x02
    2c1c:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	9c 81       	ldd	r25, Y+4	; 0x04
    2c24:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayString>
}
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	62 97       	sbiw	r28, 0x12	; 18
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	9a 8b       	std	Y+18, r25	; 0x12
    2c4c:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c4e:	89 89       	ldd	r24, Y+17	; 0x11
    2c50:	9a 89       	ldd	r25, Y+18	; 0x12
    2c52:	9e 01       	movw	r18, r28
    2c54:	2f 5f       	subi	r18, 0xFF	; 255
    2c56:	3f 4f       	sbci	r19, 0xFF	; 255
    2c58:	b9 01       	movw	r22, r18
    2c5a:	4a e0       	ldi	r20, 0x0A	; 10
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	0e 94 ca 18 	call	0x3194	; 0x3194 <itoa>
	LCD_displayString(buff); /* Display the string */
    2c62:	ce 01       	movw	r24, r28
    2c64:	01 96       	adiw	r24, 0x01	; 1
    2c66:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayString>
}
    2c6a:	62 96       	adiw	r28, 0x12	; 18
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	0e 94 b3 11 	call	0x2366	; 0x2366 <LCD_sendCommand>
}
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <CreateCustomCharacter>:
void CreateCustomCharacter(unsigned char *pucPattern,const char cLocation)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <CreateCustomCharacter+0x6>
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <CreateCustomCharacter+0x8>
    2c98:	0f 92       	push	r0
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	9c 83       	std	Y+4, r25	; 0x04
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
    2ca2:	6d 83       	std	Y+5, r22	; 0x05
	int i=0;
    2ca4:	1a 82       	std	Y+2, r1	; 0x02
    2ca6:	19 82       	std	Y+1, r1	; 0x01
	LCD_sendCommand(0x40+(cLocation*8)); //Send the Address of CGRAM
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	88 2f       	mov	r24, r24
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	08 96       	adiw	r24, 0x08	; 8
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	88 0f       	add	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	0e 94 b3 11 	call	0x2366	; 0x2366 <LCD_sendCommand>
	for(i=0; i<8; i++)
    2cc0:	1a 82       	std	Y+2, r1	; 0x02
    2cc2:	19 82       	std	Y+1, r1	; 0x01
    2cc4:	0f c0       	rjmp	.+30     	; 0x2ce4 <CreateCustomCharacter+0x54>
		LCD_displayCharacter(pucPattern[i]); //Pass the bytes of pattern on LCD
    2cc6:	29 81       	ldd	r18, Y+1	; 0x01
    2cc8:	3a 81       	ldd	r19, Y+2	; 0x02
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cce:	fc 01       	movw	r30, r24
    2cd0:	e2 0f       	add	r30, r18
    2cd2:	f3 1f       	adc	r31, r19
    2cd4:	80 81       	ld	r24, Z
    2cd6:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayCharacter>
}
void CreateCustomCharacter(unsigned char *pucPattern,const char cLocation)
{
	int i=0;
	LCD_sendCommand(0x40+(cLocation*8)); //Send the Address of CGRAM
	for(i=0; i<8; i++)
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cde:	01 96       	adiw	r24, 0x01	; 1
    2ce0:	9a 83       	std	Y+2, r25	; 0x02
    2ce2:	89 83       	std	Y+1, r24	; 0x01
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce8:	88 30       	cpi	r24, 0x08	; 8
    2cea:	91 05       	cpc	r25, r1
    2cec:	64 f3       	brlt	.-40     	; 0x2cc6 <CreateCustomCharacter+0x36>
		LCD_displayCharacter(pucPattern[i]); //Pass the bytes of pattern on LCD
}
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	08 95       	ret

00002cfe <main>:
 *      Author: Mina
 */

#include "HMI_ctrl.h"

int main(void){
    2cfe:	df 93       	push	r29
    2d00:	cf 93       	push	r28
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62

	START_init();   //start initialization of components
    2d06:	0e 94 b3 05 	call	0xb66	; 0xb66 <START_init>

	Lock_NewPass();  //// send first pass and save it
    2d0a:	0e 94 f9 07 	call	0xff2	; 0xff2 <Lock_NewPass>

	while(TRUE)
	{
		Main_Options();   //for main option set menu
    2d0e:	0e 94 85 0b 	call	0x170a	; 0x170a <Main_Options>
    2d12:	fd cf       	rjmp	.-6      	; 0x2d0e <main+0x10>

00002d14 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    2d14:	1f 92       	push	r1
    2d16:	0f 92       	push	r0
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	0f 92       	push	r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	2f 93       	push	r18
    2d20:	3f 93       	push	r19
    2d22:	4f 93       	push	r20
    2d24:	5f 93       	push	r21
    2d26:	6f 93       	push	r22
    2d28:	7f 93       	push	r23
    2d2a:	8f 93       	push	r24
    2d2c:	9f 93       	push	r25
    2d2e:	af 93       	push	r26
    2d30:	bf 93       	push	r27
    2d32:	ef 93       	push	r30
    2d34:	ff 93       	push	r31
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2d3e:	80 91 5b 01 	lds	r24, 0x015B
    2d42:	90 91 5c 01 	lds	r25, 0x015C
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	29 f0       	breq	.+10     	; 0x2d54 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2d4a:	e0 91 5b 01 	lds	r30, 0x015B
    2d4e:	f0 91 5c 01 	lds	r31, 0x015C
    2d52:	09 95       	icall
	}
}
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	ff 91       	pop	r31
    2d5a:	ef 91       	pop	r30
    2d5c:	bf 91       	pop	r27
    2d5e:	af 91       	pop	r26
    2d60:	9f 91       	pop	r25
    2d62:	8f 91       	pop	r24
    2d64:	7f 91       	pop	r23
    2d66:	6f 91       	pop	r22
    2d68:	5f 91       	pop	r21
    2d6a:	4f 91       	pop	r20
    2d6c:	3f 91       	pop	r19
    2d6e:	2f 91       	pop	r18
    2d70:	0f 90       	pop	r0
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	0f 90       	pop	r0
    2d76:	1f 90       	pop	r1
    2d78:	18 95       	reti

00002d7a <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    2d7a:	1f 92       	push	r1
    2d7c:	0f 92       	push	r0
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	0f 92       	push	r0
    2d82:	11 24       	eor	r1, r1
    2d84:	2f 93       	push	r18
    2d86:	3f 93       	push	r19
    2d88:	4f 93       	push	r20
    2d8a:	5f 93       	push	r21
    2d8c:	6f 93       	push	r22
    2d8e:	7f 93       	push	r23
    2d90:	8f 93       	push	r24
    2d92:	9f 93       	push	r25
    2d94:	af 93       	push	r26
    2d96:	bf 93       	push	r27
    2d98:	ef 93       	push	r30
    2d9a:	ff 93       	push	r31
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2da4:	80 91 5b 01 	lds	r24, 0x015B
    2da8:	90 91 5c 01 	lds	r25, 0x015C
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	29 f0       	breq	.+10     	; 0x2dba <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2db0:	e0 91 5b 01 	lds	r30, 0x015B
    2db4:	f0 91 5c 01 	lds	r31, 0x015C
    2db8:	09 95       	icall
	}
}
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	ff 91       	pop	r31
    2dc0:	ef 91       	pop	r30
    2dc2:	bf 91       	pop	r27
    2dc4:	af 91       	pop	r26
    2dc6:	9f 91       	pop	r25
    2dc8:	8f 91       	pop	r24
    2dca:	7f 91       	pop	r23
    2dcc:	6f 91       	pop	r22
    2dce:	5f 91       	pop	r21
    2dd0:	4f 91       	pop	r20
    2dd2:	3f 91       	pop	r19
    2dd4:	2f 91       	pop	r18
    2dd6:	0f 90       	pop	r0
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	0f 90       	pop	r0
    2ddc:	1f 90       	pop	r1
    2dde:	18 95       	reti

00002de0 <TIMER1_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER1_init(const Timer1_ConfigType * Config_Ptr)
{
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <TIMER1_init+0x6>
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	9a 83       	std	Y+2, r25	; 0x02
    2dec:	89 83       	std	Y+1, r24	; 0x01
	 * For TCCR1A register : -
	 * non-pwm mode so FOC1A and FOC2A = 1
	 * in case of compare and normal mode , WGM11 & WGM10 & WGM13 = 0
	 * but only WGM12 = 1 in case of compare and equal to 0 in case of normal mode
	 */
	TCCR1A = ( 1 << FOC1A ) | ( 1 << FOC1B );
    2dee:	ef e4       	ldi	r30, 0x4F	; 79
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	8c e0       	ldi	r24, 0x0C	; 12
    2df4:	80 83       	st	Z, r24
	/*
	 * For TCCR1B register : -
	 * WGM12 = 1 -> Compare mode or 0 -> Normal mode
	 * CS12 : CS10 = prescaler value
	 */
	TCCR1B = ( Config_Ptr ->prescaler ) | ( ( Config_Ptr ->mode ) << WGM12 );
    2df6:	ae e4       	ldi	r26, 0x4E	; 78
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dfe:	84 81       	ldd	r24, Z+4	; 0x04
    2e00:	28 2f       	mov	r18, r24
    2e02:	e9 81       	ldd	r30, Y+1	; 0x01
    2e04:	fa 81       	ldd	r31, Y+2	; 0x02
    2e06:	85 81       	ldd	r24, Z+5	; 0x05
    2e08:	88 2f       	mov	r24, r24
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	88 0f       	add	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	88 0f       	add	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	82 2b       	or	r24, r18
    2e1a:	8c 93       	st	X, r24

	TCNT1 =Config_Ptr->initial_value;		/* Set timer1 initial value */
    2e1c:	ac e4       	ldi	r26, 0x4C	; 76
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e9 81       	ldd	r30, Y+1	; 0x01
    2e22:	fa 81       	ldd	r31, Y+2	; 0x02
    2e24:	80 81       	ld	r24, Z
    2e26:	91 81       	ldd	r25, Z+1	; 0x01
    2e28:	11 96       	adiw	r26, 0x01	; 1
    2e2a:	9c 93       	st	X, r25
    2e2c:	8e 93       	st	-X, r24

	if(Config_Ptr->mode==NORMAL)
    2e2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e30:	fa 81       	ldd	r31, Y+2	; 0x02
    2e32:	85 81       	ldd	r24, Z+5	; 0x05
    2e34:	88 23       	and	r24, r24
    2e36:	79 f4       	brne	.+30     	; 0x2e56 <TIMER1_init+0x76>
	{
		TCCR1B&=~(1<<WGM12);
    2e38:	ae e4       	ldi	r26, 0x4E	; 78
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	ee e4       	ldi	r30, 0x4E	; 78
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
    2e42:	87 7f       	andi	r24, 0xF7	; 247
    2e44:	8c 93       	st	X, r24
		TIMSK|=(1<<TOIE1);//Overflow Interrupt Enable
    2e46:	a9 e5       	ldi	r26, 0x59	; 89
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	e9 e5       	ldi	r30, 0x59	; 89
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	84 60       	ori	r24, 0x04	; 4
    2e52:	8c 93       	st	X, r24
    2e54:	1c c0       	rjmp	.+56     	; 0x2e8e <TIMER1_init+0xae>

	}
	else if(Config_Ptr->mode==COMPARE)
    2e56:	e9 81       	ldd	r30, Y+1	; 0x01
    2e58:	fa 81       	ldd	r31, Y+2	; 0x02
    2e5a:	85 81       	ldd	r24, Z+5	; 0x05
    2e5c:	81 30       	cpi	r24, 0x01	; 1
    2e5e:	b9 f4       	brne	.+46     	; 0x2e8e <TIMER1_init+0xae>
	{
		TCCR1B|=(1<<WGM12);
    2e60:	ae e4       	ldi	r26, 0x4E	; 78
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	ee e4       	ldi	r30, 0x4E	; 78
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	88 60       	ori	r24, 0x08	; 8
    2e6c:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;    /* Set timer1 compare value */
    2e6e:	aa e4       	ldi	r26, 0x4A	; 74
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	e9 81       	ldd	r30, Y+1	; 0x01
    2e74:	fa 81       	ldd	r31, Y+2	; 0x02
    2e76:	82 81       	ldd	r24, Z+2	; 0x02
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	11 96       	adiw	r26, 0x01	; 1
    2e7c:	9c 93       	st	X, r25
    2e7e:	8e 93       	st	-X, r24
		TIMSK |= (1 << OCIE1A); //Output Compare A Match Interrupt Enable
    2e80:	a9 e5       	ldi	r26, 0x59	; 89
    2e82:	b0 e0       	ldi	r27, 0x00	; 0
    2e84:	e9 e5       	ldi	r30, 0x59	; 89
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	80 81       	ld	r24, Z
    2e8a:	80 61       	ori	r24, 0x10	; 16
    2e8c:	8c 93       	st	X, r24
	}
}
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	cf 91       	pop	r28
    2e94:	df 91       	pop	r29
    2e96:	08 95       	ret

00002e98 <TIMER1_deInit>:
void TIMER1_deInit(void){
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
	/* clear all registers */
	TCCR1A = 0;
    2ea0:	ef e4       	ldi	r30, 0x4F	; 79
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	10 82       	st	Z, r1
	TCCR1B = 0;
    2ea6:	ee e4       	ldi	r30, 0x4E	; 78
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	10 82       	st	Z, r1
	TIMSK = 0;
    2eac:	e9 e5       	ldi	r30, 0x59	; 89
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	10 82       	st	Z, r1
	TCNT1 = 0;
    2eb2:	ec e4       	ldi	r30, 0x4C	; 76
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	11 82       	std	Z+1, r1	; 0x01
    2eb8:	10 82       	st	Z, r1
	OCR1A = 0;
    2eba:	ea e4       	ldi	r30, 0x4A	; 74
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	11 82       	std	Z+1, r1	; 0x01
    2ec0:	10 82       	st	Z, r1
}
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <TIMER1_setCallBack>:

void TIMER1_setCallBack(void(*a_ptr)(void))
{
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <TIMER1_setCallBack+0x6>
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eda:	90 93 5c 01 	sts	0x015C, r25
    2ede:	80 93 5b 01 	sts	0x015B, r24
}
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <UART_init+0x6>
    2ef2:	00 d0       	rcall	.+0      	; 0x2ef4 <UART_init+0x8>
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
    2ef8:	9c 83       	std	Y+4, r25	; 0x04
    2efa:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2efc:	1a 82       	std	Y+2, r1	; 0x02
    2efe:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2f00:	eb e2       	ldi	r30, 0x2B	; 43
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2f08:	ea e2       	ldi	r30, 0x2A	; 42
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	88 e1       	ldi	r24, 0x18	; 24
    2f0e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC =(1<<URSEL)|((Config_Ptr->parity_bit)<<4)|((Config_Ptr->stop_bit)<<3)|((Config_Ptr->character_size)<<1);
    2f10:	a0 e4       	ldi	r26, 0x40	; 64
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	eb 81       	ldd	r30, Y+3	; 0x03
    2f16:	fc 81       	ldd	r31, Y+4	; 0x04
    2f18:	80 81       	ld	r24, Z
    2f1a:	88 2f       	mov	r24, r24
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	82 95       	swap	r24
    2f20:	92 95       	swap	r25
    2f22:	90 7f       	andi	r25, 0xF0	; 240
    2f24:	98 27       	eor	r25, r24
    2f26:	80 7f       	andi	r24, 0xF0	; 240
    2f28:	98 27       	eor	r25, r24
    2f2a:	28 2f       	mov	r18, r24
    2f2c:	20 68       	ori	r18, 0x80	; 128
    2f2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f30:	fc 81       	ldd	r31, Y+4	; 0x04
    2f32:	81 81       	ldd	r24, Z+1	; 0x01
    2f34:	88 2f       	mov	r24, r24
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	88 0f       	add	r24, r24
    2f3a:	99 1f       	adc	r25, r25
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	88 0f       	add	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	28 2b       	or	r18, r24
    2f46:	eb 81       	ldd	r30, Y+3	; 0x03
    2f48:	fc 81       	ldd	r31, Y+4	; 0x04
    2f4a:	82 81       	ldd	r24, Z+2	; 0x02
    2f4c:	88 2f       	mov	r24, r24
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	88 0f       	add	r24, r24
    2f52:	99 1f       	adc	r25, r25
    2f54:	82 2b       	or	r24, r18
    2f56:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2f58:	eb 81       	ldd	r30, Y+3	; 0x03
    2f5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f5c:	83 81       	ldd	r24, Z+3	; 0x03
    2f5e:	94 81       	ldd	r25, Z+4	; 0x04
    2f60:	a5 81       	ldd	r26, Z+5	; 0x05
    2f62:	b6 81       	ldd	r27, Z+6	; 0x06
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	aa 1f       	adc	r26, r26
    2f6a:	bb 1f       	adc	r27, r27
    2f6c:	88 0f       	add	r24, r24
    2f6e:	99 1f       	adc	r25, r25
    2f70:	aa 1f       	adc	r26, r26
    2f72:	bb 1f       	adc	r27, r27
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	aa 1f       	adc	r26, r26
    2f7a:	bb 1f       	adc	r27, r27
    2f7c:	9c 01       	movw	r18, r24
    2f7e:	ad 01       	movw	r20, r26
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	92 e1       	ldi	r25, 0x12	; 18
    2f84:	aa e7       	ldi	r26, 0x7A	; 122
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	bc 01       	movw	r22, r24
    2f8a:	cd 01       	movw	r24, r26
    2f8c:	0e 94 71 18 	call	0x30e2	; 0x30e2 <__udivmodsi4>
    2f90:	da 01       	movw	r26, r20
    2f92:	c9 01       	movw	r24, r18
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	9a 83       	std	Y+2, r25	; 0x02
    2f98:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2f9a:	e0 e4       	ldi	r30, 0x40	; 64
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	89 2f       	mov	r24, r25
    2fa4:	99 27       	eor	r25, r25
    2fa6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2fa8:	e9 e2       	ldi	r30, 0x29	; 41
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	80 83       	st	Z, r24
}
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	08 95       	ret

00002fbe <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	0f 92       	push	r0
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2fca:	eb e2       	ldi	r30, 0x2B	; 43
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	88 2f       	mov	r24, r24
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	80 72       	andi	r24, 0x20	; 32
    2fd6:	90 70       	andi	r25, 0x00	; 0
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	b9 f3       	breq	.-18     	; 0x2fca <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2fdc:	ec e2       	ldi	r30, 0x2C	; 44
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2fe4:	0f 90       	pop	r0
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ff4:	eb e2       	ldi	r30, 0x2B	; 43
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	88 23       	and	r24, r24
    2ffc:	dc f7       	brge	.-10     	; 0x2ff4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2ffe:	ec e2       	ldi	r30, 0x2C	; 44
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
}
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	00 d0       	rcall	.+0      	; 0x3010 <UART_sendString+0x6>
    3010:	0f 92       	push	r0
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	9b 83       	std	Y+3, r25	; 0x03
    3018:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    301a:	19 82       	std	Y+1, r1	; 0x01
    301c:	0e c0       	rjmp	.+28     	; 0x303a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	28 2f       	mov	r18, r24
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	9b 81       	ldd	r25, Y+3	; 0x03
    3028:	fc 01       	movw	r30, r24
    302a:	e2 0f       	add	r30, r18
    302c:	f3 1f       	adc	r31, r19
    302e:	80 81       	ld	r24, Z
    3030:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <UART_sendByte>
		i++;
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	8f 5f       	subi	r24, 0xFF	; 255
    3038:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	28 2f       	mov	r18, r24
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	8a 81       	ldd	r24, Y+2	; 0x02
    3042:	9b 81       	ldd	r25, Y+3	; 0x03
    3044:	fc 01       	movw	r30, r24
    3046:	e2 0f       	add	r30, r18
    3048:	f3 1f       	adc	r31, r19
    304a:	80 81       	ld	r24, Z
    304c:	88 23       	and	r24, r24
    304e:	39 f7       	brne	.-50     	; 0x301e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    305c:	0f 93       	push	r16
    305e:	1f 93       	push	r17
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	00 d0       	rcall	.+0      	; 0x3066 <UART_receiveString+0xa>
    3066:	0f 92       	push	r0
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	9b 83       	std	Y+3, r25	; 0x03
    306e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3070:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	28 2f       	mov	r18, r24
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	9b 81       	ldd	r25, Y+3	; 0x03
    307c:	8c 01       	movw	r16, r24
    307e:	02 0f       	add	r16, r18
    3080:	13 1f       	adc	r17, r19
    3082:	0e 94 f6 17 	call	0x2fec	; 0x2fec <UART_recieveByte>
    3086:	f8 01       	movw	r30, r16
    3088:	80 83       	st	Z, r24
    308a:	0f c0       	rjmp	.+30     	; 0x30aa <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	8f 5f       	subi	r24, 0xFF	; 255
    3090:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	8a 81       	ldd	r24, Y+2	; 0x02
    309a:	9b 81       	ldd	r25, Y+3	; 0x03
    309c:	8c 01       	movw	r16, r24
    309e:	02 0f       	add	r16, r18
    30a0:	13 1f       	adc	r17, r19
    30a2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <UART_recieveByte>
    30a6:	f8 01       	movw	r30, r16
    30a8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	28 2f       	mov	r18, r24
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	9b 81       	ldd	r25, Y+3	; 0x03
    30b4:	fc 01       	movw	r30, r24
    30b6:	e2 0f       	add	r30, r18
    30b8:	f3 1f       	adc	r31, r19
    30ba:	80 81       	ld	r24, Z
    30bc:	83 32       	cpi	r24, 0x23	; 35
    30be:	31 f7       	brne	.-52     	; 0x308c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	28 2f       	mov	r18, r24
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ca:	fc 01       	movw	r30, r24
    30cc:	e2 0f       	add	r30, r18
    30ce:	f3 1f       	adc	r31, r19
    30d0:	10 82       	st	Z, r1
}
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	1f 91       	pop	r17
    30de:	0f 91       	pop	r16
    30e0:	08 95       	ret

000030e2 <__udivmodsi4>:
    30e2:	a1 e2       	ldi	r26, 0x21	; 33
    30e4:	1a 2e       	mov	r1, r26
    30e6:	aa 1b       	sub	r26, r26
    30e8:	bb 1b       	sub	r27, r27
    30ea:	fd 01       	movw	r30, r26
    30ec:	0d c0       	rjmp	.+26     	; 0x3108 <__udivmodsi4_ep>

000030ee <__udivmodsi4_loop>:
    30ee:	aa 1f       	adc	r26, r26
    30f0:	bb 1f       	adc	r27, r27
    30f2:	ee 1f       	adc	r30, r30
    30f4:	ff 1f       	adc	r31, r31
    30f6:	a2 17       	cp	r26, r18
    30f8:	b3 07       	cpc	r27, r19
    30fa:	e4 07       	cpc	r30, r20
    30fc:	f5 07       	cpc	r31, r21
    30fe:	20 f0       	brcs	.+8      	; 0x3108 <__udivmodsi4_ep>
    3100:	a2 1b       	sub	r26, r18
    3102:	b3 0b       	sbc	r27, r19
    3104:	e4 0b       	sbc	r30, r20
    3106:	f5 0b       	sbc	r31, r21

00003108 <__udivmodsi4_ep>:
    3108:	66 1f       	adc	r22, r22
    310a:	77 1f       	adc	r23, r23
    310c:	88 1f       	adc	r24, r24
    310e:	99 1f       	adc	r25, r25
    3110:	1a 94       	dec	r1
    3112:	69 f7       	brne	.-38     	; 0x30ee <__udivmodsi4_loop>
    3114:	60 95       	com	r22
    3116:	70 95       	com	r23
    3118:	80 95       	com	r24
    311a:	90 95       	com	r25
    311c:	9b 01       	movw	r18, r22
    311e:	ac 01       	movw	r20, r24
    3120:	bd 01       	movw	r22, r26
    3122:	cf 01       	movw	r24, r30
    3124:	08 95       	ret

00003126 <__prologue_saves__>:
    3126:	2f 92       	push	r2
    3128:	3f 92       	push	r3
    312a:	4f 92       	push	r4
    312c:	5f 92       	push	r5
    312e:	6f 92       	push	r6
    3130:	7f 92       	push	r7
    3132:	8f 92       	push	r8
    3134:	9f 92       	push	r9
    3136:	af 92       	push	r10
    3138:	bf 92       	push	r11
    313a:	cf 92       	push	r12
    313c:	df 92       	push	r13
    313e:	ef 92       	push	r14
    3140:	ff 92       	push	r15
    3142:	0f 93       	push	r16
    3144:	1f 93       	push	r17
    3146:	cf 93       	push	r28
    3148:	df 93       	push	r29
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	ca 1b       	sub	r28, r26
    3150:	db 0b       	sbc	r29, r27
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	09 94       	ijmp

0000315e <__epilogue_restores__>:
    315e:	2a 88       	ldd	r2, Y+18	; 0x12
    3160:	39 88       	ldd	r3, Y+17	; 0x11
    3162:	48 88       	ldd	r4, Y+16	; 0x10
    3164:	5f 84       	ldd	r5, Y+15	; 0x0f
    3166:	6e 84       	ldd	r6, Y+14	; 0x0e
    3168:	7d 84       	ldd	r7, Y+13	; 0x0d
    316a:	8c 84       	ldd	r8, Y+12	; 0x0c
    316c:	9b 84       	ldd	r9, Y+11	; 0x0b
    316e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3170:	b9 84       	ldd	r11, Y+9	; 0x09
    3172:	c8 84       	ldd	r12, Y+8	; 0x08
    3174:	df 80       	ldd	r13, Y+7	; 0x07
    3176:	ee 80       	ldd	r14, Y+6	; 0x06
    3178:	fd 80       	ldd	r15, Y+5	; 0x05
    317a:	0c 81       	ldd	r16, Y+4	; 0x04
    317c:	1b 81       	ldd	r17, Y+3	; 0x03
    317e:	aa 81       	ldd	r26, Y+2	; 0x02
    3180:	b9 81       	ldd	r27, Y+1	; 0x01
    3182:	ce 0f       	add	r28, r30
    3184:	d1 1d       	adc	r29, r1
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	de bf       	out	0x3e, r29	; 62
    318c:	0f be       	out	0x3f, r0	; 63
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	ed 01       	movw	r28, r26
    3192:	08 95       	ret

00003194 <itoa>:
    3194:	fb 01       	movw	r30, r22
    3196:	9f 01       	movw	r18, r30
    3198:	e8 94       	clt
    319a:	42 30       	cpi	r20, 0x02	; 2
    319c:	c4 f0       	brlt	.+48     	; 0x31ce <itoa+0x3a>
    319e:	45 32       	cpi	r20, 0x25	; 37
    31a0:	b4 f4       	brge	.+44     	; 0x31ce <itoa+0x3a>
    31a2:	4a 30       	cpi	r20, 0x0A	; 10
    31a4:	29 f4       	brne	.+10     	; 0x31b0 <itoa+0x1c>
    31a6:	97 fb       	bst	r25, 7
    31a8:	1e f4       	brtc	.+6      	; 0x31b0 <itoa+0x1c>
    31aa:	90 95       	com	r25
    31ac:	81 95       	neg	r24
    31ae:	9f 4f       	sbci	r25, 0xFF	; 255
    31b0:	64 2f       	mov	r22, r20
    31b2:	77 27       	eor	r23, r23
    31b4:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <__udivmodhi4>
    31b8:	80 5d       	subi	r24, 0xD0	; 208
    31ba:	8a 33       	cpi	r24, 0x3A	; 58
    31bc:	0c f0       	brlt	.+2      	; 0x31c0 <itoa+0x2c>
    31be:	89 5d       	subi	r24, 0xD9	; 217
    31c0:	81 93       	st	Z+, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	a1 f7       	brne	.-24     	; 0x31b0 <itoa+0x1c>
    31c8:	16 f4       	brtc	.+4      	; 0x31ce <itoa+0x3a>
    31ca:	5d e2       	ldi	r21, 0x2D	; 45
    31cc:	51 93       	st	Z+, r21
    31ce:	10 82       	st	Z, r1
    31d0:	c9 01       	movw	r24, r18
    31d2:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <strrev>

000031d6 <strrev>:
    31d6:	dc 01       	movw	r26, r24
    31d8:	fc 01       	movw	r30, r24
    31da:	67 2f       	mov	r22, r23
    31dc:	71 91       	ld	r23, Z+
    31de:	77 23       	and	r23, r23
    31e0:	e1 f7       	brne	.-8      	; 0x31da <strrev+0x4>
    31e2:	32 97       	sbiw	r30, 0x02	; 2
    31e4:	04 c0       	rjmp	.+8      	; 0x31ee <strrev+0x18>
    31e6:	7c 91       	ld	r23, X
    31e8:	6d 93       	st	X+, r22
    31ea:	70 83       	st	Z, r23
    31ec:	62 91       	ld	r22, -Z
    31ee:	ae 17       	cp	r26, r30
    31f0:	bf 07       	cpc	r27, r31
    31f2:	c8 f3       	brcs	.-14     	; 0x31e6 <strrev+0x10>
    31f4:	08 95       	ret

000031f6 <__udivmodhi4>:
    31f6:	aa 1b       	sub	r26, r26
    31f8:	bb 1b       	sub	r27, r27
    31fa:	51 e1       	ldi	r21, 0x11	; 17
    31fc:	07 c0       	rjmp	.+14     	; 0x320c <__udivmodhi4_ep>

000031fe <__udivmodhi4_loop>:
    31fe:	aa 1f       	adc	r26, r26
    3200:	bb 1f       	adc	r27, r27
    3202:	a6 17       	cp	r26, r22
    3204:	b7 07       	cpc	r27, r23
    3206:	10 f0       	brcs	.+4      	; 0x320c <__udivmodhi4_ep>
    3208:	a6 1b       	sub	r26, r22
    320a:	b7 0b       	sbc	r27, r23

0000320c <__udivmodhi4_ep>:
    320c:	88 1f       	adc	r24, r24
    320e:	99 1f       	adc	r25, r25
    3210:	5a 95       	dec	r21
    3212:	a9 f7       	brne	.-22     	; 0x31fe <__udivmodhi4_loop>
    3214:	80 95       	com	r24
    3216:	90 95       	com	r25
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	08 95       	ret

0000321e <_exit>:
    321e:	f8 94       	cli

00003220 <__stop_program>:
    3220:	ff cf       	rjmp	.-2      	; 0x3220 <__stop_program>
